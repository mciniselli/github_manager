<constructor pos:end="120:3" pos:start="51:3"><specifier pos:end="51:8" pos:start="51:3">public</specifier> <name pos:end="51:16" pos:start="51:10">Hashids</name><parameter_list pos:end="51:65" pos:start="51:17">(<parameter pos:end="51:28" pos:start="51:18"><decl pos:end="51:28" pos:start="51:18"><type pos:end="51:28" pos:start="51:18"><name pos:end="51:23" pos:start="51:18">String</name></type> <name pos:end="51:28" pos:start="51:25">salt</name></decl></parameter>, <parameter pos:end="51:47" pos:start="51:31"><decl pos:end="51:47" pos:start="51:31"><type pos:end="51:47" pos:start="51:31"><name pos:end="51:33" pos:start="51:31">int</name></type> <name pos:end="51:47" pos:start="51:35">minHashLength</name></decl></parameter>, <parameter pos:end="51:64" pos:start="51:50"><decl pos:end="51:64" pos:start="51:50"><type pos:end="51:64" pos:start="51:50"><name pos:end="51:55" pos:start="51:50">String</name></type> <name pos:end="51:64" pos:start="51:57">alphabet</name></decl></parameter>)</parameter_list> <block pos:end="120:3" pos:start="51:67">{<block_content pos:end="119:21" pos:start="52:5">
<expr_stmt pos:end="52:51" pos:start="52:5"><expr pos:end="52:50" pos:start="52:5"><name pos:end="52:13" pos:start="52:5"><name pos:end="52:8" pos:start="52:5">this</name><operator pos:end="52:9" pos:start="52:9">.</operator><name pos:end="52:13" pos:start="52:10">salt</name></name> <operator pos:end="52:15" pos:start="52:15">=</operator> <ternary pos:end="52:50" pos:start="52:17"><condition pos:end="52:30" pos:start="52:17"><expr pos:end="52:28" pos:start="52:17"><name pos:end="52:20" pos:start="52:17">salt</name> <operator pos:end="52:23" pos:start="52:22">!=</operator> <literal pos:end="52:28" pos:start="52:25" type="null">null</literal></expr> ?</condition><then pos:end="52:35" pos:start="52:32"> <expr pos:end="52:35" pos:start="52:32"><name pos:end="52:35" pos:start="52:32">salt</name></expr> </then><else pos:end="52:50" pos:start="52:37">: <expr pos:end="52:50" pos:start="52:39"><name pos:end="52:50" pos:start="52:39">DEFAULT_SALT</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt pos:end="53:85" pos:start="53:5"><expr pos:end="53:84" pos:start="53:5"><name pos:end="53:22" pos:start="53:5"><name pos:end="53:8" pos:start="53:5">this</name><operator pos:end="53:9" pos:start="53:9">.</operator><name pos:end="53:22" pos:start="53:10">minHashLength</name></name> <operator pos:end="53:24" pos:start="53:24">=</operator> <ternary pos:end="53:84" pos:start="53:26"><condition pos:end="53:44" pos:start="53:26"><expr pos:end="53:42" pos:start="53:26"><name pos:end="53:38" pos:start="53:26">minHashLength</name> <operator pos:end="53:40" pos:start="53:40">&gt;</operator> <literal pos:end="53:42" pos:start="53:42" type="number">0</literal></expr> ?</condition><then pos:end="53:58" pos:start="53:46"> <expr pos:end="53:58" pos:start="53:46"><name pos:end="53:58" pos:start="53:46">minHashLength</name></expr> </then><else pos:end="53:84" pos:start="53:60">: <expr pos:end="53:84" pos:start="53:62"><name pos:end="53:84" pos:start="53:62">DEFAULT_MIN_HASH_LENGTH</name></expr></else></ternary></expr>;</expr_stmt>
<decl_stmt pos:end="55:55" pos:start="55:5"><decl pos:end="55:54" pos:start="55:5"><type pos:end="55:17" pos:start="55:5"><name pos:end="55:17" pos:start="55:5">StringBuilder</name></type> <name pos:end="55:32" pos:start="55:19">uniqueAlphabet</name> <init pos:end="55:54" pos:start="55:34">= <expr pos:end="55:54" pos:start="55:36"><operator pos:end="55:38" pos:start="55:36">new</operator> <call pos:end="55:54" pos:start="55:40"><name pos:end="55:52" pos:start="55:40">StringBuilder</name><argument_list pos:end="55:54" pos:start="55:53">()</argument_list></call></expr></init></decl>;</decl_stmt>
<for pos:end="60:5" pos:start="56:5">for <control pos:end="56:47" pos:start="56:9">(<init pos:end="56:19" pos:start="56:10"><decl pos:end="56:18" pos:start="56:10"><type pos:end="56:12" pos:start="56:10"><name pos:end="56:12" pos:start="56:10">int</name></type> <name pos:end="56:14" pos:start="56:14">i</name> <init pos:end="56:18" pos:start="56:16">= <expr pos:end="56:18" pos:start="56:18"><literal pos:end="56:18" pos:start="56:18" type="number">0</literal></expr></init></decl>;</init> <condition pos:end="56:42" pos:start="56:21"><expr pos:end="56:41" pos:start="56:21"><name pos:end="56:21" pos:start="56:21">i</name> <operator pos:end="56:23" pos:start="56:23">&lt;</operator> <call pos:end="56:41" pos:start="56:25"><name pos:end="56:39" pos:start="56:25"><name pos:end="56:32" pos:start="56:25">alphabet</name><operator pos:end="56:33" pos:start="56:33">.</operator><name pos:end="56:39" pos:start="56:34">length</name></name><argument_list pos:end="56:41" pos:start="56:40">()</argument_list></call></expr>;</condition> <incr pos:end="56:46" pos:start="56:44"><expr pos:end="56:46" pos:start="56:44"><name pos:end="56:44" pos:start="56:44">i</name><operator pos:end="56:46" pos:start="56:45">++</operator></expr></incr>)</control> <block pos:end="60:5" pos:start="56:49">{<block_content pos:end="59:7" pos:start="57:7">
<if_stmt pos:end="59:7" pos:start="57:7"><if pos:end="59:7" pos:start="57:7">if <condition pos:end="57:75" pos:start="57:10">(<expr pos:end="57:74" pos:start="57:11"><call pos:end="57:68" pos:start="57:11"><name pos:end="57:32" pos:start="57:11"><name pos:end="57:24" pos:start="57:11">uniqueAlphabet</name><operator pos:end="57:25" pos:start="57:25">.</operator><name pos:end="57:32" pos:start="57:26">indexOf</name></name><argument_list pos:end="57:68" pos:start="57:33">(<argument pos:end="57:67" pos:start="57:34"><expr pos:end="57:67" pos:start="57:34"><call pos:end="57:67" pos:start="57:34"><name pos:end="57:47" pos:start="57:34"><name pos:end="57:39" pos:start="57:34">String</name><operator pos:end="57:40" pos:start="57:40">.</operator><name pos:end="57:47" pos:start="57:41">valueOf</name></name><argument_list pos:end="57:67" pos:start="57:48">(<argument pos:end="57:66" pos:start="57:49"><expr pos:end="57:66" pos:start="57:49"><call pos:end="57:66" pos:start="57:49"><name pos:end="57:63" pos:start="57:49"><name pos:end="57:56" pos:start="57:49">alphabet</name><operator pos:end="57:57" pos:start="57:57">.</operator><name pos:end="57:63" pos:start="57:58">charAt</name></name><argument_list pos:end="57:66" pos:start="57:64">(<argument pos:end="57:65" pos:start="57:65"><expr pos:end="57:65" pos:start="57:65"><name pos:end="57:65" pos:start="57:65">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:end="57:71" pos:start="57:70">==</operator> <operator pos:end="57:73" pos:start="57:73">-</operator><literal pos:end="57:74" pos:start="57:74" type="number">1</literal></expr>)</condition> <block pos:end="59:7" pos:start="57:77">{<block_content pos:end="58:50" pos:start="58:9">
<expr_stmt pos:end="58:50" pos:start="58:9"><expr pos:end="58:49" pos:start="58:9"><call pos:end="58:49" pos:start="58:9"><name pos:end="58:29" pos:start="58:9"><name pos:end="58:22" pos:start="58:9">uniqueAlphabet</name><operator pos:end="58:23" pos:start="58:23">.</operator><name pos:end="58:29" pos:start="58:24">append</name></name><argument_list pos:end="58:49" pos:start="58:30">(<argument pos:end="58:48" pos:start="58:31"><expr pos:end="58:48" pos:start="58:31"><call pos:end="58:48" pos:start="58:31"><name pos:end="58:45" pos:start="58:31"><name pos:end="58:38" pos:start="58:31">alphabet</name><operator pos:end="58:39" pos:start="58:39">.</operator><name pos:end="58:45" pos:start="58:40">charAt</name></name><argument_list pos:end="58:48" pos:start="58:46">(<argument pos:end="58:47" pos:start="58:47"><expr pos:end="58:47" pos:start="58:47"><name pos:end="58:47" pos:start="58:47">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt pos:end="62:41" pos:start="62:5"><expr pos:end="62:40" pos:start="62:5"><name pos:end="62:12" pos:start="62:5">alphabet</name> <operator pos:end="62:14" pos:start="62:14">=</operator> <call pos:end="62:40" pos:start="62:16"><name pos:end="62:38" pos:start="62:16"><name pos:end="62:29" pos:start="62:16">uniqueAlphabet</name><operator pos:end="62:30" pos:start="62:30">.</operator><name pos:end="62:38" pos:start="62:31">toString</name></name><argument_list pos:end="62:40" pos:start="62:39">()</argument_list></call></expr>;</expr_stmt>
<if_stmt pos:end="67:5" pos:start="64:5"><if pos:end="67:5" pos:start="64:5">if <condition pos:end="64:48" pos:start="64:8">(<expr pos:end="64:47" pos:start="64:9"><call pos:end="64:25" pos:start="64:9"><name pos:end="64:23" pos:start="64:9"><name pos:end="64:16" pos:start="64:9">alphabet</name><operator pos:end="64:17" pos:start="64:17">.</operator><name pos:end="64:23" pos:start="64:18">length</name></name><argument_list pos:end="64:25" pos:start="64:24">()</argument_list></call> <operator pos:end="64:27" pos:start="64:27">&lt;</operator> <name pos:end="64:47" pos:start="64:29">MIN_ALPHABET_LENGTH</name></expr>)</condition> <block pos:end="67:5" pos:start="64:50">{<block_content pos:end="66:90" pos:start="65:7">
<throw pos:end="66:90" pos:start="65:7">throw <expr pos:end="66:89" pos:start="65:13"><operator pos:end="65:15" pos:start="65:13">new</operator> <call pos:end="66:89" pos:start="65:17"><name pos:end="65:40" pos:start="65:17">IllegalArgumentException</name><argument_list pos:end="66:89" pos:start="65:41">(
          <argument pos:end="66:88" pos:start="66:11"><expr pos:end="66:88" pos:start="66:11"><literal pos:end="66:43" pos:start="66:11" type="string">"alphabet must contain at least "</literal> <operator pos:end="66:45" pos:start="66:45">+</operator> <name pos:end="66:65" pos:start="66:47">MIN_ALPHABET_LENGTH</name> <operator pos:end="66:67" pos:start="66:67">+</operator> <literal pos:end="66:88" pos:start="66:69" type="string">" unique characters"</literal></expr></argument>)</argument_list></call></expr>;</throw>
</block_content>}</block></if></if_stmt>
<if_stmt pos:end="71:5" pos:start="69:5"><if pos:end="71:5" pos:start="69:5">if <condition pos:end="69:31" pos:start="69:8">(<expr pos:end="69:30" pos:start="69:9"><call pos:end="69:30" pos:start="69:9"><name pos:end="69:25" pos:start="69:9"><name pos:end="69:16" pos:start="69:9">alphabet</name><operator pos:end="69:17" pos:start="69:17">.</operator><name pos:end="69:25" pos:start="69:18">contains</name></name><argument_list pos:end="69:30" pos:start="69:26">(<argument pos:end="69:29" pos:start="69:27"><expr pos:end="69:29" pos:start="69:27"><literal pos:end="69:29" pos:start="69:27" type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:end="71:5" pos:start="69:33">{<block_content pos:end="70:76" pos:start="70:7">
<throw pos:end="70:76" pos:start="70:7">throw <expr pos:end="70:75" pos:start="70:13"><operator pos:end="70:15" pos:start="70:13">new</operator> <call pos:end="70:75" pos:start="70:17"><name pos:end="70:40" pos:start="70:17">IllegalArgumentException</name><argument_list pos:end="70:75" pos:start="70:41">(<argument pos:end="70:74" pos:start="70:42"><expr pos:end="70:74" pos:start="70:42"><literal pos:end="70:74" pos:start="70:42" type="string">"alphabet cannot contains spaces"</literal></expr></argument>)</argument_list></call></expr>;</throw>
</block_content>}</block></if></if_stmt>
<comment pos:end="73:63" pos:start="73:5" type="line">// seps should contain only characters present in alphabet;</comment>
<comment pos:end="74:40" pos:start="74:5" type="line">// alphabet should not contains seps</comment>
<decl_stmt pos:end="75:31" pos:start="75:5"><decl pos:end="75:30" pos:start="75:5"><type pos:end="75:10" pos:start="75:5"><name pos:end="75:10" pos:start="75:5">String</name></type> <name pos:end="75:15" pos:start="75:12">seps</name> <init pos:end="75:30" pos:start="75:17">= <expr pos:end="75:30" pos:start="75:19"><name pos:end="75:30" pos:start="75:19">DEFAULT_SEPS</name></expr></init></decl>;</decl_stmt>
<for pos:end="83:5" pos:start="76:5">for <control pos:end="76:43" pos:start="76:9">(<init pos:end="76:19" pos:start="76:10"><decl pos:end="76:18" pos:start="76:10"><type pos:end="76:12" pos:start="76:10"><name pos:end="76:12" pos:start="76:10">int</name></type> <name pos:end="76:14" pos:start="76:14">i</name> <init pos:end="76:18" pos:start="76:16">= <expr pos:end="76:18" pos:start="76:18"><literal pos:end="76:18" pos:start="76:18" type="number">0</literal></expr></init></decl>;</init> <condition pos:end="76:38" pos:start="76:21"><expr pos:end="76:37" pos:start="76:21"><name pos:end="76:21" pos:start="76:21">i</name> <operator pos:end="76:23" pos:start="76:23">&lt;</operator> <call pos:end="76:37" pos:start="76:25"><name pos:end="76:35" pos:start="76:25"><name pos:end="76:28" pos:start="76:25">seps</name><operator pos:end="76:29" pos:start="76:29">.</operator><name pos:end="76:35" pos:start="76:30">length</name></name><argument_list pos:end="76:37" pos:start="76:36">()</argument_list></call></expr>;</condition> <incr pos:end="76:42" pos:start="76:40"><expr pos:end="76:42" pos:start="76:40"><name pos:end="76:40" pos:start="76:40">i</name><operator pos:end="76:42" pos:start="76:41">++</operator></expr></incr>)</control> <block pos:end="83:5" pos:start="76:45">{<block_content pos:end="82:7" pos:start="77:7">
<decl_stmt pos:end="77:47" pos:start="77:7"><decl pos:end="77:46" pos:start="77:7"><type pos:end="77:9" pos:start="77:7"><name pos:end="77:9" pos:start="77:7">int</name></type> <name pos:end="77:11" pos:start="77:11">j</name> <init pos:end="77:46" pos:start="77:13">= <expr pos:end="77:46" pos:start="77:15"><call pos:end="77:46" pos:start="77:15"><name pos:end="77:30" pos:start="77:15"><name pos:end="77:22" pos:start="77:15">alphabet</name><operator pos:end="77:23" pos:start="77:23">.</operator><name pos:end="77:30" pos:start="77:24">indexOf</name></name><argument_list pos:end="77:46" pos:start="77:31">(<argument pos:end="77:45" pos:start="77:32"><expr pos:end="77:45" pos:start="77:32"><call pos:end="77:45" pos:start="77:32"><name pos:end="77:42" pos:start="77:32"><name pos:end="77:35" pos:start="77:32">seps</name><operator pos:end="77:36" pos:start="77:36">.</operator><name pos:end="77:42" pos:start="77:37">charAt</name></name><argument_list pos:end="77:45" pos:start="77:43">(<argument pos:end="77:44" pos:start="77:44"><expr pos:end="77:44" pos:start="77:44"><name pos:end="77:44" pos:start="77:44">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt pos:end="82:7" pos:start="78:7"><if pos:end="80:7" pos:start="78:7">if <condition pos:end="78:18" pos:start="78:10">(<expr pos:end="78:17" pos:start="78:11"><name pos:end="78:11" pos:start="78:11">j</name> <operator pos:end="78:14" pos:start="78:13">==</operator> <operator pos:end="78:16" pos:start="78:16">-</operator><literal pos:end="78:17" pos:start="78:17" type="number">1</literal></expr>)</condition> <block pos:end="80:7" pos:start="78:20">{<block_content pos:end="79:66" pos:start="79:9">
<expr_stmt pos:end="79:66" pos:start="79:9"><expr pos:end="79:65" pos:start="79:9"><name pos:end="79:12" pos:start="79:9">seps</name> <operator pos:end="79:14" pos:start="79:14">=</operator> <call pos:end="79:35" pos:start="79:16"><name pos:end="79:29" pos:start="79:16"><name pos:end="79:19" pos:start="79:16">seps</name><operator pos:end="79:20" pos:start="79:20">.</operator><name pos:end="79:29" pos:start="79:21">substring</name></name><argument_list pos:end="79:35" pos:start="79:30">(<argument pos:end="79:31" pos:start="79:31"><expr pos:end="79:31" pos:start="79:31"><literal pos:end="79:31" pos:start="79:31" type="number">0</literal></expr></argument>, <argument pos:end="79:34" pos:start="79:34"><expr pos:end="79:34" pos:start="79:34"><name pos:end="79:34" pos:start="79:34">i</name></expr></argument>)</argument_list></call> <operator pos:end="79:37" pos:start="79:37">+</operator> <literal pos:end="79:41" pos:start="79:39" type="string">" "</literal> <operator pos:end="79:43" pos:start="79:43">+</operator> <call pos:end="79:65" pos:start="79:45"><name pos:end="79:58" pos:start="79:45"><name pos:end="79:48" pos:start="79:45">seps</name><operator pos:end="79:49" pos:start="79:49">.</operator><name pos:end="79:58" pos:start="79:50">substring</name></name><argument_list pos:end="79:65" pos:start="79:59">(<argument pos:end="79:64" pos:start="79:60"><expr pos:end="79:64" pos:start="79:60"><name pos:end="79:60" pos:start="79:60">i</name> <operator pos:end="79:62" pos:start="79:62">+</operator> <literal pos:end="79:64" pos:start="79:64" type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else pos:end="82:7" pos:start="80:9">else <block pos:end="82:7" pos:start="80:14">{<block_content pos:end="81:78" pos:start="81:9">
<expr_stmt pos:end="81:78" pos:start="81:9"><expr pos:end="81:77" pos:start="81:9"><name pos:end="81:16" pos:start="81:9">alphabet</name> <operator pos:end="81:18" pos:start="81:18">=</operator> <call pos:end="81:43" pos:start="81:20"><name pos:end="81:37" pos:start="81:20"><name pos:end="81:27" pos:start="81:20">alphabet</name><operator pos:end="81:28" pos:start="81:28">.</operator><name pos:end="81:37" pos:start="81:29">substring</name></name><argument_list pos:end="81:43" pos:start="81:38">(<argument pos:end="81:39" pos:start="81:39"><expr pos:end="81:39" pos:start="81:39"><literal pos:end="81:39" pos:start="81:39" type="number">0</literal></expr></argument>, <argument pos:end="81:42" pos:start="81:42"><expr pos:end="81:42" pos:start="81:42"><name pos:end="81:42" pos:start="81:42">j</name></expr></argument>)</argument_list></call> <operator pos:end="81:45" pos:start="81:45">+</operator> <literal pos:end="81:49" pos:start="81:47" type="string">" "</literal> <operator pos:end="81:51" pos:start="81:51">+</operator> <call pos:end="81:77" pos:start="81:53"><name pos:end="81:70" pos:start="81:53"><name pos:end="81:60" pos:start="81:53">alphabet</name><operator pos:end="81:61" pos:start="81:61">.</operator><name pos:end="81:70" pos:start="81:62">substring</name></name><argument_list pos:end="81:77" pos:start="81:71">(<argument pos:end="81:76" pos:start="81:72"><expr pos:end="81:76" pos:start="81:72"><name pos:end="81:72" pos:start="81:72">j</name> <operator pos:end="81:74" pos:start="81:74">+</operator> <literal pos:end="81:76" pos:start="81:76" type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt pos:end="85:47" pos:start="85:5"><expr pos:end="85:46" pos:start="85:5"><name pos:end="85:12" pos:start="85:5">alphabet</name> <operator pos:end="85:14" pos:start="85:14">=</operator> <call pos:end="85:46" pos:start="85:16"><name pos:end="85:34" pos:start="85:16"><name pos:end="85:23" pos:start="85:16">alphabet</name><operator pos:end="85:24" pos:start="85:24">.</operator><name pos:end="85:34" pos:start="85:25">replaceAll</name></name><argument_list pos:end="85:46" pos:start="85:35">(<argument pos:end="85:41" pos:start="85:36"><expr pos:end="85:41" pos:start="85:36"><literal pos:end="85:41" pos:start="85:36" type="string">"\\s+"</literal></expr></argument>, <argument pos:end="85:45" pos:start="85:44"><expr pos:end="85:45" pos:start="85:44"><literal pos:end="85:45" pos:start="85:44" type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:end="86:39" pos:start="86:5"><expr pos:end="86:38" pos:start="86:5"><name pos:end="86:8" pos:start="86:5">seps</name> <operator pos:end="86:10" pos:start="86:10">=</operator> <call pos:end="86:38" pos:start="86:12"><name pos:end="86:26" pos:start="86:12"><name pos:end="86:15" pos:start="86:12">seps</name><operator pos:end="86:16" pos:start="86:16">.</operator><name pos:end="86:26" pos:start="86:17">replaceAll</name></name><argument_list pos:end="86:38" pos:start="86:27">(<argument pos:end="86:33" pos:start="86:28"><expr pos:end="86:33" pos:start="86:28"><literal pos:end="86:33" pos:start="86:28" type="string">"\\s+"</literal></expr></argument>, <argument pos:end="86:37" pos:start="86:36"><expr pos:end="86:37" pos:start="86:36"><literal pos:end="86:37" pos:start="86:36" type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:end="87:54" pos:start="87:5"><expr pos:end="87:53" pos:start="87:5"><name pos:end="87:8" pos:start="87:5">seps</name> <operator pos:end="87:10" pos:start="87:10">=</operator> <call pos:end="87:53" pos:start="87:12"><name pos:end="87:36" pos:start="87:12"><name pos:end="87:18" pos:start="87:12">Hashids</name><operator pos:end="87:19" pos:start="87:19">.</operator><name pos:end="87:36" pos:start="87:20">consistentShuffle</name></name><argument_list pos:end="87:53" pos:start="87:37">(<argument pos:end="87:41" pos:start="87:38"><expr pos:end="87:41" pos:start="87:38"><name pos:end="87:41" pos:start="87:38">seps</name></expr></argument>, <argument pos:end="87:52" pos:start="87:44"><expr pos:end="87:52" pos:start="87:44"><name pos:end="87:52" pos:start="87:44"><name pos:end="87:47" pos:start="87:44">this</name><operator pos:end="87:48" pos:start="87:48">.</operator><name pos:end="87:52" pos:start="87:49">salt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt pos:end="103:5" pos:start="89:5"><if pos:end="103:5" pos:start="89:5">if <condition pos:end="89:84" pos:start="89:8">(<expr pos:end="89:83" pos:start="89:9"><operator pos:end="89:9" pos:start="89:9">(</operator><call pos:end="89:23" pos:start="89:10"><name pos:end="89:21" pos:start="89:10"><name pos:end="89:13" pos:start="89:10">seps</name><operator pos:end="89:14" pos:start="89:14">.</operator><name pos:end="89:21" pos:start="89:15">isEmpty</name></name><argument_list pos:end="89:23" pos:start="89:22">()</argument_list></call><operator pos:end="89:24" pos:start="89:24">)</operator> <operator pos:end="89:27" pos:start="89:26">||</operator> <operator pos:end="89:29" pos:start="89:29">(</operator><operator pos:end="89:30" pos:start="89:30">(</operator><operator pos:end="89:31" pos:start="89:31">(</operator><name pos:end="89:36" pos:start="89:32">float</name><operator pos:end="89:37" pos:start="89:37">)</operator> <call pos:end="89:55" pos:start="89:39"><name pos:end="89:53" pos:start="89:39"><name pos:end="89:46" pos:start="89:39">alphabet</name><operator pos:end="89:47" pos:start="89:47">.</operator><name pos:end="89:53" pos:start="89:48">length</name></name><argument_list pos:end="89:55" pos:start="89:54">()</argument_list></call> <operator pos:end="89:57" pos:start="89:57">/</operator> <call pos:end="89:71" pos:start="89:59"><name pos:end="89:69" pos:start="89:59"><name pos:end="89:62" pos:start="89:59">seps</name><operator pos:end="89:63" pos:start="89:63">.</operator><name pos:end="89:69" pos:start="89:64">length</name></name><argument_list pos:end="89:71" pos:start="89:70">()</argument_list></call><operator pos:end="89:72" pos:start="89:72">)</operator> <operator pos:end="89:74" pos:start="89:74">&gt;</operator> <name pos:end="89:82" pos:start="89:76">SEP_DIV</name><operator pos:end="89:83" pos:start="89:83">)</operator></expr>)</condition> <block pos:end="103:5" pos:start="89:86">{<block_content pos:end="102:7" pos:start="90:7">
<decl_stmt pos:end="90:66" pos:start="90:7"><decl pos:end="90:65" pos:start="90:7"><type pos:end="90:9" pos:start="90:7"><name pos:end="90:9" pos:start="90:7">int</name></type> <name pos:end="90:18" pos:start="90:11">seps_len</name> <init pos:end="90:65" pos:start="90:20">= <expr pos:end="90:65" pos:start="90:22"><operator pos:end="90:22" pos:start="90:22">(</operator><name pos:end="90:25" pos:start="90:23">int</name><operator pos:end="90:26" pos:start="90:26">)</operator> <call pos:end="90:65" pos:start="90:28"><name pos:end="90:36" pos:start="90:28"><name pos:end="90:31" pos:start="90:28">Math</name><operator pos:end="90:32" pos:start="90:32">.</operator><name pos:end="90:36" pos:start="90:33">ceil</name></name><argument_list pos:end="90:65" pos:start="90:37">(<argument pos:end="90:64" pos:start="90:38"><expr pos:end="90:64" pos:start="90:38"><call pos:end="90:54" pos:start="90:38"><name pos:end="90:52" pos:start="90:38"><name pos:end="90:45" pos:start="90:38">alphabet</name><operator pos:end="90:46" pos:start="90:46">.</operator><name pos:end="90:52" pos:start="90:47">length</name></name><argument_list pos:end="90:54" pos:start="90:53">()</argument_list></call> <operator pos:end="90:56" pos:start="90:56">/</operator> <name pos:end="90:64" pos:start="90:58">SEP_DIV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt pos:end="94:7" pos:start="92:7"><if pos:end="94:7" pos:start="92:7">if <condition pos:end="92:24" pos:start="92:10">(<expr pos:end="92:23" pos:start="92:11"><name pos:end="92:18" pos:start="92:11">seps_len</name> <operator pos:end="92:21" pos:start="92:20">==</operator> <literal pos:end="92:23" pos:start="92:23" type="number">1</literal></expr>)</condition> <block pos:end="94:7" pos:start="92:26">{<block_content pos:end="93:19" pos:start="93:9">
<expr_stmt pos:end="93:19" pos:start="93:9"><expr pos:end="93:18" pos:start="93:9"><name pos:end="93:16" pos:start="93:9">seps_len</name><operator pos:end="93:18" pos:start="93:17">++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt pos:end="102:7" pos:start="96:7"><if pos:end="100:7" pos:start="96:7">if <condition pos:end="96:35" pos:start="96:10">(<expr pos:end="96:34" pos:start="96:11"><name pos:end="96:18" pos:start="96:11">seps_len</name> <operator pos:end="96:20" pos:start="96:20">&gt;</operator> <call pos:end="96:34" pos:start="96:22"><name pos:end="96:32" pos:start="96:22"><name pos:end="96:25" pos:start="96:22">seps</name><operator pos:end="96:26" pos:start="96:26">.</operator><name pos:end="96:32" pos:start="96:27">length</name></name><argument_list pos:end="96:34" pos:start="96:33">()</argument_list></call></expr>)</condition> <block pos:end="100:7" pos:start="96:37">{<block_content pos:end="99:44" pos:start="97:9">
<decl_stmt pos:end="97:44" pos:start="97:9"><decl pos:end="97:43" pos:start="97:9"><type pos:end="97:11" pos:start="97:9"><name pos:end="97:11" pos:start="97:9">int</name></type> <name pos:end="97:16" pos:start="97:13">diff</name> <init pos:end="97:43" pos:start="97:18">= <expr pos:end="97:43" pos:start="97:20"><name pos:end="97:27" pos:start="97:20">seps_len</name> <operator pos:end="97:29" pos:start="97:29">-</operator> <call pos:end="97:43" pos:start="97:31"><name pos:end="97:41" pos:start="97:31"><name pos:end="97:34" pos:start="97:31">seps</name><operator pos:end="97:35" pos:start="97:35">.</operator><name pos:end="97:41" pos:start="97:36">length</name></name><argument_list pos:end="97:43" pos:start="97:42">()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt pos:end="98:44" pos:start="98:9"><expr pos:end="98:43" pos:start="98:9"><name pos:end="98:12" pos:start="98:9">seps</name> <operator pos:end="98:15" pos:start="98:14">+=</operator> <call pos:end="98:43" pos:start="98:17"><name pos:end="98:34" pos:start="98:17"><name pos:end="98:24" pos:start="98:17">alphabet</name><operator pos:end="98:25" pos:start="98:25">.</operator><name pos:end="98:34" pos:start="98:26">substring</name></name><argument_list pos:end="98:43" pos:start="98:35">(<argument pos:end="98:36" pos:start="98:36"><expr pos:end="98:36" pos:start="98:36"><literal pos:end="98:36" pos:start="98:36" type="number">0</literal></expr></argument>, <argument pos:end="98:42" pos:start="98:39"><expr pos:end="98:42" pos:start="98:39"><name pos:end="98:42" pos:start="98:39">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:end="99:44" pos:start="99:9"><expr pos:end="99:43" pos:start="99:9"><name pos:end="99:16" pos:start="99:9">alphabet</name> <operator pos:end="99:18" pos:start="99:18">=</operator> <call pos:end="99:43" pos:start="99:20"><name pos:end="99:37" pos:start="99:20"><name pos:end="99:27" pos:start="99:20">alphabet</name><operator pos:end="99:28" pos:start="99:28">.</operator><name pos:end="99:37" pos:start="99:29">substring</name></name><argument_list pos:end="99:43" pos:start="99:38">(<argument pos:end="99:42" pos:start="99:39"><expr pos:end="99:42" pos:start="99:39"><name pos:end="99:42" pos:start="99:39">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else pos:end="102:7" pos:start="100:9">else <block pos:end="102:7" pos:start="100:14">{<block_content pos:end="101:43" pos:start="101:9">
<expr_stmt pos:end="101:43" pos:start="101:9"><expr pos:end="101:42" pos:start="101:9"><name pos:end="101:12" pos:start="101:9">seps</name> <operator pos:end="101:14" pos:start="101:14">=</operator> <call pos:end="101:42" pos:start="101:16"><name pos:end="101:29" pos:start="101:16"><name pos:end="101:19" pos:start="101:16">seps</name><operator pos:end="101:20" pos:start="101:20">.</operator><name pos:end="101:29" pos:start="101:21">substring</name></name><argument_list pos:end="101:42" pos:start="101:30">(<argument pos:end="101:31" pos:start="101:31"><expr pos:end="101:31" pos:start="101:31"><literal pos:end="101:31" pos:start="101:31" type="number">0</literal></expr></argument>, <argument pos:end="101:41" pos:start="101:34"><expr pos:end="101:41" pos:start="101:34"><name pos:end="101:41" pos:start="101:34">seps_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt pos:end="105:62" pos:start="105:5"><expr pos:end="105:61" pos:start="105:5"><name pos:end="105:12" pos:start="105:5">alphabet</name> <operator pos:end="105:14" pos:start="105:14">=</operator> <call pos:end="105:61" pos:start="105:16"><name pos:end="105:40" pos:start="105:16"><name pos:end="105:22" pos:start="105:16">Hashids</name><operator pos:end="105:23" pos:start="105:23">.</operator><name pos:end="105:40" pos:start="105:24">consistentShuffle</name></name><argument_list pos:end="105:61" pos:start="105:41">(<argument pos:end="105:49" pos:start="105:42"><expr pos:end="105:49" pos:start="105:42"><name pos:end="105:49" pos:start="105:42">alphabet</name></expr></argument>, <argument pos:end="105:60" pos:start="105:52"><expr pos:end="105:60" pos:start="105:52"><name pos:end="105:60" pos:start="105:52"><name pos:end="105:55" pos:start="105:52">this</name><operator pos:end="105:56" pos:start="105:56">.</operator><name pos:end="105:60" pos:start="105:57">salt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment pos:end="106:29" pos:start="106:5" type="line">// use double to round up</comment>
<decl_stmt pos:end="107:77" pos:start="107:5"><decl pos:end="107:76" pos:start="107:5"><type pos:end="107:7" pos:start="107:5"><name pos:end="107:7" pos:start="107:5">int</name></type> <name pos:end="107:18" pos:start="107:9">guardCount</name> <init pos:end="107:76" pos:start="107:20">= <expr pos:end="107:76" pos:start="107:22"><operator pos:end="107:22" pos:start="107:22">(</operator><name pos:end="107:25" pos:start="107:23">int</name><operator pos:end="107:26" pos:start="107:26">)</operator> <call pos:end="107:76" pos:start="107:28"><name pos:end="107:36" pos:start="107:28"><name pos:end="107:31" pos:start="107:28">Math</name><operator pos:end="107:32" pos:start="107:32">.</operator><name pos:end="107:36" pos:start="107:33">ceil</name></name><argument_list pos:end="107:76" pos:start="107:37">(<argument pos:end="107:75" pos:start="107:38"><expr pos:end="107:75" pos:start="107:38"><operator pos:end="107:38" pos:start="107:38">(</operator><name pos:end="107:44" pos:start="107:39">double</name><operator pos:end="107:45" pos:start="107:45">)</operator> <call pos:end="107:63" pos:start="107:47"><name pos:end="107:61" pos:start="107:47"><name pos:end="107:54" pos:start="107:47">alphabet</name><operator pos:end="107:55" pos:start="107:55">.</operator><name pos:end="107:61" pos:start="107:56">length</name></name><argument_list pos:end="107:63" pos:start="107:62">()</argument_list></call> <operator pos:end="107:65" pos:start="107:65">/</operator> <name pos:end="107:75" pos:start="107:67">GUARD_DIV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt pos:end="109:18" pos:start="109:5"><decl pos:end="109:17" pos:start="109:5"><type pos:end="109:10" pos:start="109:5"><name pos:end="109:10" pos:start="109:5">String</name></type> <name pos:end="109:17" pos:start="109:12">guards</name></decl>;</decl_stmt>
<if_stmt pos:end="116:5" pos:start="110:5"><if pos:end="113:5" pos:start="110:5">if <condition pos:end="110:30" pos:start="110:8">(<expr pos:end="110:29" pos:start="110:9"><call pos:end="110:25" pos:start="110:9"><name pos:end="110:23" pos:start="110:9"><name pos:end="110:16" pos:start="110:9">alphabet</name><operator pos:end="110:17" pos:start="110:17">.</operator><name pos:end="110:23" pos:start="110:18">length</name></name><argument_list pos:end="110:25" pos:start="110:24">()</argument_list></call> <operator pos:end="110:27" pos:start="110:27">&lt;</operator> <literal pos:end="110:29" pos:start="110:29" type="number">3</literal></expr>)</condition> <block pos:end="113:5" pos:start="110:32">{<block_content pos:end="112:40" pos:start="111:7">
<expr_stmt pos:end="111:45" pos:start="111:7"><expr pos:end="111:44" pos:start="111:7"><name pos:end="111:12" pos:start="111:7">guards</name> <operator pos:end="111:14" pos:start="111:14">=</operator> <call pos:end="111:44" pos:start="111:16"><name pos:end="111:29" pos:start="111:16"><name pos:end="111:19" pos:start="111:16">seps</name><operator pos:end="111:20" pos:start="111:20">.</operator><name pos:end="111:29" pos:start="111:21">substring</name></name><argument_list pos:end="111:44" pos:start="111:30">(<argument pos:end="111:31" pos:start="111:31"><expr pos:end="111:31" pos:start="111:31"><literal pos:end="111:31" pos:start="111:31" type="number">0</literal></expr></argument>, <argument pos:end="111:43" pos:start="111:34"><expr pos:end="111:43" pos:start="111:34"><name pos:end="111:43" pos:start="111:34">guardCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:end="112:40" pos:start="112:7"><expr pos:end="112:39" pos:start="112:7"><name pos:end="112:10" pos:start="112:7">seps</name> <operator pos:end="112:12" pos:start="112:12">=</operator> <call pos:end="112:39" pos:start="112:14"><name pos:end="112:27" pos:start="112:14"><name pos:end="112:17" pos:start="112:14">seps</name><operator pos:end="112:18" pos:start="112:18">.</operator><name pos:end="112:27" pos:start="112:19">substring</name></name><argument_list pos:end="112:39" pos:start="112:28">(<argument pos:end="112:38" pos:start="112:29"><expr pos:end="112:38" pos:start="112:29"><name pos:end="112:38" pos:start="112:29">guardCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else pos:end="116:5" pos:start="113:7">else <block pos:end="116:5" pos:start="113:12">{<block_content pos:end="115:48" pos:start="114:7">
<expr_stmt pos:end="114:49" pos:start="114:7"><expr pos:end="114:48" pos:start="114:7"><name pos:end="114:12" pos:start="114:7">guards</name> <operator pos:end="114:14" pos:start="114:14">=</operator> <call pos:end="114:48" pos:start="114:16"><name pos:end="114:33" pos:start="114:16"><name pos:end="114:23" pos:start="114:16">alphabet</name><operator pos:end="114:24" pos:start="114:24">.</operator><name pos:end="114:33" pos:start="114:25">substring</name></name><argument_list pos:end="114:48" pos:start="114:34">(<argument pos:end="114:35" pos:start="114:35"><expr pos:end="114:35" pos:start="114:35"><literal pos:end="114:35" pos:start="114:35" type="number">0</literal></expr></argument>, <argument pos:end="114:47" pos:start="114:38"><expr pos:end="114:47" pos:start="114:38"><name pos:end="114:47" pos:start="114:38">guardCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:end="115:48" pos:start="115:7"><expr pos:end="115:47" pos:start="115:7"><name pos:end="115:14" pos:start="115:7">alphabet</name> <operator pos:end="115:16" pos:start="115:16">=</operator> <call pos:end="115:47" pos:start="115:18"><name pos:end="115:35" pos:start="115:18"><name pos:end="115:25" pos:start="115:18">alphabet</name><operator pos:end="115:26" pos:start="115:26">.</operator><name pos:end="115:35" pos:start="115:27">substring</name></name><argument_list pos:end="115:47" pos:start="115:36">(<argument pos:end="115:46" pos:start="115:37"><expr pos:end="115:46" pos:start="115:37"><name pos:end="115:46" pos:start="115:37">guardCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt pos:end="117:25" pos:start="117:5"><expr pos:end="117:24" pos:start="117:5"><name pos:end="117:15" pos:start="117:5"><name pos:end="117:8" pos:start="117:5">this</name><operator pos:end="117:9" pos:start="117:9">.</operator><name pos:end="117:15" pos:start="117:10">guards</name></name> <operator pos:end="117:17" pos:start="117:17">=</operator> <name pos:end="117:24" pos:start="117:19">guards</name></expr>;</expr_stmt>
<expr_stmt pos:end="118:29" pos:start="118:5"><expr pos:end="118:28" pos:start="118:5"><name pos:end="118:17" pos:start="118:5"><name pos:end="118:8" pos:start="118:5">this</name><operator pos:end="118:9" pos:start="118:9">.</operator><name pos:end="118:17" pos:start="118:10">alphabet</name></name> <operator pos:end="118:19" pos:start="118:19">=</operator> <name pos:end="118:28" pos:start="118:21">alphabet</name></expr>;</expr_stmt>
<expr_stmt pos:end="119:21" pos:start="119:5"><expr pos:end="119:20" pos:start="119:5"><name pos:end="119:13" pos:start="119:5"><name pos:end="119:8" pos:start="119:5">this</name><operator pos:end="119:9" pos:start="119:9">.</operator><name pos:end="119:13" pos:start="119:10">seps</name></name> <operator pos:end="119:15" pos:start="119:15">=</operator> <name pos:end="119:20" pos:start="119:17">seps</name></expr>;</expr_stmt>
</block_content>}</block></constructor>