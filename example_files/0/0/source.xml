<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="/home/matteoc/github_manager/cloning_folder/hashids-java/src/main/java/org/hashids/Hashids.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:20">package <name pos:start="1:9" pos:end="1:19"><name pos:start="1:9" pos:end="1:11">org</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:19">hashids</name></name>;</package>

<import pos:start="3:1" pos:end="3:19">import <name pos:start="3:8" pos:end="3:18"><name pos:start="3:8" pos:end="3:11">java</name><operator pos:start="3:12" pos:end="3:12">.</operator><name pos:start="3:13" pos:end="3:16">util</name><operator pos:start="3:17" pos:end="3:17">.</operator><name pos:start="3:18" pos:end="3:18">*</name></name>;</import>
<import pos:start="4:1" pos:end="4:31">import <name pos:start="4:8" pos:end="4:30"><name pos:start="4:8" pos:end="4:11">java</name><operator pos:start="4:12" pos:end="4:12">.</operator><name pos:start="4:13" pos:end="4:16">util</name><operator pos:start="4:17" pos:end="4:17">.</operator><name pos:start="4:18" pos:end="4:22">regex</name><operator pos:start="4:23" pos:end="4:23">.</operator><name pos:start="4:24" pos:end="4:30">Matcher</name></name>;</import>
<import pos:start="5:1" pos:end="5:31">import <name pos:start="5:8" pos:end="5:30"><name pos:start="5:8" pos:end="5:11">java</name><operator pos:start="5:12" pos:end="5:12">.</operator><name pos:start="5:13" pos:end="5:16">util</name><operator pos:start="5:17" pos:end="5:17">.</operator><name pos:start="5:18" pos:end="5:22">regex</name><operator pos:start="5:23" pos:end="5:23">.</operator><name pos:start="5:24" pos:end="5:30">Pattern</name></name>;</import>

<comment type="block" format="javadoc" pos:start="7:1" pos:end="17:3">/**
 * Hashids designed for Generating short hashes from numbers (like YouTube and Bitly), obfuscate
 * database IDs, use them as forgotten password hashes, invitation codes, store shard numbers.
 * This is implementation of http://hashids.org v1.0.0 version.
 * 
 * This implementation is immutable, thread-safe, no lock is necessary.
 *
 * @author &lt;a href="mailto:fanweixiao@gmail.com"&gt;fanweixiao&lt;/a&gt;
 * @author &lt;a href="mailto:terciofilho@gmail.com"&gt;Tercio Gaudencio Filho&lt;/a&gt;
 * @since 0.3.3
 */</comment>
<class pos:start="18:1" pos:end="410:1"><specifier pos:start="18:1" pos:end="18:6">public</specifier> class <name pos:start="18:14" pos:end="18:20">Hashids</name> <block pos:start="18:22" pos:end="410:1">{
  <comment type="block" format="javadoc" pos:start="19:3" pos:end="21:5">/**
   * Max number that can be encoded with Hashids.
   */</comment>
  <decl_stmt pos:start="22:3" pos:end="22:58"><decl pos:start="22:3" pos:end="22:57"><type pos:start="22:3" pos:end="22:26"><specifier pos:start="22:3" pos:end="22:8">public</specifier> <specifier pos:start="22:10" pos:end="22:15">static</specifier> <specifier pos:start="22:17" pos:end="22:21">final</specifier> <name pos:start="22:23" pos:end="22:26">long</name></type> <name pos:start="22:28" pos:end="22:37">MAX_NUMBER</name> <init pos:start="22:39" pos:end="22:57">= <expr pos:start="22:41" pos:end="22:57"><literal type="number" pos:start="22:41" pos:end="22:57">9007199254740992L</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt pos:start="24:3" pos:end="24:114"><decl pos:start="24:3" pos:end="24:113"><type pos:start="24:3" pos:end="24:29"><specifier pos:start="24:3" pos:end="24:9">private</specifier> <specifier pos:start="24:11" pos:end="24:16">static</specifier> <specifier pos:start="24:18" pos:end="24:22">final</specifier> <name pos:start="24:24" pos:end="24:29">String</name></type> <name pos:start="24:31" pos:end="24:46">DEFAULT_ALPHABET</name> <init pos:start="24:48" pos:end="24:113">= <expr pos:start="24:50" pos:end="24:113"><literal type="string" pos:start="24:50" pos:end="24:113">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="25:3" pos:end="25:62"><decl pos:start="25:3" pos:end="25:61"><type pos:start="25:3" pos:end="25:29"><specifier pos:start="25:3" pos:end="25:9">private</specifier> <specifier pos:start="25:11" pos:end="25:16">static</specifier> <specifier pos:start="25:18" pos:end="25:22">final</specifier> <name pos:start="25:24" pos:end="25:29">String</name></type> <name pos:start="25:31" pos:end="25:42">DEFAULT_SEPS</name> <init pos:start="25:44" pos:end="25:61">= <expr pos:start="25:46" pos:end="25:61"><literal type="string" pos:start="25:46" pos:end="25:61">"cfhistuCFHISTU"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="26:3" pos:end="26:48"><decl pos:start="26:3" pos:end="26:47"><type pos:start="26:3" pos:end="26:29"><specifier pos:start="26:3" pos:end="26:9">private</specifier> <specifier pos:start="26:11" pos:end="26:16">static</specifier> <specifier pos:start="26:18" pos:end="26:22">final</specifier> <name pos:start="26:24" pos:end="26:29">String</name></type> <name pos:start="26:31" pos:end="26:42">DEFAULT_SALT</name> <init pos:start="26:44" pos:end="26:47">= <expr pos:start="26:46" pos:end="26:47"><literal type="string" pos:start="26:46" pos:end="26:47">""</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt pos:start="28:3" pos:end="28:55"><decl pos:start="28:3" pos:end="28:54"><type pos:start="28:3" pos:end="28:26"><specifier pos:start="28:3" pos:end="28:9">private</specifier> <specifier pos:start="28:11" pos:end="28:16">static</specifier> <specifier pos:start="28:18" pos:end="28:22">final</specifier> <name pos:start="28:24" pos:end="28:26">int</name></type> <name pos:start="28:28" pos:end="28:50">DEFAULT_MIN_HASH_LENGTH</name> <init pos:start="28:52" pos:end="28:54">= <expr pos:start="28:54" pos:end="28:54"><literal type="number" pos:start="28:54" pos:end="28:54">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="29:3" pos:end="29:52"><decl pos:start="29:3" pos:end="29:51"><type pos:start="29:3" pos:end="29:26"><specifier pos:start="29:3" pos:end="29:9">private</specifier> <specifier pos:start="29:11" pos:end="29:16">static</specifier> <specifier pos:start="29:18" pos:end="29:22">final</specifier> <name pos:start="29:24" pos:end="29:26">int</name></type> <name pos:start="29:28" pos:end="29:46">MIN_ALPHABET_LENGTH</name> <init pos:start="29:48" pos:end="29:51">= <expr pos:start="29:50" pos:end="29:51"><literal type="number" pos:start="29:50" pos:end="29:51">16</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="30:3" pos:end="30:44"><decl pos:start="30:3" pos:end="30:43"><type pos:start="30:3" pos:end="30:29"><specifier pos:start="30:3" pos:end="30:9">private</specifier> <specifier pos:start="30:11" pos:end="30:16">static</specifier> <specifier pos:start="30:18" pos:end="30:22">final</specifier> <name pos:start="30:24" pos:end="30:29">double</name></type> <name pos:start="30:31" pos:end="30:37">SEP_DIV</name> <init pos:start="30:39" pos:end="30:43">= <expr pos:start="30:41" pos:end="30:43"><literal type="number" pos:start="30:41" pos:end="30:43">3.5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="31:3" pos:end="31:42"><decl pos:start="31:3" pos:end="31:41"><type pos:start="31:3" pos:end="31:26"><specifier pos:start="31:3" pos:end="31:9">private</specifier> <specifier pos:start="31:11" pos:end="31:16">static</specifier> <specifier pos:start="31:18" pos:end="31:22">final</specifier> <name pos:start="31:24" pos:end="31:26">int</name></type> <name pos:start="31:28" pos:end="31:36">GUARD_DIV</name> <init pos:start="31:38" pos:end="31:41">= <expr pos:start="31:40" pos:end="31:41"><literal type="number" pos:start="31:40" pos:end="31:41">12</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="33:3" pos:end="33:28"><decl pos:start="33:3" pos:end="33:27"><type pos:start="33:3" pos:end="33:22"><specifier pos:start="33:3" pos:end="33:9">private</specifier> <specifier pos:start="33:11" pos:end="33:15">final</specifier> <name pos:start="33:17" pos:end="33:22">String</name></type> <name pos:start="33:24" pos:end="33:27">salt</name></decl>;</decl_stmt>
  <decl_stmt pos:start="34:3" pos:end="34:34"><decl pos:start="34:3" pos:end="34:33"><type pos:start="34:3" pos:end="34:19"><specifier pos:start="34:3" pos:end="34:9">private</specifier> <specifier pos:start="34:11" pos:end="34:15">final</specifier> <name pos:start="34:17" pos:end="34:19">int</name></type> <name pos:start="34:21" pos:end="34:33">minHashLength</name></decl>;</decl_stmt>
  <decl_stmt pos:start="35:3" pos:end="35:32"><decl pos:start="35:3" pos:end="35:31"><type pos:start="35:3" pos:end="35:22"><specifier pos:start="35:3" pos:end="35:9">private</specifier> <specifier pos:start="35:11" pos:end="35:15">final</specifier> <name pos:start="35:17" pos:end="35:22">String</name></type> <name pos:start="35:24" pos:end="35:31">alphabet</name></decl>;</decl_stmt>
  <decl_stmt pos:start="36:3" pos:end="36:28"><decl pos:start="36:3" pos:end="36:27"><type pos:start="36:3" pos:end="36:22"><specifier pos:start="36:3" pos:end="36:9">private</specifier> <specifier pos:start="36:11" pos:end="36:15">final</specifier> <name pos:start="36:17" pos:end="36:22">String</name></type> <name pos:start="36:24" pos:end="36:27">seps</name></decl>;</decl_stmt>
  <decl_stmt pos:start="37:3" pos:end="37:30"><decl pos:start="37:3" pos:end="37:29"><type pos:start="37:3" pos:end="37:22"><specifier pos:start="37:3" pos:end="37:9">private</specifier> <specifier pos:start="37:11" pos:end="37:15">final</specifier> <name pos:start="37:17" pos:end="37:22">String</name></type> <name pos:start="37:24" pos:end="37:29">guards</name></decl>;</decl_stmt>

  <constructor pos:start="39:3" pos:end="41:3"><specifier pos:start="39:3" pos:end="39:8">public</specifier> <name pos:start="39:10" pos:end="39:16">Hashids</name><parameter_list pos:start="39:17" pos:end="39:18">()</parameter_list> <block pos:start="39:20" pos:end="41:3">{<block_content pos:start="40:5" pos:end="40:23">
    <expr_stmt pos:start="40:5" pos:end="40:23"><expr pos:start="40:5" pos:end="40:22"><call pos:start="40:5" pos:end="40:22"><name pos:start="40:5" pos:end="40:8">this</name><argument_list pos:start="40:9" pos:end="40:22">(<argument pos:start="40:10" pos:end="40:21"><expr pos:start="40:10" pos:end="40:21"><name pos:start="40:10" pos:end="40:21">DEFAULT_SALT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor pos:start="43:3" pos:end="45:3"><specifier pos:start="43:3" pos:end="43:8">public</specifier> <name pos:start="43:10" pos:end="43:16">Hashids</name><parameter_list pos:start="43:17" pos:end="43:29">(<parameter pos:start="43:18" pos:end="43:28"><decl pos:start="43:18" pos:end="43:28"><type pos:start="43:18" pos:end="43:23"><name pos:start="43:18" pos:end="43:23">String</name></type> <name pos:start="43:25" pos:end="43:28">salt</name></decl></parameter>)</parameter_list> <block pos:start="43:31" pos:end="45:3">{<block_content pos:start="44:5" pos:end="44:18">
    <expr_stmt pos:start="44:5" pos:end="44:18"><expr pos:start="44:5" pos:end="44:17"><call pos:start="44:5" pos:end="44:17"><name pos:start="44:5" pos:end="44:8">this</name><argument_list pos:start="44:9" pos:end="44:17">(<argument pos:start="44:10" pos:end="44:13"><expr pos:start="44:10" pos:end="44:13"><name pos:start="44:10" pos:end="44:13">salt</name></expr></argument>, <argument pos:start="44:16" pos:end="44:16"><expr pos:start="44:16" pos:end="44:16"><literal type="number" pos:start="44:16" pos:end="44:16">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor pos:start="47:3" pos:end="49:3"><specifier pos:start="47:3" pos:end="47:8">public</specifier> <name pos:start="47:10" pos:end="47:16">Hashids</name><parameter_list pos:start="47:17" pos:end="47:48">(<parameter pos:start="47:18" pos:end="47:28"><decl pos:start="47:18" pos:end="47:28"><type pos:start="47:18" pos:end="47:28"><name pos:start="47:18" pos:end="47:23">String</name></type> <name pos:start="47:25" pos:end="47:28">salt</name></decl></parameter>, <parameter pos:start="47:31" pos:end="47:47"><decl pos:start="47:31" pos:end="47:47"><type pos:start="47:31" pos:end="47:47"><name pos:start="47:31" pos:end="47:33">int</name></type> <name pos:start="47:35" pos:end="47:47">minHashLength</name></decl></parameter>)</parameter_list> <block pos:start="47:50" pos:end="49:3">{<block_content pos:start="48:5" pos:end="48:48">
    <expr_stmt pos:start="48:5" pos:end="48:48"><expr pos:start="48:5" pos:end="48:47"><call pos:start="48:5" pos:end="48:47"><name pos:start="48:5" pos:end="48:8">this</name><argument_list pos:start="48:9" pos:end="48:47">(<argument pos:start="48:10" pos:end="48:13"><expr pos:start="48:10" pos:end="48:13"><name pos:start="48:10" pos:end="48:13">salt</name></expr></argument>, <argument pos:start="48:16" pos:end="48:28"><expr pos:start="48:16" pos:end="48:28"><name pos:start="48:16" pos:end="48:28">minHashLength</name></expr></argument>, <argument pos:start="48:31" pos:end="48:46"><expr pos:start="48:31" pos:end="48:46"><name pos:start="48:31" pos:end="48:46">DEFAULT_ALPHABET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor pos:start="51:3" pos:end="120:3"><specifier pos:start="51:3" pos:end="51:8">public</specifier> <name pos:start="51:10" pos:end="51:16">Hashids</name><parameter_list pos:start="51:17" pos:end="51:65">(<parameter pos:start="51:18" pos:end="51:28"><decl pos:start="51:18" pos:end="51:28"><type pos:start="51:18" pos:end="51:28"><name pos:start="51:18" pos:end="51:23">String</name></type> <name pos:start="51:25" pos:end="51:28">salt</name></decl></parameter>, <parameter pos:start="51:31" pos:end="51:47"><decl pos:start="51:31" pos:end="51:47"><type pos:start="51:31" pos:end="51:47"><name pos:start="51:31" pos:end="51:33">int</name></type> <name pos:start="51:35" pos:end="51:47">minHashLength</name></decl></parameter>, <parameter pos:start="51:50" pos:end="51:64"><decl pos:start="51:50" pos:end="51:64"><type pos:start="51:50" pos:end="51:64"><name pos:start="51:50" pos:end="51:55">String</name></type> <name pos:start="51:57" pos:end="51:64">alphabet</name></decl></parameter>)</parameter_list> <block pos:start="51:67" pos:end="120:3">{<block_content pos:start="52:5" pos:end="119:21">
    <expr_stmt pos:start="52:5" pos:end="52:51"><expr pos:start="52:5" pos:end="52:50"><name pos:start="52:5" pos:end="52:13"><name pos:start="52:5" pos:end="52:8">this</name><operator pos:start="52:9" pos:end="52:9">.</operator><name pos:start="52:10" pos:end="52:13">salt</name></name> <operator pos:start="52:15" pos:end="52:15">=</operator> <ternary pos:start="52:17" pos:end="52:50"><condition pos:start="52:17" pos:end="52:30"><expr pos:start="52:17" pos:end="52:28"><name pos:start="52:17" pos:end="52:20">salt</name> <operator pos:start="52:22" pos:end="52:23">!=</operator> <literal type="null" pos:start="52:25" pos:end="52:28">null</literal></expr> ?</condition><then pos:start="52:32" pos:end="52:35"> <expr pos:start="52:32" pos:end="52:35"><name pos:start="52:32" pos:end="52:35">salt</name></expr> </then><else pos:start="52:37" pos:end="52:50">: <expr pos:start="52:39" pos:end="52:50"><name pos:start="52:39" pos:end="52:50">DEFAULT_SALT</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt pos:start="53:5" pos:end="53:85"><expr pos:start="53:5" pos:end="53:84"><name pos:start="53:5" pos:end="53:22"><name pos:start="53:5" pos:end="53:8">this</name><operator pos:start="53:9" pos:end="53:9">.</operator><name pos:start="53:10" pos:end="53:22">minHashLength</name></name> <operator pos:start="53:24" pos:end="53:24">=</operator> <ternary pos:start="53:26" pos:end="53:84"><condition pos:start="53:26" pos:end="53:44"><expr pos:start="53:26" pos:end="53:42"><name pos:start="53:26" pos:end="53:38">minHashLength</name> <operator pos:start="53:40" pos:end="53:40">&gt;</operator> <literal type="number" pos:start="53:42" pos:end="53:42">0</literal></expr> ?</condition><then pos:start="53:46" pos:end="53:58"> <expr pos:start="53:46" pos:end="53:58"><name pos:start="53:46" pos:end="53:58">minHashLength</name></expr> </then><else pos:start="53:60" pos:end="53:84">: <expr pos:start="53:62" pos:end="53:84"><name pos:start="53:62" pos:end="53:84">DEFAULT_MIN_HASH_LENGTH</name></expr></else></ternary></expr>;</expr_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:55"><decl pos:start="55:5" pos:end="55:54"><type pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:17">StringBuilder</name></type> <name pos:start="55:19" pos:end="55:32">uniqueAlphabet</name> <init pos:start="55:34" pos:end="55:54">= <expr pos:start="55:36" pos:end="55:54"><operator pos:start="55:36" pos:end="55:38">new</operator> <call pos:start="55:40" pos:end="55:54"><name pos:start="55:40" pos:end="55:52">StringBuilder</name><argument_list pos:start="55:53" pos:end="55:54">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for pos:start="56:5" pos:end="60:5">for <control pos:start="56:9" pos:end="56:47">(<init pos:start="56:10" pos:end="56:19"><decl pos:start="56:10" pos:end="56:18"><type pos:start="56:10" pos:end="56:12"><name pos:start="56:10" pos:end="56:12">int</name></type> <name pos:start="56:14" pos:end="56:14">i</name> <init pos:start="56:16" pos:end="56:18">= <expr pos:start="56:18" pos:end="56:18"><literal type="number" pos:start="56:18" pos:end="56:18">0</literal></expr></init></decl>;</init> <condition pos:start="56:21" pos:end="56:42"><expr pos:start="56:21" pos:end="56:41"><name pos:start="56:21" pos:end="56:21">i</name> <operator pos:start="56:23" pos:end="56:23">&lt;</operator> <call pos:start="56:25" pos:end="56:41"><name pos:start="56:25" pos:end="56:39"><name pos:start="56:25" pos:end="56:32">alphabet</name><operator pos:start="56:33" pos:end="56:33">.</operator><name pos:start="56:34" pos:end="56:39">length</name></name><argument_list pos:start="56:40" pos:end="56:41">()</argument_list></call></expr>;</condition> <incr pos:start="56:44" pos:end="56:46"><expr pos:start="56:44" pos:end="56:46"><name pos:start="56:44" pos:end="56:44">i</name><operator pos:start="56:45" pos:end="56:46">++</operator></expr></incr>)</control> <block pos:start="56:49" pos:end="60:5">{<block_content pos:start="57:7" pos:end="59:7">
      <if_stmt pos:start="57:7" pos:end="59:7"><if pos:start="57:7" pos:end="59:7">if <condition pos:start="57:10" pos:end="57:75">(<expr pos:start="57:11" pos:end="57:74"><call pos:start="57:11" pos:end="57:68"><name pos:start="57:11" pos:end="57:32"><name pos:start="57:11" pos:end="57:24">uniqueAlphabet</name><operator pos:start="57:25" pos:end="57:25">.</operator><name pos:start="57:26" pos:end="57:32">indexOf</name></name><argument_list pos:start="57:33" pos:end="57:68">(<argument pos:start="57:34" pos:end="57:67"><expr pos:start="57:34" pos:end="57:67"><call pos:start="57:34" pos:end="57:67"><name pos:start="57:34" pos:end="57:47"><name pos:start="57:34" pos:end="57:39">String</name><operator pos:start="57:40" pos:end="57:40">.</operator><name pos:start="57:41" pos:end="57:47">valueOf</name></name><argument_list pos:start="57:48" pos:end="57:67">(<argument pos:start="57:49" pos:end="57:66"><expr pos:start="57:49" pos:end="57:66"><call pos:start="57:49" pos:end="57:66"><name pos:start="57:49" pos:end="57:63"><name pos:start="57:49" pos:end="57:56">alphabet</name><operator pos:start="57:57" pos:end="57:57">.</operator><name pos:start="57:58" pos:end="57:63">charAt</name></name><argument_list pos:start="57:64" pos:end="57:66">(<argument pos:start="57:65" pos:end="57:65"><expr pos:start="57:65" pos:end="57:65"><name pos:start="57:65" pos:end="57:65">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="57:70" pos:end="57:71">==</operator> <operator pos:start="57:73" pos:end="57:73">-</operator><literal type="number" pos:start="57:74" pos:end="57:74">1</literal></expr>)</condition> <block pos:start="57:77" pos:end="59:7">{<block_content pos:start="58:9" pos:end="58:50">
        <expr_stmt pos:start="58:9" pos:end="58:50"><expr pos:start="58:9" pos:end="58:49"><call pos:start="58:9" pos:end="58:49"><name pos:start="58:9" pos:end="58:29"><name pos:start="58:9" pos:end="58:22">uniqueAlphabet</name><operator pos:start="58:23" pos:end="58:23">.</operator><name pos:start="58:24" pos:end="58:29">append</name></name><argument_list pos:start="58:30" pos:end="58:49">(<argument pos:start="58:31" pos:end="58:48"><expr pos:start="58:31" pos:end="58:48"><call pos:start="58:31" pos:end="58:48"><name pos:start="58:31" pos:end="58:45"><name pos:start="58:31" pos:end="58:38">alphabet</name><operator pos:start="58:39" pos:end="58:39">.</operator><name pos:start="58:40" pos:end="58:45">charAt</name></name><argument_list pos:start="58:46" pos:end="58:48">(<argument pos:start="58:47" pos:end="58:47"><expr pos:start="58:47" pos:end="58:47"><name pos:start="58:47" pos:end="58:47">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt pos:start="62:5" pos:end="62:41"><expr pos:start="62:5" pos:end="62:40"><name pos:start="62:5" pos:end="62:12">alphabet</name> <operator pos:start="62:14" pos:end="62:14">=</operator> <call pos:start="62:16" pos:end="62:40"><name pos:start="62:16" pos:end="62:38"><name pos:start="62:16" pos:end="62:29">uniqueAlphabet</name><operator pos:start="62:30" pos:end="62:30">.</operator><name pos:start="62:31" pos:end="62:38">toString</name></name><argument_list pos:start="62:39" pos:end="62:40">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="64:5" pos:end="67:5"><if pos:start="64:5" pos:end="67:5">if <condition pos:start="64:8" pos:end="64:48">(<expr pos:start="64:9" pos:end="64:47"><call pos:start="64:9" pos:end="64:25"><name pos:start="64:9" pos:end="64:23"><name pos:start="64:9" pos:end="64:16">alphabet</name><operator pos:start="64:17" pos:end="64:17">.</operator><name pos:start="64:18" pos:end="64:23">length</name></name><argument_list pos:start="64:24" pos:end="64:25">()</argument_list></call> <operator pos:start="64:27" pos:end="64:27">&lt;</operator> <name pos:start="64:29" pos:end="64:47">MIN_ALPHABET_LENGTH</name></expr>)</condition> <block pos:start="64:50" pos:end="67:5">{<block_content pos:start="65:7" pos:end="66:90">
      <throw pos:start="65:7" pos:end="66:90">throw <expr pos:start="65:13" pos:end="66:89"><operator pos:start="65:13" pos:end="65:15">new</operator> <call pos:start="65:17" pos:end="66:89"><name pos:start="65:17" pos:end="65:40">IllegalArgumentException</name><argument_list pos:start="65:41" pos:end="66:89">(
          <argument pos:start="66:11" pos:end="66:88"><expr pos:start="66:11" pos:end="66:88"><literal type="string" pos:start="66:11" pos:end="66:43">"alphabet must contain at least "</literal> <operator pos:start="66:45" pos:end="66:45">+</operator> <name pos:start="66:47" pos:end="66:65">MIN_ALPHABET_LENGTH</name> <operator pos:start="66:67" pos:end="66:67">+</operator> <literal type="string" pos:start="66:69" pos:end="66:88">" unique characters"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="71:5"><if pos:start="69:5" pos:end="71:5">if <condition pos:start="69:8" pos:end="69:31">(<expr pos:start="69:9" pos:end="69:30"><call pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:16">alphabet</name><operator pos:start="69:17" pos:end="69:17">.</operator><name pos:start="69:18" pos:end="69:25">contains</name></name><argument_list pos:start="69:26" pos:end="69:30">(<argument pos:start="69:27" pos:end="69:29"><expr pos:start="69:27" pos:end="69:29"><literal type="string" pos:start="69:27" pos:end="69:29">" "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:33" pos:end="71:5">{<block_content pos:start="70:7" pos:end="70:76">
      <throw pos:start="70:7" pos:end="70:76">throw <expr pos:start="70:13" pos:end="70:75"><operator pos:start="70:13" pos:end="70:15">new</operator> <call pos:start="70:17" pos:end="70:75"><name pos:start="70:17" pos:end="70:40">IllegalArgumentException</name><argument_list pos:start="70:41" pos:end="70:75">(<argument pos:start="70:42" pos:end="70:74"><expr pos:start="70:42" pos:end="70:74"><literal type="string" pos:start="70:42" pos:end="70:74">"alphabet cannot contains spaces"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="73:5" pos:end="73:63">// seps should contain only characters present in alphabet;</comment>
    <comment type="line" pos:start="74:5" pos:end="74:40">// alphabet should not contains seps</comment>
    <decl_stmt pos:start="75:5" pos:end="75:31"><decl pos:start="75:5" pos:end="75:30"><type pos:start="75:5" pos:end="75:10"><name pos:start="75:5" pos:end="75:10">String</name></type> <name pos:start="75:12" pos:end="75:15">seps</name> <init pos:start="75:17" pos:end="75:30">= <expr pos:start="75:19" pos:end="75:30"><name pos:start="75:19" pos:end="75:30">DEFAULT_SEPS</name></expr></init></decl>;</decl_stmt>
    <for pos:start="76:5" pos:end="83:5">for <control pos:start="76:9" pos:end="76:43">(<init pos:start="76:10" pos:end="76:19"><decl pos:start="76:10" pos:end="76:18"><type pos:start="76:10" pos:end="76:12"><name pos:start="76:10" pos:end="76:12">int</name></type> <name pos:start="76:14" pos:end="76:14">i</name> <init pos:start="76:16" pos:end="76:18">= <expr pos:start="76:18" pos:end="76:18"><literal type="number" pos:start="76:18" pos:end="76:18">0</literal></expr></init></decl>;</init> <condition pos:start="76:21" pos:end="76:38"><expr pos:start="76:21" pos:end="76:37"><name pos:start="76:21" pos:end="76:21">i</name> <operator pos:start="76:23" pos:end="76:23">&lt;</operator> <call pos:start="76:25" pos:end="76:37"><name pos:start="76:25" pos:end="76:35"><name pos:start="76:25" pos:end="76:28">seps</name><operator pos:start="76:29" pos:end="76:29">.</operator><name pos:start="76:30" pos:end="76:35">length</name></name><argument_list pos:start="76:36" pos:end="76:37">()</argument_list></call></expr>;</condition> <incr pos:start="76:40" pos:end="76:42"><expr pos:start="76:40" pos:end="76:42"><name pos:start="76:40" pos:end="76:40">i</name><operator pos:start="76:41" pos:end="76:42">++</operator></expr></incr>)</control> <block pos:start="76:45" pos:end="83:5">{<block_content pos:start="77:7" pos:end="82:7">
      <decl_stmt pos:start="77:7" pos:end="77:47"><decl pos:start="77:7" pos:end="77:46"><type pos:start="77:7" pos:end="77:9"><name pos:start="77:7" pos:end="77:9">int</name></type> <name pos:start="77:11" pos:end="77:11">j</name> <init pos:start="77:13" pos:end="77:46">= <expr pos:start="77:15" pos:end="77:46"><call pos:start="77:15" pos:end="77:46"><name pos:start="77:15" pos:end="77:30"><name pos:start="77:15" pos:end="77:22">alphabet</name><operator pos:start="77:23" pos:end="77:23">.</operator><name pos:start="77:24" pos:end="77:30">indexOf</name></name><argument_list pos:start="77:31" pos:end="77:46">(<argument pos:start="77:32" pos:end="77:45"><expr pos:start="77:32" pos:end="77:45"><call pos:start="77:32" pos:end="77:45"><name pos:start="77:32" pos:end="77:42"><name pos:start="77:32" pos:end="77:35">seps</name><operator pos:start="77:36" pos:end="77:36">.</operator><name pos:start="77:37" pos:end="77:42">charAt</name></name><argument_list pos:start="77:43" pos:end="77:45">(<argument pos:start="77:44" pos:end="77:44"><expr pos:start="77:44" pos:end="77:44"><name pos:start="77:44" pos:end="77:44">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="78:7" pos:end="82:7"><if pos:start="78:7" pos:end="80:7">if <condition pos:start="78:10" pos:end="78:18">(<expr pos:start="78:11" pos:end="78:17"><name pos:start="78:11" pos:end="78:11">j</name> <operator pos:start="78:13" pos:end="78:14">==</operator> <operator pos:start="78:16" pos:end="78:16">-</operator><literal type="number" pos:start="78:17" pos:end="78:17">1</literal></expr>)</condition> <block pos:start="78:20" pos:end="80:7">{<block_content pos:start="79:9" pos:end="79:66">
        <expr_stmt pos:start="79:9" pos:end="79:66"><expr pos:start="79:9" pos:end="79:65"><name pos:start="79:9" pos:end="79:12">seps</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <call pos:start="79:16" pos:end="79:35"><name pos:start="79:16" pos:end="79:29"><name pos:start="79:16" pos:end="79:19">seps</name><operator pos:start="79:20" pos:end="79:20">.</operator><name pos:start="79:21" pos:end="79:29">substring</name></name><argument_list pos:start="79:30" pos:end="79:35">(<argument pos:start="79:31" pos:end="79:31"><expr pos:start="79:31" pos:end="79:31"><literal type="number" pos:start="79:31" pos:end="79:31">0</literal></expr></argument>, <argument pos:start="79:34" pos:end="79:34"><expr pos:start="79:34" pos:end="79:34"><name pos:start="79:34" pos:end="79:34">i</name></expr></argument>)</argument_list></call> <operator pos:start="79:37" pos:end="79:37">+</operator> <literal type="string" pos:start="79:39" pos:end="79:41">" "</literal> <operator pos:start="79:43" pos:end="79:43">+</operator> <call pos:start="79:45" pos:end="79:65"><name pos:start="79:45" pos:end="79:58"><name pos:start="79:45" pos:end="79:48">seps</name><operator pos:start="79:49" pos:end="79:49">.</operator><name pos:start="79:50" pos:end="79:58">substring</name></name><argument_list pos:start="79:59" pos:end="79:65">(<argument pos:start="79:60" pos:end="79:64"><expr pos:start="79:60" pos:end="79:64"><name pos:start="79:60" pos:end="79:60">i</name> <operator pos:start="79:62" pos:end="79:62">+</operator> <literal type="number" pos:start="79:64" pos:end="79:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else pos:start="80:9" pos:end="82:7">else <block pos:start="80:14" pos:end="82:7">{<block_content pos:start="81:9" pos:end="81:78">
        <expr_stmt pos:start="81:9" pos:end="81:78"><expr pos:start="81:9" pos:end="81:77"><name pos:start="81:9" pos:end="81:16">alphabet</name> <operator pos:start="81:18" pos:end="81:18">=</operator> <call pos:start="81:20" pos:end="81:43"><name pos:start="81:20" pos:end="81:37"><name pos:start="81:20" pos:end="81:27">alphabet</name><operator pos:start="81:28" pos:end="81:28">.</operator><name pos:start="81:29" pos:end="81:37">substring</name></name><argument_list pos:start="81:38" pos:end="81:43">(<argument pos:start="81:39" pos:end="81:39"><expr pos:start="81:39" pos:end="81:39"><literal type="number" pos:start="81:39" pos:end="81:39">0</literal></expr></argument>, <argument pos:start="81:42" pos:end="81:42"><expr pos:start="81:42" pos:end="81:42"><name pos:start="81:42" pos:end="81:42">j</name></expr></argument>)</argument_list></call> <operator pos:start="81:45" pos:end="81:45">+</operator> <literal type="string" pos:start="81:47" pos:end="81:49">" "</literal> <operator pos:start="81:51" pos:end="81:51">+</operator> <call pos:start="81:53" pos:end="81:77"><name pos:start="81:53" pos:end="81:70"><name pos:start="81:53" pos:end="81:60">alphabet</name><operator pos:start="81:61" pos:end="81:61">.</operator><name pos:start="81:62" pos:end="81:70">substring</name></name><argument_list pos:start="81:71" pos:end="81:77">(<argument pos:start="81:72" pos:end="81:76"><expr pos:start="81:72" pos:end="81:76"><name pos:start="81:72" pos:end="81:72">j</name> <operator pos:start="81:74" pos:end="81:74">+</operator> <literal type="number" pos:start="81:76" pos:end="81:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt pos:start="85:5" pos:end="85:47"><expr pos:start="85:5" pos:end="85:46"><name pos:start="85:5" pos:end="85:12">alphabet</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <call pos:start="85:16" pos:end="85:46"><name pos:start="85:16" pos:end="85:34"><name pos:start="85:16" pos:end="85:23">alphabet</name><operator pos:start="85:24" pos:end="85:24">.</operator><name pos:start="85:25" pos:end="85:34">replaceAll</name></name><argument_list pos:start="85:35" pos:end="85:46">(<argument pos:start="85:36" pos:end="85:41"><expr pos:start="85:36" pos:end="85:41"><literal type="string" pos:start="85:36" pos:end="85:41">"\\s+"</literal></expr></argument>, <argument pos:start="85:44" pos:end="85:45"><expr pos:start="85:44" pos:end="85:45"><literal type="string" pos:start="85:44" pos:end="85:45">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="86:5" pos:end="86:39"><expr pos:start="86:5" pos:end="86:38"><name pos:start="86:5" pos:end="86:8">seps</name> <operator pos:start="86:10" pos:end="86:10">=</operator> <call pos:start="86:12" pos:end="86:38"><name pos:start="86:12" pos:end="86:26"><name pos:start="86:12" pos:end="86:15">seps</name><operator pos:start="86:16" pos:end="86:16">.</operator><name pos:start="86:17" pos:end="86:26">replaceAll</name></name><argument_list pos:start="86:27" pos:end="86:38">(<argument pos:start="86:28" pos:end="86:33"><expr pos:start="86:28" pos:end="86:33"><literal type="string" pos:start="86:28" pos:end="86:33">"\\s+"</literal></expr></argument>, <argument pos:start="86:36" pos:end="86:37"><expr pos:start="86:36" pos:end="86:37"><literal type="string" pos:start="86:36" pos:end="86:37">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="87:5" pos:end="87:54"><expr pos:start="87:5" pos:end="87:53"><name pos:start="87:5" pos:end="87:8">seps</name> <operator pos:start="87:10" pos:end="87:10">=</operator> <call pos:start="87:12" pos:end="87:53"><name pos:start="87:12" pos:end="87:36"><name pos:start="87:12" pos:end="87:18">Hashids</name><operator pos:start="87:19" pos:end="87:19">.</operator><name pos:start="87:20" pos:end="87:36">consistentShuffle</name></name><argument_list pos:start="87:37" pos:end="87:53">(<argument pos:start="87:38" pos:end="87:41"><expr pos:start="87:38" pos:end="87:41"><name pos:start="87:38" pos:end="87:41">seps</name></expr></argument>, <argument pos:start="87:44" pos:end="87:52"><expr pos:start="87:44" pos:end="87:52"><name pos:start="87:44" pos:end="87:52"><name pos:start="87:44" pos:end="87:47">this</name><operator pos:start="87:48" pos:end="87:48">.</operator><name pos:start="87:49" pos:end="87:52">salt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="103:5"><if pos:start="89:5" pos:end="103:5">if <condition pos:start="89:8" pos:end="89:84">(<expr pos:start="89:9" pos:end="89:83"><operator pos:start="89:9" pos:end="89:9">(</operator><call pos:start="89:10" pos:end="89:23"><name pos:start="89:10" pos:end="89:21"><name pos:start="89:10" pos:end="89:13">seps</name><operator pos:start="89:14" pos:end="89:14">.</operator><name pos:start="89:15" pos:end="89:21">isEmpty</name></name><argument_list pos:start="89:22" pos:end="89:23">()</argument_list></call><operator pos:start="89:24" pos:end="89:24">)</operator> <operator pos:start="89:26" pos:end="89:27">||</operator> <operator pos:start="89:29" pos:end="89:29">(</operator><operator pos:start="89:30" pos:end="89:30">(</operator><operator pos:start="89:31" pos:end="89:31">(</operator><name pos:start="89:32" pos:end="89:36">float</name><operator pos:start="89:37" pos:end="89:37">)</operator> <call pos:start="89:39" pos:end="89:55"><name pos:start="89:39" pos:end="89:53"><name pos:start="89:39" pos:end="89:46">alphabet</name><operator pos:start="89:47" pos:end="89:47">.</operator><name pos:start="89:48" pos:end="89:53">length</name></name><argument_list pos:start="89:54" pos:end="89:55">()</argument_list></call> <operator pos:start="89:57" pos:end="89:57">/</operator> <call pos:start="89:59" pos:end="89:71"><name pos:start="89:59" pos:end="89:69"><name pos:start="89:59" pos:end="89:62">seps</name><operator pos:start="89:63" pos:end="89:63">.</operator><name pos:start="89:64" pos:end="89:69">length</name></name><argument_list pos:start="89:70" pos:end="89:71">()</argument_list></call><operator pos:start="89:72" pos:end="89:72">)</operator> <operator pos:start="89:74" pos:end="89:74">&gt;</operator> <name pos:start="89:76" pos:end="89:82">SEP_DIV</name><operator pos:start="89:83" pos:end="89:83">)</operator></expr>)</condition> <block pos:start="89:86" pos:end="103:5">{<block_content pos:start="90:7" pos:end="102:7">
      <decl_stmt pos:start="90:7" pos:end="90:66"><decl pos:start="90:7" pos:end="90:65"><type pos:start="90:7" pos:end="90:9"><name pos:start="90:7" pos:end="90:9">int</name></type> <name pos:start="90:11" pos:end="90:18">seps_len</name> <init pos:start="90:20" pos:end="90:65">= <expr pos:start="90:22" pos:end="90:65"><operator pos:start="90:22" pos:end="90:22">(</operator><name pos:start="90:23" pos:end="90:25">int</name><operator pos:start="90:26" pos:end="90:26">)</operator> <call pos:start="90:28" pos:end="90:65"><name pos:start="90:28" pos:end="90:36"><name pos:start="90:28" pos:end="90:31">Math</name><operator pos:start="90:32" pos:end="90:32">.</operator><name pos:start="90:33" pos:end="90:36">ceil</name></name><argument_list pos:start="90:37" pos:end="90:65">(<argument pos:start="90:38" pos:end="90:64"><expr pos:start="90:38" pos:end="90:64"><call pos:start="90:38" pos:end="90:54"><name pos:start="90:38" pos:end="90:52"><name pos:start="90:38" pos:end="90:45">alphabet</name><operator pos:start="90:46" pos:end="90:46">.</operator><name pos:start="90:47" pos:end="90:52">length</name></name><argument_list pos:start="90:53" pos:end="90:54">()</argument_list></call> <operator pos:start="90:56" pos:end="90:56">/</operator> <name pos:start="90:58" pos:end="90:64">SEP_DIV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt pos:start="92:7" pos:end="94:7"><if pos:start="92:7" pos:end="94:7">if <condition pos:start="92:10" pos:end="92:24">(<expr pos:start="92:11" pos:end="92:23"><name pos:start="92:11" pos:end="92:18">seps_len</name> <operator pos:start="92:20" pos:end="92:21">==</operator> <literal type="number" pos:start="92:23" pos:end="92:23">1</literal></expr>)</condition> <block pos:start="92:26" pos:end="94:7">{<block_content pos:start="93:9" pos:end="93:19">
        <expr_stmt pos:start="93:9" pos:end="93:19"><expr pos:start="93:9" pos:end="93:18"><name pos:start="93:9" pos:end="93:16">seps_len</name><operator pos:start="93:17" pos:end="93:18">++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt pos:start="96:7" pos:end="102:7"><if pos:start="96:7" pos:end="100:7">if <condition pos:start="96:10" pos:end="96:35">(<expr pos:start="96:11" pos:end="96:34"><name pos:start="96:11" pos:end="96:18">seps_len</name> <operator pos:start="96:20" pos:end="96:20">&gt;</operator> <call pos:start="96:22" pos:end="96:34"><name pos:start="96:22" pos:end="96:32"><name pos:start="96:22" pos:end="96:25">seps</name><operator pos:start="96:26" pos:end="96:26">.</operator><name pos:start="96:27" pos:end="96:32">length</name></name><argument_list pos:start="96:33" pos:end="96:34">()</argument_list></call></expr>)</condition> <block pos:start="96:37" pos:end="100:7">{<block_content pos:start="97:9" pos:end="99:44">
        <decl_stmt pos:start="97:9" pos:end="97:44"><decl pos:start="97:9" pos:end="97:43"><type pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">int</name></type> <name pos:start="97:13" pos:end="97:16">diff</name> <init pos:start="97:18" pos:end="97:43">= <expr pos:start="97:20" pos:end="97:43"><name pos:start="97:20" pos:end="97:27">seps_len</name> <operator pos:start="97:29" pos:end="97:29">-</operator> <call pos:start="97:31" pos:end="97:43"><name pos:start="97:31" pos:end="97:41"><name pos:start="97:31" pos:end="97:34">seps</name><operator pos:start="97:35" pos:end="97:35">.</operator><name pos:start="97:36" pos:end="97:41">length</name></name><argument_list pos:start="97:42" pos:end="97:43">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="98:9" pos:end="98:44"><expr pos:start="98:9" pos:end="98:43"><name pos:start="98:9" pos:end="98:12">seps</name> <operator pos:start="98:14" pos:end="98:15">+=</operator> <call pos:start="98:17" pos:end="98:43"><name pos:start="98:17" pos:end="98:34"><name pos:start="98:17" pos:end="98:24">alphabet</name><operator pos:start="98:25" pos:end="98:25">.</operator><name pos:start="98:26" pos:end="98:34">substring</name></name><argument_list pos:start="98:35" pos:end="98:43">(<argument pos:start="98:36" pos:end="98:36"><expr pos:start="98:36" pos:end="98:36"><literal type="number" pos:start="98:36" pos:end="98:36">0</literal></expr></argument>, <argument pos:start="98:39" pos:end="98:42"><expr pos:start="98:39" pos:end="98:42"><name pos:start="98:39" pos:end="98:42">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="99:9" pos:end="99:44"><expr pos:start="99:9" pos:end="99:43"><name pos:start="99:9" pos:end="99:16">alphabet</name> <operator pos:start="99:18" pos:end="99:18">=</operator> <call pos:start="99:20" pos:end="99:43"><name pos:start="99:20" pos:end="99:37"><name pos:start="99:20" pos:end="99:27">alphabet</name><operator pos:start="99:28" pos:end="99:28">.</operator><name pos:start="99:29" pos:end="99:37">substring</name></name><argument_list pos:start="99:38" pos:end="99:43">(<argument pos:start="99:39" pos:end="99:42"><expr pos:start="99:39" pos:end="99:42"><name pos:start="99:39" pos:end="99:42">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else pos:start="100:9" pos:end="102:7">else <block pos:start="100:14" pos:end="102:7">{<block_content pos:start="101:9" pos:end="101:43">
        <expr_stmt pos:start="101:9" pos:end="101:43"><expr pos:start="101:9" pos:end="101:42"><name pos:start="101:9" pos:end="101:12">seps</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <call pos:start="101:16" pos:end="101:42"><name pos:start="101:16" pos:end="101:29"><name pos:start="101:16" pos:end="101:19">seps</name><operator pos:start="101:20" pos:end="101:20">.</operator><name pos:start="101:21" pos:end="101:29">substring</name></name><argument_list pos:start="101:30" pos:end="101:42">(<argument pos:start="101:31" pos:end="101:31"><expr pos:start="101:31" pos:end="101:31"><literal type="number" pos:start="101:31" pos:end="101:31">0</literal></expr></argument>, <argument pos:start="101:34" pos:end="101:41"><expr pos:start="101:34" pos:end="101:41"><name pos:start="101:34" pos:end="101:41">seps_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:62"><expr pos:start="105:5" pos:end="105:61"><name pos:start="105:5" pos:end="105:12">alphabet</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <call pos:start="105:16" pos:end="105:61"><name pos:start="105:16" pos:end="105:40"><name pos:start="105:16" pos:end="105:22">Hashids</name><operator pos:start="105:23" pos:end="105:23">.</operator><name pos:start="105:24" pos:end="105:40">consistentShuffle</name></name><argument_list pos:start="105:41" pos:end="105:61">(<argument pos:start="105:42" pos:end="105:49"><expr pos:start="105:42" pos:end="105:49"><name pos:start="105:42" pos:end="105:49">alphabet</name></expr></argument>, <argument pos:start="105:52" pos:end="105:60"><expr pos:start="105:52" pos:end="105:60"><name pos:start="105:52" pos:end="105:60"><name pos:start="105:52" pos:end="105:55">this</name><operator pos:start="105:56" pos:end="105:56">.</operator><name pos:start="105:57" pos:end="105:60">salt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:start="106:5" pos:end="106:29">// use double to round up</comment>
    <decl_stmt pos:start="107:5" pos:end="107:77"><decl pos:start="107:5" pos:end="107:76"><type pos:start="107:5" pos:end="107:7"><name pos:start="107:5" pos:end="107:7">int</name></type> <name pos:start="107:9" pos:end="107:18">guardCount</name> <init pos:start="107:20" pos:end="107:76">= <expr pos:start="107:22" pos:end="107:76"><operator pos:start="107:22" pos:end="107:22">(</operator><name pos:start="107:23" pos:end="107:25">int</name><operator pos:start="107:26" pos:end="107:26">)</operator> <call pos:start="107:28" pos:end="107:76"><name pos:start="107:28" pos:end="107:36"><name pos:start="107:28" pos:end="107:31">Math</name><operator pos:start="107:32" pos:end="107:32">.</operator><name pos:start="107:33" pos:end="107:36">ceil</name></name><argument_list pos:start="107:37" pos:end="107:76">(<argument pos:start="107:38" pos:end="107:75"><expr pos:start="107:38" pos:end="107:75"><operator pos:start="107:38" pos:end="107:38">(</operator><name pos:start="107:39" pos:end="107:44">double</name><operator pos:start="107:45" pos:end="107:45">)</operator> <call pos:start="107:47" pos:end="107:63"><name pos:start="107:47" pos:end="107:61"><name pos:start="107:47" pos:end="107:54">alphabet</name><operator pos:start="107:55" pos:end="107:55">.</operator><name pos:start="107:56" pos:end="107:61">length</name></name><argument_list pos:start="107:62" pos:end="107:63">()</argument_list></call> <operator pos:start="107:65" pos:end="107:65">/</operator> <name pos:start="107:67" pos:end="107:75">GUARD_DIV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="109:5" pos:end="109:18"><decl pos:start="109:5" pos:end="109:17"><type pos:start="109:5" pos:end="109:10"><name pos:start="109:5" pos:end="109:10">String</name></type> <name pos:start="109:12" pos:end="109:17">guards</name></decl>;</decl_stmt>
    <if_stmt pos:start="110:5" pos:end="116:5"><if pos:start="110:5" pos:end="113:5">if <condition pos:start="110:8" pos:end="110:30">(<expr pos:start="110:9" pos:end="110:29"><call pos:start="110:9" pos:end="110:25"><name pos:start="110:9" pos:end="110:23"><name pos:start="110:9" pos:end="110:16">alphabet</name><operator pos:start="110:17" pos:end="110:17">.</operator><name pos:start="110:18" pos:end="110:23">length</name></name><argument_list pos:start="110:24" pos:end="110:25">()</argument_list></call> <operator pos:start="110:27" pos:end="110:27">&lt;</operator> <literal type="number" pos:start="110:29" pos:end="110:29">3</literal></expr>)</condition> <block pos:start="110:32" pos:end="113:5">{<block_content pos:start="111:7" pos:end="112:40">
      <expr_stmt pos:start="111:7" pos:end="111:45"><expr pos:start="111:7" pos:end="111:44"><name pos:start="111:7" pos:end="111:12">guards</name> <operator pos:start="111:14" pos:end="111:14">=</operator> <call pos:start="111:16" pos:end="111:44"><name pos:start="111:16" pos:end="111:29"><name pos:start="111:16" pos:end="111:19">seps</name><operator pos:start="111:20" pos:end="111:20">.</operator><name pos:start="111:21" pos:end="111:29">substring</name></name><argument_list pos:start="111:30" pos:end="111:44">(<argument pos:start="111:31" pos:end="111:31"><expr pos:start="111:31" pos:end="111:31"><literal type="number" pos:start="111:31" pos:end="111:31">0</literal></expr></argument>, <argument pos:start="111:34" pos:end="111:43"><expr pos:start="111:34" pos:end="111:43"><name pos:start="111:34" pos:end="111:43">guardCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="112:7" pos:end="112:40"><expr pos:start="112:7" pos:end="112:39"><name pos:start="112:7" pos:end="112:10">seps</name> <operator pos:start="112:12" pos:end="112:12">=</operator> <call pos:start="112:14" pos:end="112:39"><name pos:start="112:14" pos:end="112:27"><name pos:start="112:14" pos:end="112:17">seps</name><operator pos:start="112:18" pos:end="112:18">.</operator><name pos:start="112:19" pos:end="112:27">substring</name></name><argument_list pos:start="112:28" pos:end="112:39">(<argument pos:start="112:29" pos:end="112:38"><expr pos:start="112:29" pos:end="112:38"><name pos:start="112:29" pos:end="112:38">guardCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="113:7" pos:end="116:5">else <block pos:start="113:12" pos:end="116:5">{<block_content pos:start="114:7" pos:end="115:48">
      <expr_stmt pos:start="114:7" pos:end="114:49"><expr pos:start="114:7" pos:end="114:48"><name pos:start="114:7" pos:end="114:12">guards</name> <operator pos:start="114:14" pos:end="114:14">=</operator> <call pos:start="114:16" pos:end="114:48"><name pos:start="114:16" pos:end="114:33"><name pos:start="114:16" pos:end="114:23">alphabet</name><operator pos:start="114:24" pos:end="114:24">.</operator><name pos:start="114:25" pos:end="114:33">substring</name></name><argument_list pos:start="114:34" pos:end="114:48">(<argument pos:start="114:35" pos:end="114:35"><expr pos:start="114:35" pos:end="114:35"><literal type="number" pos:start="114:35" pos:end="114:35">0</literal></expr></argument>, <argument pos:start="114:38" pos:end="114:47"><expr pos:start="114:38" pos:end="114:47"><name pos:start="114:38" pos:end="114:47">guardCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="115:7" pos:end="115:48"><expr pos:start="115:7" pos:end="115:47"><name pos:start="115:7" pos:end="115:14">alphabet</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <call pos:start="115:18" pos:end="115:47"><name pos:start="115:18" pos:end="115:35"><name pos:start="115:18" pos:end="115:25">alphabet</name><operator pos:start="115:26" pos:end="115:26">.</operator><name pos:start="115:27" pos:end="115:35">substring</name></name><argument_list pos:start="115:36" pos:end="115:47">(<argument pos:start="115:37" pos:end="115:46"><expr pos:start="115:37" pos:end="115:46"><name pos:start="115:37" pos:end="115:46">guardCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="117:5" pos:end="117:25"><expr pos:start="117:5" pos:end="117:24"><name pos:start="117:5" pos:end="117:15"><name pos:start="117:5" pos:end="117:8">this</name><operator pos:start="117:9" pos:end="117:9">.</operator><name pos:start="117:10" pos:end="117:15">guards</name></name> <operator pos:start="117:17" pos:end="117:17">=</operator> <name pos:start="117:19" pos:end="117:24">guards</name></expr>;</expr_stmt>
    <expr_stmt pos:start="118:5" pos:end="118:29"><expr pos:start="118:5" pos:end="118:28"><name pos:start="118:5" pos:end="118:17"><name pos:start="118:5" pos:end="118:8">this</name><operator pos:start="118:9" pos:end="118:9">.</operator><name pos:start="118:10" pos:end="118:17">alphabet</name></name> <operator pos:start="118:19" pos:end="118:19">=</operator> <name pos:start="118:21" pos:end="118:28">alphabet</name></expr>;</expr_stmt>
    <expr_stmt pos:start="119:5" pos:end="119:21"><expr pos:start="119:5" pos:end="119:20"><name pos:start="119:5" pos:end="119:13"><name pos:start="119:5" pos:end="119:8">this</name><operator pos:start="119:9" pos:end="119:9">.</operator><name pos:start="119:10" pos:end="119:13">seps</name></name> <operator pos:start="119:15" pos:end="119:15">=</operator> <name pos:start="119:17" pos:end="119:20">seps</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc" pos:start="122:3" pos:end="126:5">/**
   * @param numbers the numbers to encrypt
   * @return the encrypt string
   * @deprecated should use encode() since v1.0
   */</comment>
  <function pos:start="127:3" pos:end="130:3"><annotation pos:start="127:3" pos:end="127:13">@<name pos:start="127:4" pos:end="127:13">Deprecated</name></annotation>
  <type pos:start="128:3" pos:end="128:15"><specifier pos:start="128:3" pos:end="128:8">public</specifier> <name pos:start="128:10" pos:end="128:15">String</name></type> <name pos:start="128:17" pos:end="128:23">encrypt</name><parameter_list pos:start="128:24" pos:end="128:40">(<parameter pos:start="128:25" pos:end="128:39"><decl pos:start="128:25" pos:end="128:39"><type pos:start="128:25" pos:end="128:31"><name pos:start="128:25" pos:end="128:28">long</name><modifier pos:start="128:29" pos:end="128:31">...</modifier></type> <name pos:start="128:33" pos:end="128:39">numbers</name></decl></parameter>)</parameter_list> <block pos:start="128:42" pos:end="130:3">{<block_content pos:start="129:5" pos:end="129:27">
    <return pos:start="129:5" pos:end="129:27">return <expr pos:start="129:12" pos:end="129:26"><call pos:start="129:12" pos:end="129:26"><name pos:start="129:12" pos:end="129:17">encode</name><argument_list pos:start="129:18" pos:end="129:26">(<argument pos:start="129:19" pos:end="129:25"><expr pos:start="129:19" pos:end="129:25"><name pos:start="129:19" pos:end="129:25">numbers</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="132:3" pos:end="136:5">/**
   * @param hash the encrypt string
   * @return decryped numbers
   * @deprecated should use decode() since v1.0
   */</comment>
  <function pos:start="137:3" pos:end="140:3"><annotation pos:start="137:3" pos:end="137:13">@<name pos:start="137:4" pos:end="137:13">Deprecated</name></annotation>
  <type pos:start="138:3" pos:end="138:15"><specifier pos:start="138:3" pos:end="138:8">public</specifier> <name pos:start="138:10" pos:end="138:15"><name pos:start="138:10" pos:end="138:13">long</name><index pos:start="138:14" pos:end="138:15">[]</index></name></type> <name pos:start="138:17" pos:end="138:23">decrypt</name><parameter_list pos:start="138:24" pos:end="138:36">(<parameter pos:start="138:25" pos:end="138:35"><decl pos:start="138:25" pos:end="138:35"><type pos:start="138:25" pos:end="138:30"><name pos:start="138:25" pos:end="138:30">String</name></type> <name pos:start="138:32" pos:end="138:35">hash</name></decl></parameter>)</parameter_list> <block pos:start="138:38" pos:end="140:3">{<block_content pos:start="139:5" pos:end="139:24">
    <return pos:start="139:5" pos:end="139:24">return <expr pos:start="139:12" pos:end="139:23"><call pos:start="139:12" pos:end="139:23"><name pos:start="139:12" pos:end="139:17">decode</name><argument_list pos:start="139:18" pos:end="139:23">(<argument pos:start="139:19" pos:end="139:22"><expr pos:start="139:19" pos:end="139:22"><name pos:start="139:19" pos:end="139:22">hash</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="142:3" pos:end="146:5">/**
   * @param hexa the hexa to encrypt
   * @return the encrypt string
   * @deprecated should use encodeHex() since v1.0
   */</comment>
  <function pos:start="147:3" pos:end="150:3"><annotation pos:start="147:3" pos:end="147:13">@<name pos:start="147:4" pos:end="147:13">Deprecated</name></annotation>
  <type pos:start="148:3" pos:end="148:15"><specifier pos:start="148:3" pos:end="148:8">public</specifier> <name pos:start="148:10" pos:end="148:15">String</name></type> <name pos:start="148:17" pos:end="148:26">encryptHex</name><parameter_list pos:start="148:27" pos:end="148:39">(<parameter pos:start="148:28" pos:end="148:38"><decl pos:start="148:28" pos:end="148:38"><type pos:start="148:28" pos:end="148:33"><name pos:start="148:28" pos:end="148:33">String</name></type> <name pos:start="148:35" pos:end="148:38">hexa</name></decl></parameter>)</parameter_list> <block pos:start="148:41" pos:end="150:3">{<block_content pos:start="149:5" pos:end="149:27">
    <return pos:start="149:5" pos:end="149:27">return <expr pos:start="149:12" pos:end="149:26"><call pos:start="149:12" pos:end="149:26"><name pos:start="149:12" pos:end="149:20">encodeHex</name><argument_list pos:start="149:21" pos:end="149:26">(<argument pos:start="149:22" pos:end="149:25"><expr pos:start="149:22" pos:end="149:25"><name pos:start="149:22" pos:end="149:25">hexa</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="152:3" pos:end="156:5">/**
   * @param hash the encrypt string
   * @return decryped numbers
   * @deprecated should use decodeHex() since v1.0
   */</comment>
  <function pos:start="157:3" pos:end="160:3"><annotation pos:start="157:3" pos:end="157:13">@<name pos:start="157:4" pos:end="157:13">Deprecated</name></annotation>
  <type pos:start="158:3" pos:end="158:15"><specifier pos:start="158:3" pos:end="158:8">public</specifier> <name pos:start="158:10" pos:end="158:15">String</name></type> <name pos:start="158:17" pos:end="158:26">decryptHex</name><parameter_list pos:start="158:27" pos:end="158:39">(<parameter pos:start="158:28" pos:end="158:38"><decl pos:start="158:28" pos:end="158:38"><type pos:start="158:28" pos:end="158:33"><name pos:start="158:28" pos:end="158:33">String</name></type> <name pos:start="158:35" pos:end="158:38">hash</name></decl></parameter>)</parameter_list> <block pos:start="158:41" pos:end="160:3">{<block_content pos:start="159:5" pos:end="159:27">
    <return pos:start="159:5" pos:end="159:27">return <expr pos:start="159:12" pos:end="159:26"><call pos:start="159:12" pos:end="159:26"><name pos:start="159:12" pos:end="159:20">decodeHex</name><argument_list pos:start="159:21" pos:end="159:26">(<argument pos:start="159:22" pos:end="159:25"><expr pos:start="159:22" pos:end="159:25"><name pos:start="159:22" pos:end="159:25">hash</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="162:3" pos:end="167:5">/**
   * Encrypt numbers to string
   *
   * @param numbers the numbers to encrypt
   * @return the encrypt string
   */</comment>
  <function pos:start="168:3" pos:end="182:3"><type pos:start="168:3" pos:end="168:15"><specifier pos:start="168:3" pos:end="168:8">public</specifier> <name pos:start="168:10" pos:end="168:15">String</name></type> <name pos:start="168:17" pos:end="168:22">encode</name><parameter_list pos:start="168:23" pos:end="168:39">(<parameter pos:start="168:24" pos:end="168:38"><decl pos:start="168:24" pos:end="168:38"><type pos:start="168:24" pos:end="168:30"><name pos:start="168:24" pos:end="168:27">long</name><modifier pos:start="168:28" pos:end="168:30">...</modifier></type> <name pos:start="168:32" pos:end="168:38">numbers</name></decl></parameter>)</parameter_list> <block pos:start="168:41" pos:end="182:3">{<block_content pos:start="169:5" pos:end="181:33">
    <if_stmt pos:start="169:5" pos:end="171:5"><if pos:start="169:5" pos:end="171:5">if <condition pos:start="169:8" pos:end="169:28">(<expr pos:start="169:9" pos:end="169:27"><name pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:15">numbers</name><operator pos:start="169:16" pos:end="169:16">.</operator><name pos:start="169:17" pos:end="169:22">length</name></name> <operator pos:start="169:24" pos:end="169:25">==</operator> <literal type="number" pos:start="169:27" pos:end="169:27">0</literal></expr>)</condition> <block pos:start="169:30" pos:end="171:5">{<block_content pos:start="170:7" pos:end="170:16">
      <return pos:start="170:7" pos:end="170:16">return <expr pos:start="170:14" pos:end="170:15"><literal type="string" pos:start="170:14" pos:end="170:15">""</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <for pos:start="173:5" pos:end="180:5">for <control pos:start="173:9" pos:end="173:31">(<init pos:start="173:10" pos:end="173:30"><decl pos:start="173:10" pos:end="173:30"><type pos:start="173:10" pos:end="173:13"><name pos:start="173:10" pos:end="173:13">long</name></type> <name pos:start="173:15" pos:end="173:20">number</name> <range pos:start="173:22" pos:end="173:30">: <expr pos:start="173:24" pos:end="173:30"><name pos:start="173:24" pos:end="173:30">numbers</name></expr></range></decl></init>)</control> <block pos:start="173:33" pos:end="180:5">{<block_content pos:start="174:7" pos:end="179:7">
      <if_stmt pos:start="174:7" pos:end="176:7"><if pos:start="174:7" pos:end="176:7">if <condition pos:start="174:10" pos:end="174:21">(<expr pos:start="174:11" pos:end="174:20"><name pos:start="174:11" pos:end="174:16">number</name> <operator pos:start="174:18" pos:end="174:18">&lt;</operator> <literal type="number" pos:start="174:20" pos:end="174:20">0</literal></expr>)</condition> <block pos:start="174:23" pos:end="176:7">{<block_content pos:start="175:9" pos:end="175:18">
        <return pos:start="175:9" pos:end="175:18">return <expr pos:start="175:16" pos:end="175:17"><literal type="string" pos:start="175:16" pos:end="175:17">""</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt pos:start="177:7" pos:end="179:7"><if pos:start="177:7" pos:end="179:7">if <condition pos:start="177:10" pos:end="177:30">(<expr pos:start="177:11" pos:end="177:29"><name pos:start="177:11" pos:end="177:16">number</name> <operator pos:start="177:18" pos:end="177:18">&gt;</operator> <name pos:start="177:20" pos:end="177:29">MAX_NUMBER</name></expr>)</condition> <block pos:start="177:32" pos:end="179:7">{<block_content pos:start="178:9" pos:end="178:97">
        <throw pos:start="178:9" pos:end="178:97">throw <expr pos:start="178:15" pos:end="178:96"><operator pos:start="178:15" pos:end="178:17">new</operator> <call pos:start="178:19" pos:end="178:96"><name pos:start="178:19" pos:end="178:42">IllegalArgumentException</name><argument_list pos:start="178:43" pos:end="178:96">(<argument pos:start="178:44" pos:end="178:95"><expr pos:start="178:44" pos:end="178:95"><literal type="string" pos:start="178:44" pos:end="178:76">"number can not be greater than "</literal> <operator pos:start="178:78" pos:end="178:78">+</operator> <name pos:start="178:80" pos:end="178:89">MAX_NUMBER</name> <operator pos:start="178:91" pos:end="178:91">+</operator> <literal type="string" pos:start="178:93" pos:end="178:95">"L"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="181:5" pos:end="181:33">return <expr pos:start="181:12" pos:end="181:32"><call pos:start="181:12" pos:end="181:32"><name pos:start="181:12" pos:end="181:23"><name pos:start="181:12" pos:end="181:15">this</name><operator pos:start="181:16" pos:end="181:16">.</operator><name pos:start="181:17" pos:end="181:23">_encode</name></name><argument_list pos:start="181:24" pos:end="181:32">(<argument pos:start="181:25" pos:end="181:31"><expr pos:start="181:25" pos:end="181:31"><name pos:start="181:25" pos:end="181:31">numbers</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="184:3" pos:end="189:5">/**
   * Decrypt string to numbers
   *
   * @param hash the encrypt string
   * @return decryped numbers
   */</comment>
  <function pos:start="190:3" pos:end="195:3"><type pos:start="190:3" pos:end="190:15"><specifier pos:start="190:3" pos:end="190:8">public</specifier> <name pos:start="190:10" pos:end="190:15"><name pos:start="190:10" pos:end="190:13">long</name><index pos:start="190:14" pos:end="190:15">[]</index></name></type> <name pos:start="190:17" pos:end="190:22">decode</name><parameter_list pos:start="190:23" pos:end="190:35">(<parameter pos:start="190:24" pos:end="190:34"><decl pos:start="190:24" pos:end="190:34"><type pos:start="190:24" pos:end="190:29"><name pos:start="190:24" pos:end="190:29">String</name></type> <name pos:start="190:31" pos:end="190:34">hash</name></decl></parameter>)</parameter_list> <block pos:start="190:37" pos:end="195:3">{<block_content pos:start="191:5" pos:end="194:45">
    <if_stmt pos:start="191:5" pos:end="192:25"><if pos:start="191:5" pos:end="192:25">if <condition pos:start="191:8" pos:end="191:23">(<expr pos:start="191:9" pos:end="191:22"><call pos:start="191:9" pos:end="191:22"><name pos:start="191:9" pos:end="191:20"><name pos:start="191:9" pos:end="191:12">hash</name><operator pos:start="191:13" pos:end="191:13">.</operator><name pos:start="191:14" pos:end="191:20">isEmpty</name></name><argument_list pos:start="191:21" pos:end="191:22">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="192:7" pos:end="192:25"><block_content pos:start="192:7" pos:end="192:25">
      <return pos:start="192:7" pos:end="192:25">return <expr pos:start="192:14" pos:end="192:24"><operator pos:start="192:14" pos:end="192:16">new</operator> <name pos:start="192:18" pos:end="192:24"><name pos:start="192:18" pos:end="192:21">long</name><index pos:start="192:22" pos:end="192:24">[<expr pos:start="192:23" pos:end="192:23"><literal type="number" pos:start="192:23" pos:end="192:23">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

    <return pos:start="194:5" pos:end="194:45">return <expr pos:start="194:12" pos:end="194:44"><call pos:start="194:12" pos:end="194:44"><name pos:start="194:12" pos:end="194:23"><name pos:start="194:12" pos:end="194:15">this</name><operator pos:start="194:16" pos:end="194:16">.</operator><name pos:start="194:17" pos:end="194:23">_decode</name></name><argument_list pos:start="194:24" pos:end="194:44">(<argument pos:start="194:25" pos:end="194:28"><expr pos:start="194:25" pos:end="194:28"><name pos:start="194:25" pos:end="194:28">hash</name></expr></argument>, <argument pos:start="194:31" pos:end="194:43"><expr pos:start="194:31" pos:end="194:43"><name pos:start="194:31" pos:end="194:43"><name pos:start="194:31" pos:end="194:34">this</name><operator pos:start="194:35" pos:end="194:35">.</operator><name pos:start="194:36" pos:end="194:43">alphabet</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="197:3" pos:end="202:5">/**
   * Encrypt hexa to string
   *
   * @param hexa the hexa to encrypt
   * @return the encrypt string
   */</comment>
  <function pos:start="203:3" pos:end="219:3"><type pos:start="203:3" pos:end="203:15"><specifier pos:start="203:3" pos:end="203:8">public</specifier> <name pos:start="203:10" pos:end="203:15">String</name></type> <name pos:start="203:17" pos:end="203:25">encodeHex</name><parameter_list pos:start="203:26" pos:end="203:38">(<parameter pos:start="203:27" pos:end="203:37"><decl pos:start="203:27" pos:end="203:37"><type pos:start="203:27" pos:end="203:32"><name pos:start="203:27" pos:end="203:32">String</name></type> <name pos:start="203:34" pos:end="203:37">hexa</name></decl></parameter>)</parameter_list> <block pos:start="203:40" pos:end="219:3">{<block_content pos:start="204:5" pos:end="218:32">
    <if_stmt pos:start="204:5" pos:end="205:16"><if pos:start="204:5" pos:end="205:16">if <condition pos:start="204:8" pos:end="204:40">(<expr pos:start="204:9" pos:end="204:39"><operator pos:start="204:9" pos:end="204:9">!</operator><call pos:start="204:10" pos:end="204:39"><name pos:start="204:10" pos:end="204:21"><name pos:start="204:10" pos:end="204:13">hexa</name><operator pos:start="204:14" pos:end="204:14">.</operator><name pos:start="204:15" pos:end="204:21">matches</name></name><argument_list pos:start="204:22" pos:end="204:39">(<argument pos:start="204:23" pos:end="204:38"><expr pos:start="204:23" pos:end="204:38"><literal type="string" pos:start="204:23" pos:end="204:38">"^[0-9a-fA-F]+$"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="205:7" pos:end="205:16"><block_content pos:start="205:7" pos:end="205:16">
      <return pos:start="205:7" pos:end="205:16">return <expr pos:start="205:14" pos:end="205:15"><literal type="string" pos:start="205:14" pos:end="205:15">""</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt pos:start="207:5" pos:end="207:47"><decl pos:start="207:5" pos:end="207:46"><type pos:start="207:5" pos:end="207:14"><name pos:start="207:5" pos:end="207:14"><name pos:start="207:5" pos:end="207:8">List</name><argument_list type="generic" pos:start="207:9" pos:end="207:14">&lt;<argument pos:start="207:10" pos:end="207:13"><name pos:start="207:10" pos:end="207:13">Long</name></argument>&gt;</argument_list></name></type> <name pos:start="207:16" pos:end="207:22">matched</name> <init pos:start="207:24" pos:end="207:46">= <expr pos:start="207:26" pos:end="207:46"><operator pos:start="207:26" pos:end="207:28">new</operator> <call pos:start="207:30" pos:end="207:46"><name pos:start="207:30" pos:end="207:44"><name pos:start="207:30" pos:end="207:38">ArrayList</name><argument_list type="generic" pos:start="207:39" pos:end="207:44">&lt;<argument pos:start="207:40" pos:end="207:43"><name pos:start="207:40" pos:end="207:43">Long</name></argument>&gt;</argument_list></name><argument_list pos:start="207:45" pos:end="207:46">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="208:5" pos:end="208:70"><decl pos:start="208:5" pos:end="208:69"><type pos:start="208:5" pos:end="208:11"><name pos:start="208:5" pos:end="208:11">Matcher</name></type> <name pos:start="208:13" pos:end="208:19">matcher</name> <init pos:start="208:21" pos:end="208:69">= <expr pos:start="208:23" pos:end="208:69"><call pos:start="208:23" pos:end="208:55"><name pos:start="208:23" pos:end="208:37"><name pos:start="208:23" pos:end="208:29">Pattern</name><operator pos:start="208:30" pos:end="208:30">.</operator><name pos:start="208:31" pos:end="208:37">compile</name></name><argument_list pos:start="208:38" pos:end="208:55">(<argument pos:start="208:39" pos:end="208:54"><expr pos:start="208:39" pos:end="208:54"><literal type="string" pos:start="208:39" pos:end="208:54">"[\\w\\W]{1,12}"</literal></expr></argument>)</argument_list></call><operator pos:start="208:56" pos:end="208:56">.</operator><call pos:start="208:57" pos:end="208:69"><name pos:start="208:57" pos:end="208:63">matcher</name><argument_list pos:start="208:64" pos:end="208:69">(<argument pos:start="208:65" pos:end="208:68"><expr pos:start="208:65" pos:end="208:68"><name pos:start="208:65" pos:end="208:68">hexa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while pos:start="210:5" pos:end="211:61">while <condition pos:start="210:11" pos:end="210:26">(<expr pos:start="210:12" pos:end="210:25"><call pos:start="210:12" pos:end="210:25"><name pos:start="210:12" pos:end="210:23"><name pos:start="210:12" pos:end="210:18">matcher</name><operator pos:start="210:19" pos:end="210:19">.</operator><name pos:start="210:20" pos:end="210:23">find</name></name><argument_list pos:start="210:24" pos:end="210:25">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="211:7" pos:end="211:61"><block_content pos:start="211:7" pos:end="211:61">
      <expr_stmt pos:start="211:7" pos:end="211:61"><expr pos:start="211:7" pos:end="211:60"><call pos:start="211:7" pos:end="211:60"><name pos:start="211:7" pos:end="211:17"><name pos:start="211:7" pos:end="211:13">matched</name><operator pos:start="211:14" pos:end="211:14">.</operator><name pos:start="211:15" pos:end="211:17">add</name></name><argument_list pos:start="211:18" pos:end="211:60">(<argument pos:start="211:19" pos:end="211:59"><expr pos:start="211:19" pos:end="211:59"><call pos:start="211:19" pos:end="211:59"><name pos:start="211:19" pos:end="211:32"><name pos:start="211:19" pos:end="211:22">Long</name><operator pos:start="211:23" pos:end="211:23">.</operator><name pos:start="211:24" pos:end="211:32">parseLong</name></name><argument_list pos:start="211:33" pos:end="211:59">(<argument pos:start="211:34" pos:end="211:54"><expr pos:start="211:34" pos:end="211:54"><literal type="string" pos:start="211:34" pos:end="211:36">"1"</literal> <operator pos:start="211:38" pos:end="211:38">+</operator> <call pos:start="211:40" pos:end="211:54"><name pos:start="211:40" pos:end="211:52"><name pos:start="211:40" pos:end="211:46">matcher</name><operator pos:start="211:47" pos:end="211:47">.</operator><name pos:start="211:48" pos:end="211:52">group</name></name><argument_list pos:start="211:53" pos:end="211:54">()</argument_list></call></expr></argument>, <argument pos:start="211:57" pos:end="211:58"><expr pos:start="211:57" pos:end="211:58"><literal type="number" pos:start="211:57" pos:end="211:58">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <comment type="line" pos:start="213:5" pos:end="213:17">// conversion</comment>
    <decl_stmt pos:start="214:5" pos:end="214:45"><decl pos:start="214:5" pos:end="214:44"><type pos:start="214:5" pos:end="214:10"><name pos:start="214:5" pos:end="214:10"><name pos:start="214:5" pos:end="214:8">long</name><index pos:start="214:9" pos:end="214:10">[]</index></name></type> <name pos:start="214:12" pos:end="214:17">result</name> <init pos:start="214:19" pos:end="214:44">= <expr pos:start="214:21" pos:end="214:44"><operator pos:start="214:21" pos:end="214:23">new</operator> <name pos:start="214:25" pos:end="214:44"><name pos:start="214:25" pos:end="214:28">long</name><index pos:start="214:29" pos:end="214:44">[<expr pos:start="214:30" pos:end="214:43"><call pos:start="214:30" pos:end="214:43"><name pos:start="214:30" pos:end="214:41"><name pos:start="214:30" pos:end="214:36">matched</name><operator pos:start="214:37" pos:end="214:37">.</operator><name pos:start="214:38" pos:end="214:41">size</name></name><argument_list pos:start="214:42" pos:end="214:43">()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for pos:start="215:5" pos:end="216:33">for <control pos:start="215:9" pos:end="215:44">(<init pos:start="215:10" pos:end="215:19"><decl pos:start="215:10" pos:end="215:18"><type pos:start="215:10" pos:end="215:12"><name pos:start="215:10" pos:end="215:12">int</name></type> <name pos:start="215:14" pos:end="215:14">i</name> <init pos:start="215:16" pos:end="215:18">= <expr pos:start="215:18" pos:end="215:18"><literal type="number" pos:start="215:18" pos:end="215:18">0</literal></expr></init></decl>;</init> <condition pos:start="215:21" pos:end="215:39"><expr pos:start="215:21" pos:end="215:38"><name pos:start="215:21" pos:end="215:21">i</name> <operator pos:start="215:23" pos:end="215:23">&lt;</operator> <call pos:start="215:25" pos:end="215:38"><name pos:start="215:25" pos:end="215:36"><name pos:start="215:25" pos:end="215:31">matched</name><operator pos:start="215:32" pos:end="215:32">.</operator><name pos:start="215:33" pos:end="215:36">size</name></name><argument_list pos:start="215:37" pos:end="215:38">()</argument_list></call></expr>;</condition> <incr pos:start="215:41" pos:end="215:43"><expr pos:start="215:41" pos:end="215:43"><name pos:start="215:41" pos:end="215:41">i</name><operator pos:start="215:42" pos:end="215:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="216:7" pos:end="216:33"><block_content pos:start="216:7" pos:end="216:33">
      <expr_stmt pos:start="216:7" pos:end="216:33"><expr pos:start="216:7" pos:end="216:32"><name pos:start="216:7" pos:end="216:15"><name pos:start="216:7" pos:end="216:12">result</name><index pos:start="216:13" pos:end="216:15">[<expr pos:start="216:14" pos:end="216:14"><name pos:start="216:14" pos:end="216:14">i</name></expr>]</index></name> <operator pos:start="216:17" pos:end="216:17">=</operator> <call pos:start="216:19" pos:end="216:32"><name pos:start="216:19" pos:end="216:29"><name pos:start="216:19" pos:end="216:25">matched</name><operator pos:start="216:26" pos:end="216:26">.</operator><name pos:start="216:27" pos:end="216:29">get</name></name><argument_list pos:start="216:30" pos:end="216:32">(<argument pos:start="216:31" pos:end="216:31"><expr pos:start="216:31" pos:end="216:31"><name pos:start="216:31" pos:end="216:31">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <return pos:start="218:5" pos:end="218:32">return <expr pos:start="218:12" pos:end="218:31"><call pos:start="218:12" pos:end="218:31"><name pos:start="218:12" pos:end="218:23"><name pos:start="218:12" pos:end="218:15">this</name><operator pos:start="218:16" pos:end="218:16">.</operator><name pos:start="218:17" pos:end="218:23">_encode</name></name><argument_list pos:start="218:24" pos:end="218:31">(<argument pos:start="218:25" pos:end="218:30"><expr pos:start="218:25" pos:end="218:30"><name pos:start="218:25" pos:end="218:30">result</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="221:3" pos:end="226:5">/**
   * Decrypt string to numbers
   *
   * @param hash the encrypt string
   * @return decryped numbers
   */</comment>
  <function pos:start="227:3" pos:end="236:3"><type pos:start="227:3" pos:end="227:15"><specifier pos:start="227:3" pos:end="227:8">public</specifier> <name pos:start="227:10" pos:end="227:15">String</name></type> <name pos:start="227:17" pos:end="227:25">decodeHex</name><parameter_list pos:start="227:26" pos:end="227:38">(<parameter pos:start="227:27" pos:end="227:37"><decl pos:start="227:27" pos:end="227:37"><type pos:start="227:27" pos:end="227:32"><name pos:start="227:27" pos:end="227:32">String</name></type> <name pos:start="227:34" pos:end="227:37">hash</name></decl></parameter>)</parameter_list> <block pos:start="227:40" pos:end="236:3">{<block_content pos:start="228:5" pos:end="235:29">
    <decl_stmt pos:start="228:5" pos:end="228:47"><decl pos:start="228:5" pos:end="228:46"><type pos:start="228:5" pos:end="228:17"><name pos:start="228:5" pos:end="228:17">StringBuilder</name></type> <name pos:start="228:19" pos:end="228:24">result</name> <init pos:start="228:26" pos:end="228:46">= <expr pos:start="228:28" pos:end="228:46"><operator pos:start="228:28" pos:end="228:30">new</operator> <call pos:start="228:32" pos:end="228:46"><name pos:start="228:32" pos:end="228:44">StringBuilder</name><argument_list pos:start="228:45" pos:end="228:46">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="229:5" pos:end="229:39"><decl pos:start="229:5" pos:end="229:38"><type pos:start="229:5" pos:end="229:10"><name pos:start="229:5" pos:end="229:10"><name pos:start="229:5" pos:end="229:8">long</name><index pos:start="229:9" pos:end="229:10">[]</index></name></type> <name pos:start="229:12" pos:end="229:18">numbers</name> <init pos:start="229:20" pos:end="229:38">= <expr pos:start="229:22" pos:end="229:38"><call pos:start="229:22" pos:end="229:38"><name pos:start="229:22" pos:end="229:32"><name pos:start="229:22" pos:end="229:25">this</name><operator pos:start="229:26" pos:end="229:26">.</operator><name pos:start="229:27" pos:end="229:32">decode</name></name><argument_list pos:start="229:33" pos:end="229:38">(<argument pos:start="229:34" pos:end="229:37"><expr pos:start="229:34" pos:end="229:37"><name pos:start="229:34" pos:end="229:37">hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for pos:start="231:5" pos:end="233:5">for <control pos:start="231:9" pos:end="231:31">(<init pos:start="231:10" pos:end="231:30"><decl pos:start="231:10" pos:end="231:30"><type pos:start="231:10" pos:end="231:13"><name pos:start="231:10" pos:end="231:13">long</name></type> <name pos:start="231:15" pos:end="231:20">number</name> <range pos:start="231:22" pos:end="231:30">: <expr pos:start="231:24" pos:end="231:30"><name pos:start="231:24" pos:end="231:30">numbers</name></expr></range></decl></init>)</control> <block pos:start="231:33" pos:end="233:5">{<block_content pos:start="232:7" pos:end="232:59">
      <expr_stmt pos:start="232:7" pos:end="232:59"><expr pos:start="232:7" pos:end="232:58"><call pos:start="232:7" pos:end="232:58"><name pos:start="232:7" pos:end="232:19"><name pos:start="232:7" pos:end="232:12">result</name><operator pos:start="232:13" pos:end="232:13">.</operator><name pos:start="232:14" pos:end="232:19">append</name></name><argument_list pos:start="232:20" pos:end="232:58">(<argument pos:start="232:21" pos:end="232:57"><expr pos:start="232:21" pos:end="232:57"><call pos:start="232:21" pos:end="232:44"><name pos:start="232:21" pos:end="232:36"><name pos:start="232:21" pos:end="232:24">Long</name><operator pos:start="232:25" pos:end="232:25">.</operator><name pos:start="232:26" pos:end="232:36">toHexString</name></name><argument_list pos:start="232:37" pos:end="232:44">(<argument pos:start="232:38" pos:end="232:43"><expr pos:start="232:38" pos:end="232:43"><name pos:start="232:38" pos:end="232:43">number</name></expr></argument>)</argument_list></call><operator pos:start="232:45" pos:end="232:45">.</operator><call pos:start="232:46" pos:end="232:57"><name pos:start="232:46" pos:end="232:54">substring</name><argument_list pos:start="232:55" pos:end="232:57">(<argument pos:start="232:56" pos:end="232:56"><expr pos:start="232:56" pos:end="232:56"><literal type="number" pos:start="232:56" pos:end="232:56">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return pos:start="235:5" pos:end="235:29">return <expr pos:start="235:12" pos:end="235:28"><call pos:start="235:12" pos:end="235:28"><name pos:start="235:12" pos:end="235:26"><name pos:start="235:12" pos:end="235:17">result</name><operator pos:start="235:18" pos:end="235:18">.</operator><name pos:start="235:19" pos:end="235:26">toString</name></name><argument_list pos:start="235:27" pos:end="235:28">()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function pos:start="238:3" pos:end="245:3"><type pos:start="238:3" pos:end="238:19"><specifier pos:start="238:3" pos:end="238:8">public</specifier> <specifier pos:start="238:10" pos:end="238:15">static</specifier> <name pos:start="238:17" pos:end="238:19">int</name></type> <name pos:start="238:21" pos:end="238:31">checkedCast</name><parameter_list pos:start="238:32" pos:end="238:43">(<parameter pos:start="238:33" pos:end="238:42"><decl pos:start="238:33" pos:end="238:42"><type pos:start="238:33" pos:end="238:36"><name pos:start="238:33" pos:end="238:36">long</name></type> <name pos:start="238:38" pos:end="238:42">value</name></decl></parameter>)</parameter_list> <block pos:start="238:45" pos:end="245:3">{<block_content pos:start="239:5" pos:end="244:18">
    <decl_stmt pos:start="239:5" pos:end="239:29"><decl pos:start="239:5" pos:end="239:28"><type pos:start="239:5" pos:end="239:7"><name pos:start="239:5" pos:end="239:7">int</name></type> <name pos:start="239:9" pos:end="239:14">result</name> <init pos:start="239:16" pos:end="239:28">= <expr pos:start="239:18" pos:end="239:28"><operator pos:start="239:18" pos:end="239:18">(</operator><name pos:start="239:19" pos:end="239:21">int</name><operator pos:start="239:22" pos:end="239:22">)</operator> <name pos:start="239:24" pos:end="239:28">value</name></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="240:5" pos:end="243:5"><if pos:start="240:5" pos:end="243:5">if <condition pos:start="240:8" pos:end="240:24">(<expr pos:start="240:9" pos:end="240:23"><name pos:start="240:9" pos:end="240:14">result</name> <operator pos:start="240:16" pos:end="240:17">!=</operator> <name pos:start="240:19" pos:end="240:23">value</name></expr>)</condition> <block pos:start="240:26" pos:end="243:5">{<block_content pos:start="242:7" pos:end="242:67">
      <comment type="line" pos:start="241:7" pos:end="241:54">// don't use checkArgument here, to avoid boxing</comment>
      <throw pos:start="242:7" pos:end="242:67">throw <expr pos:start="242:13" pos:end="242:66"><operator pos:start="242:13" pos:end="242:15">new</operator> <call pos:start="242:17" pos:end="242:66"><name pos:start="242:17" pos:end="242:40">IllegalArgumentException</name><argument_list pos:start="242:41" pos:end="242:66">(<argument pos:start="242:42" pos:end="242:65"><expr pos:start="242:42" pos:end="242:65"><literal type="string" pos:start="242:42" pos:end="242:57">"Out of range: "</literal> <operator pos:start="242:59" pos:end="242:59">+</operator> <name pos:start="242:61" pos:end="242:65">value</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <return pos:start="244:5" pos:end="244:18">return <expr pos:start="244:12" pos:end="244:17"><name pos:start="244:12" pos:end="244:17">result</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" pos:start="247:3" pos:end="247:23">/* Private methods */</comment>

  <function pos:start="249:3" pos:end="311:3"><type pos:start="249:3" pos:end="249:16"><specifier pos:start="249:3" pos:end="249:9">private</specifier> <name pos:start="249:11" pos:end="249:16">String</name></type> <name pos:start="249:18" pos:end="249:24">_encode</name><parameter_list pos:start="249:25" pos:end="249:41">(<parameter pos:start="249:26" pos:end="249:40"><decl pos:start="249:26" pos:end="249:40"><type pos:start="249:26" pos:end="249:32"><name pos:start="249:26" pos:end="249:29">long</name><modifier pos:start="249:30" pos:end="249:32">...</modifier></type> <name pos:start="249:34" pos:end="249:40">numbers</name></decl></parameter>)</parameter_list> <block pos:start="249:43" pos:end="311:3">{<block_content pos:start="250:5" pos:end="310:19">
    <decl_stmt pos:start="250:5" pos:end="250:27"><decl pos:start="250:5" pos:end="250:26"><type pos:start="250:5" pos:end="250:8"><name pos:start="250:5" pos:end="250:8">long</name></type> <name pos:start="250:10" pos:end="250:22">numberHashInt</name> <init pos:start="250:24" pos:end="250:26">= <expr pos:start="250:26" pos:end="250:26"><literal type="number" pos:start="250:26" pos:end="250:26">0</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="251:5" pos:end="253:5">for <control pos:start="251:9" pos:end="251:44">(<init pos:start="251:10" pos:end="251:19"><decl pos:start="251:10" pos:end="251:18"><type pos:start="251:10" pos:end="251:12"><name pos:start="251:10" pos:end="251:12">int</name></type> <name pos:start="251:14" pos:end="251:14">i</name> <init pos:start="251:16" pos:end="251:18">= <expr pos:start="251:18" pos:end="251:18"><literal type="number" pos:start="251:18" pos:end="251:18">0</literal></expr></init></decl>;</init> <condition pos:start="251:21" pos:end="251:39"><expr pos:start="251:21" pos:end="251:38"><name pos:start="251:21" pos:end="251:21">i</name> <operator pos:start="251:23" pos:end="251:23">&lt;</operator> <name pos:start="251:25" pos:end="251:38"><name pos:start="251:25" pos:end="251:31">numbers</name><operator pos:start="251:32" pos:end="251:32">.</operator><name pos:start="251:33" pos:end="251:38">length</name></name></expr>;</condition> <incr pos:start="251:41" pos:end="251:43"><expr pos:start="251:41" pos:end="251:43"><name pos:start="251:41" pos:end="251:41">i</name><operator pos:start="251:42" pos:end="251:43">++</operator></expr></incr>)</control> <block pos:start="251:46" pos:end="253:5">{<block_content pos:start="252:7" pos:end="252:48">
      <expr_stmt pos:start="252:7" pos:end="252:48"><expr pos:start="252:7" pos:end="252:47"><name pos:start="252:7" pos:end="252:19">numberHashInt</name> <operator pos:start="252:21" pos:end="252:22">+=</operator> <operator pos:start="252:24" pos:end="252:24">(</operator><name pos:start="252:25" pos:end="252:34"><name pos:start="252:25" pos:end="252:31">numbers</name><index pos:start="252:32" pos:end="252:34">[<expr pos:start="252:33" pos:end="252:33"><name pos:start="252:33" pos:end="252:33">i</name></expr>]</index></name> <operator pos:start="252:36" pos:end="252:36">%</operator> <operator pos:start="252:38" pos:end="252:38">(</operator><name pos:start="252:39" pos:end="252:39">i</name> <operator pos:start="252:41" pos:end="252:41">+</operator> <literal type="number" pos:start="252:43" pos:end="252:45">100</literal><operator pos:start="252:46" pos:end="252:46">)</operator><operator pos:start="252:47" pos:end="252:47">)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt pos:start="254:5" pos:end="254:36"><decl pos:start="254:5" pos:end="254:35"><type pos:start="254:5" pos:end="254:10"><name pos:start="254:5" pos:end="254:10">String</name></type> <name pos:start="254:12" pos:end="254:19">alphabet</name> <init pos:start="254:21" pos:end="254:35">= <expr pos:start="254:23" pos:end="254:35"><name pos:start="254:23" pos:end="254:35"><name pos:start="254:23" pos:end="254:26">this</name><operator pos:start="254:27" pos:end="254:27">.</operator><name pos:start="254:28" pos:end="254:35">alphabet</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="255:5" pos:end="255:74"><decl pos:start="255:5" pos:end="255:73"><type pos:start="255:5" pos:end="255:8"><name pos:start="255:5" pos:end="255:8">char</name></type> <name pos:start="255:10" pos:end="255:12">ret</name> <init pos:start="255:14" pos:end="255:73">= <expr pos:start="255:16" pos:end="255:73"><call pos:start="255:16" pos:end="255:73"><name pos:start="255:16" pos:end="255:30"><name pos:start="255:16" pos:end="255:23">alphabet</name><operator pos:start="255:24" pos:end="255:24">.</operator><name pos:start="255:25" pos:end="255:30">charAt</name></name><argument_list pos:start="255:31" pos:end="255:73">(<argument pos:start="255:32" pos:end="255:72"><expr pos:start="255:32" pos:end="255:72"><operator pos:start="255:32" pos:end="255:32">(</operator><name pos:start="255:33" pos:end="255:35">int</name><operator pos:start="255:36" pos:end="255:36">)</operator> <operator pos:start="255:38" pos:end="255:38">(</operator><name pos:start="255:39" pos:end="255:51">numberHashInt</name> <operator pos:start="255:53" pos:end="255:53">%</operator> <call pos:start="255:55" pos:end="255:71"><name pos:start="255:55" pos:end="255:69"><name pos:start="255:55" pos:end="255:62">alphabet</name><operator pos:start="255:63" pos:end="255:63">.</operator><name pos:start="255:64" pos:end="255:69">length</name></name><argument_list pos:start="255:70" pos:end="255:71">()</argument_list></call><operator pos:start="255:72" pos:end="255:72">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:start="256:5" pos:end="256:26">// char lottery = ret;</comment>
    <decl_stmt pos:start="257:5" pos:end="257:13"><decl pos:start="257:5" pos:end="257:12"><type pos:start="257:5" pos:end="257:8"><name pos:start="257:5" pos:end="257:8">long</name></type> <name pos:start="257:10" pos:end="257:12">num</name></decl>;</decl_stmt>
    <decl_stmt pos:start="258:5" pos:end="258:31"><decl pos:start="258:5" pos:end="258:18"><type pos:start="258:5" pos:end="258:8"><name pos:start="258:5" pos:end="258:8">long</name></type> <name pos:start="258:10" pos:end="258:18">sepsIndex</name></decl>, <decl pos:start="258:21" pos:end="258:30"><type ref="prev" pos:start="258:5" pos:end="258:8"/><name pos:start="258:21" pos:end="258:30">guardIndex</name></decl>;</decl_stmt>
    <decl_stmt pos:start="259:5" pos:end="259:18"><decl pos:start="259:5" pos:end="259:17"><type pos:start="259:5" pos:end="259:10"><name pos:start="259:5" pos:end="259:10">String</name></type> <name pos:start="259:12" pos:end="259:17">buffer</name></decl>;</decl_stmt>
    <decl_stmt pos:start="260:5" pos:end="260:62"><decl pos:start="260:5" pos:end="260:61"><type pos:start="260:5" pos:end="260:17"><name pos:start="260:5" pos:end="260:17">StringBuilder</name></type> <name pos:start="260:19" pos:end="260:26">ret_strB</name> <init pos:start="260:28" pos:end="260:61">= <expr pos:start="260:30" pos:end="260:61"><operator pos:start="260:30" pos:end="260:32">new</operator> <call pos:start="260:34" pos:end="260:61"><name pos:start="260:34" pos:end="260:46">StringBuilder</name><argument_list pos:start="260:47" pos:end="260:61">(<argument pos:start="260:48" pos:end="260:60"><expr pos:start="260:48" pos:end="260:60"><name pos:start="260:48" pos:end="260:60">minHashLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="261:5" pos:end="261:25"><expr pos:start="261:5" pos:end="261:24"><call pos:start="261:5" pos:end="261:24"><name pos:start="261:5" pos:end="261:19"><name pos:start="261:5" pos:end="261:12">ret_strB</name><operator pos:start="261:13" pos:end="261:13">.</operator><name pos:start="261:14" pos:end="261:19">append</name></name><argument_list pos:start="261:20" pos:end="261:24">(<argument pos:start="261:21" pos:end="261:23"><expr pos:start="261:21" pos:end="261:23"><name pos:start="261:21" pos:end="261:23">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="262:5" pos:end="262:15"><decl pos:start="262:5" pos:end="262:14"><type pos:start="262:5" pos:end="262:8"><name pos:start="262:5" pos:end="262:8">char</name></type> <name pos:start="262:10" pos:end="262:14">guard</name></decl>;</decl_stmt>

    <for pos:start="264:5" pos:end="282:5">for <control pos:start="264:9" pos:end="264:44">(<init pos:start="264:10" pos:end="264:19"><decl pos:start="264:10" pos:end="264:18"><type pos:start="264:10" pos:end="264:12"><name pos:start="264:10" pos:end="264:12">int</name></type> <name pos:start="264:14" pos:end="264:14">i</name> <init pos:start="264:16" pos:end="264:18">= <expr pos:start="264:18" pos:end="264:18"><literal type="number" pos:start="264:18" pos:end="264:18">0</literal></expr></init></decl>;</init> <condition pos:start="264:21" pos:end="264:39"><expr pos:start="264:21" pos:end="264:38"><name pos:start="264:21" pos:end="264:21">i</name> <operator pos:start="264:23" pos:end="264:23">&lt;</operator> <name pos:start="264:25" pos:end="264:38"><name pos:start="264:25" pos:end="264:31">numbers</name><operator pos:start="264:32" pos:end="264:32">.</operator><name pos:start="264:33" pos:end="264:38">length</name></name></expr>;</condition> <incr pos:start="264:41" pos:end="264:43"><expr pos:start="264:41" pos:end="264:43"><name pos:start="264:41" pos:end="264:41">i</name><operator pos:start="264:42" pos:end="264:43">++</operator></expr></incr>)</control> <block pos:start="264:46" pos:end="282:5">{<block_content pos:start="265:7" pos:end="281:7">
      <expr_stmt pos:start="265:7" pos:end="265:23"><expr pos:start="265:7" pos:end="265:22"><name pos:start="265:7" pos:end="265:9">num</name> <operator pos:start="265:11" pos:end="265:11">=</operator> <name pos:start="265:13" pos:end="265:22"><name pos:start="265:13" pos:end="265:19">numbers</name><index pos:start="265:20" pos:end="265:22">[<expr pos:start="265:21" pos:end="265:21"><name pos:start="265:21" pos:end="265:21">i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt pos:start="266:7" pos:end="266:42"><expr pos:start="266:7" pos:end="266:41"><name pos:start="266:7" pos:end="266:12">buffer</name> <operator pos:start="266:14" pos:end="266:14">=</operator> <name pos:start="266:16" pos:end="266:18">ret</name> <operator pos:start="266:20" pos:end="266:20">+</operator> <name pos:start="266:22" pos:end="266:30"><name pos:start="266:22" pos:end="266:25">this</name><operator pos:start="266:26" pos:end="266:26">.</operator><name pos:start="266:27" pos:end="266:30">salt</name></name> <operator pos:start="266:32" pos:end="266:32">+</operator> <name pos:start="266:34" pos:end="266:41">alphabet</name></expr>;</expr_stmt>

      <expr_stmt pos:start="268:7" pos:end="268:93"><expr pos:start="268:7" pos:end="268:92"><name pos:start="268:7" pos:end="268:14">alphabet</name> <operator pos:start="268:16" pos:end="268:16">=</operator> <call pos:start="268:18" pos:end="268:92"><name pos:start="268:18" pos:end="268:42"><name pos:start="268:18" pos:end="268:24">Hashids</name><operator pos:start="268:25" pos:end="268:25">.</operator><name pos:start="268:26" pos:end="268:42">consistentShuffle</name></name><argument_list pos:start="268:43" pos:end="268:92">(<argument pos:start="268:44" pos:end="268:51"><expr pos:start="268:44" pos:end="268:51"><name pos:start="268:44" pos:end="268:51">alphabet</name></expr></argument>, <argument pos:start="268:54" pos:end="268:91"><expr pos:start="268:54" pos:end="268:91"><call pos:start="268:54" pos:end="268:91"><name pos:start="268:54" pos:end="268:69"><name pos:start="268:54" pos:end="268:59">buffer</name><operator pos:start="268:60" pos:end="268:60">.</operator><name pos:start="268:61" pos:end="268:69">substring</name></name><argument_list pos:start="268:70" pos:end="268:91">(<argument pos:start="268:71" pos:end="268:71"><expr pos:start="268:71" pos:end="268:71"><literal type="number" pos:start="268:71" pos:end="268:71">0</literal></expr></argument>, <argument pos:start="268:74" pos:end="268:90"><expr pos:start="268:74" pos:end="268:90"><call pos:start="268:74" pos:end="268:90"><name pos:start="268:74" pos:end="268:88"><name pos:start="268:74" pos:end="268:81">alphabet</name><operator pos:start="268:82" pos:end="268:82">.</operator><name pos:start="268:83" pos:end="268:88">length</name></name><argument_list pos:start="268:89" pos:end="268:90">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt pos:start="269:7" pos:end="269:48"><decl pos:start="269:7" pos:end="269:47"><type pos:start="269:7" pos:end="269:12"><name pos:start="269:7" pos:end="269:12">String</name></type> <name pos:start="269:14" pos:end="269:17">last</name> <init pos:start="269:19" pos:end="269:47">= <expr pos:start="269:21" pos:end="269:47"><call pos:start="269:21" pos:end="269:47"><name pos:start="269:21" pos:end="269:32"><name pos:start="269:21" pos:end="269:27">Hashids</name><operator pos:start="269:28" pos:end="269:28">.</operator><name pos:start="269:29" pos:end="269:32">hash</name></name><argument_list pos:start="269:33" pos:end="269:47">(<argument pos:start="269:34" pos:end="269:36"><expr pos:start="269:34" pos:end="269:36"><name pos:start="269:34" pos:end="269:36">num</name></expr></argument>, <argument pos:start="269:39" pos:end="269:46"><expr pos:start="269:39" pos:end="269:46"><name pos:start="269:39" pos:end="269:46">alphabet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt pos:start="271:7" pos:end="271:28"><expr pos:start="271:7" pos:end="271:27"><call pos:start="271:7" pos:end="271:27"><name pos:start="271:7" pos:end="271:21"><name pos:start="271:7" pos:end="271:14">ret_strB</name><operator pos:start="271:15" pos:end="271:15">.</operator><name pos:start="271:16" pos:end="271:21">append</name></name><argument_list pos:start="271:22" pos:end="271:27">(<argument pos:start="271:23" pos:end="271:26"><expr pos:start="271:23" pos:end="271:26"><name pos:start="271:23" pos:end="271:26">last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt pos:start="273:7" pos:end="281:7"><if pos:start="273:7" pos:end="281:7">if <condition pos:start="273:10" pos:end="273:33">(<expr pos:start="273:11" pos:end="273:32"><name pos:start="273:11" pos:end="273:11">i</name> <operator pos:start="273:13" pos:end="273:13">+</operator> <literal type="number" pos:start="273:15" pos:end="273:15">1</literal> <operator pos:start="273:17" pos:end="273:17">&lt;</operator> <name pos:start="273:19" pos:end="273:32"><name pos:start="273:19" pos:end="273:25">numbers</name><operator pos:start="273:26" pos:end="273:26">.</operator><name pos:start="273:27" pos:end="273:32">length</name></name></expr>)</condition> <block pos:start="273:35" pos:end="281:7">{<block_content pos:start="274:9" pos:end="280:59">
        <if_stmt pos:start="274:9" pos:end="279:9"><if pos:start="274:9" pos:end="277:9">if<condition pos:start="274:11" pos:end="274:29">(<expr pos:start="274:12" pos:end="274:28"><call pos:start="274:12" pos:end="274:24"><name pos:start="274:12" pos:end="274:22"><name pos:start="274:12" pos:end="274:15">last</name><operator pos:start="274:16" pos:end="274:16">.</operator><name pos:start="274:17" pos:end="274:22">length</name></name><argument_list pos:start="274:23" pos:end="274:24">()</argument_list></call> <operator pos:start="274:26" pos:end="274:26">&gt;</operator> <literal type="number" pos:start="274:28" pos:end="274:28">0</literal></expr>)</condition> <block pos:start="274:31" pos:end="277:9">{<block_content pos:start="275:11" pos:end="276:55">
          <expr_stmt pos:start="275:11" pos:end="275:44"><expr pos:start="275:11" pos:end="275:43"><name pos:start="275:11" pos:end="275:13">num</name> <operator pos:start="275:15" pos:end="275:16">%=</operator> <operator pos:start="275:18" pos:end="275:18">(</operator><operator pos:start="275:19" pos:end="275:19">(</operator><name pos:start="275:20" pos:end="275:22">int</name><operator pos:start="275:23" pos:end="275:23">)</operator> <call pos:start="275:25" pos:end="275:38"><name pos:start="275:25" pos:end="275:35"><name pos:start="275:25" pos:end="275:28">last</name><operator pos:start="275:29" pos:end="275:29">.</operator><name pos:start="275:30" pos:end="275:35">charAt</name></name><argument_list pos:start="275:36" pos:end="275:38">(<argument pos:start="275:37" pos:end="275:37"><expr pos:start="275:37" pos:end="275:37"><literal type="number" pos:start="275:37" pos:end="275:37">0</literal></expr></argument>)</argument_list></call> <operator pos:start="275:40" pos:end="275:40">+</operator> <name pos:start="275:42" pos:end="275:42">i</name><operator pos:start="275:43" pos:end="275:43">)</operator></expr>;</expr_stmt>
          <expr_stmt pos:start="276:11" pos:end="276:55"><expr pos:start="276:11" pos:end="276:54"><name pos:start="276:11" pos:end="276:19">sepsIndex</name> <operator pos:start="276:21" pos:end="276:21">=</operator> <operator pos:start="276:23" pos:end="276:23">(</operator><name pos:start="276:24" pos:end="276:26">int</name><operator pos:start="276:27" pos:end="276:27">)</operator> <operator pos:start="276:29" pos:end="276:29">(</operator><name pos:start="276:30" pos:end="276:32">num</name> <operator pos:start="276:34" pos:end="276:34">%</operator> <call pos:start="276:36" pos:end="276:53"><name pos:start="276:36" pos:end="276:51"><name pos:start="276:36" pos:end="276:39">this</name><operator pos:start="276:40" pos:end="276:40">.</operator><name pos:start="276:41" pos:end="276:44">seps</name><operator pos:start="276:45" pos:end="276:45">.</operator><name pos:start="276:46" pos:end="276:51">length</name></name><argument_list pos:start="276:52" pos:end="276:53">()</argument_list></call><operator pos:start="276:54" pos:end="276:54">)</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="277:11" pos:end="279:9">else <block pos:start="277:16" pos:end="279:9">{<block_content pos:start="278:11" pos:end="278:24">
          <expr_stmt pos:start="278:11" pos:end="278:24"><expr pos:start="278:11" pos:end="278:23"><name pos:start="278:11" pos:end="278:19">sepsIndex</name> <operator pos:start="278:21" pos:end="278:21">=</operator> <literal type="number" pos:start="278:23" pos:end="278:23">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="280:9" pos:end="280:59"><expr pos:start="280:9" pos:end="280:58"><call pos:start="280:9" pos:end="280:58"><name pos:start="280:9" pos:end="280:23"><name pos:start="280:9" pos:end="280:16">ret_strB</name><operator pos:start="280:17" pos:end="280:17">.</operator><name pos:start="280:18" pos:end="280:23">append</name></name><argument_list pos:start="280:24" pos:end="280:58">(<argument pos:start="280:25" pos:end="280:57"><expr pos:start="280:25" pos:end="280:57"><call pos:start="280:25" pos:end="280:57"><name pos:start="280:25" pos:end="280:40"><name pos:start="280:25" pos:end="280:28">this</name><operator pos:start="280:29" pos:end="280:29">.</operator><name pos:start="280:30" pos:end="280:33">seps</name><operator pos:start="280:34" pos:end="280:34">.</operator><name pos:start="280:35" pos:end="280:40">charAt</name></name><argument_list pos:start="280:41" pos:end="280:57">(<argument pos:start="280:42" pos:end="280:56"><expr pos:start="280:42" pos:end="280:56"><operator pos:start="280:42" pos:end="280:42">(</operator><name pos:start="280:43" pos:end="280:45">int</name><operator pos:start="280:46" pos:end="280:46">)</operator> <name pos:start="280:48" pos:end="280:56">sepsIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt pos:start="284:5" pos:end="284:41"><decl pos:start="284:5" pos:end="284:40"><type pos:start="284:5" pos:end="284:10"><name pos:start="284:5" pos:end="284:10">String</name></type> <name pos:start="284:12" pos:end="284:18">ret_str</name> <init pos:start="284:20" pos:end="284:40">= <expr pos:start="284:22" pos:end="284:40"><call pos:start="284:22" pos:end="284:40"><name pos:start="284:22" pos:end="284:38"><name pos:start="284:22" pos:end="284:29">ret_strB</name><operator pos:start="284:30" pos:end="284:30">.</operator><name pos:start="284:31" pos:end="284:38">toString</name></name><argument_list pos:start="284:39" pos:end="284:40">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="285:5" pos:end="297:5"><if pos:start="285:5" pos:end="297:5">if <condition pos:start="285:8" pos:end="285:46">(<expr pos:start="285:9" pos:end="285:45"><call pos:start="285:9" pos:end="285:24"><name pos:start="285:9" pos:end="285:22"><name pos:start="285:9" pos:end="285:15">ret_str</name><operator pos:start="285:16" pos:end="285:16">.</operator><name pos:start="285:17" pos:end="285:22">length</name></name><argument_list pos:start="285:23" pos:end="285:24">()</argument_list></call> <operator pos:start="285:26" pos:end="285:26">&lt;</operator> <name pos:start="285:28" pos:end="285:45"><name pos:start="285:28" pos:end="285:31">this</name><operator pos:start="285:32" pos:end="285:32">.</operator><name pos:start="285:33" pos:end="285:45">minHashLength</name></name></expr>)</condition> <block pos:start="285:48" pos:end="297:5">{<block_content pos:start="286:7" pos:end="296:7">
      <expr_stmt pos:start="286:7" pos:end="286:86"><expr pos:start="286:7" pos:end="286:85"><name pos:start="286:7" pos:end="286:16">guardIndex</name> <operator pos:start="286:18" pos:end="286:18">=</operator> <operator pos:start="286:20" pos:end="286:20">(</operator><name pos:start="286:21" pos:end="286:33">numberHashInt</name> <operator pos:start="286:35" pos:end="286:35">+</operator> <operator pos:start="286:37" pos:end="286:37">(</operator><name pos:start="286:38" pos:end="286:40">int</name><operator pos:start="286:41" pos:end="286:41">)</operator> <operator pos:start="286:43" pos:end="286:43">(</operator><call pos:start="286:44" pos:end="286:60"><name pos:start="286:44" pos:end="286:57"><name pos:start="286:44" pos:end="286:50">ret_str</name><operator pos:start="286:51" pos:end="286:51">.</operator><name pos:start="286:52" pos:end="286:57">charAt</name></name><argument_list pos:start="286:58" pos:end="286:60">(<argument pos:start="286:59" pos:end="286:59"><expr pos:start="286:59" pos:end="286:59"><literal type="number" pos:start="286:59" pos:end="286:59">0</literal></expr></argument>)</argument_list></call><operator pos:start="286:61" pos:end="286:61">)</operator><operator pos:start="286:62" pos:end="286:62">)</operator> <operator pos:start="286:64" pos:end="286:64">%</operator> <call pos:start="286:66" pos:end="286:85"><name pos:start="286:66" pos:end="286:83"><name pos:start="286:66" pos:end="286:69">this</name><operator pos:start="286:70" pos:end="286:70">.</operator><name pos:start="286:71" pos:end="286:76">guards</name><operator pos:start="286:77" pos:end="286:77">.</operator><name pos:start="286:78" pos:end="286:83">length</name></name><argument_list pos:start="286:84" pos:end="286:85">()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="287:7" pos:end="287:51"><expr pos:start="287:7" pos:end="287:50"><name pos:start="287:7" pos:end="287:11">guard</name> <operator pos:start="287:13" pos:end="287:13">=</operator> <call pos:start="287:15" pos:end="287:50"><name pos:start="287:15" pos:end="287:32"><name pos:start="287:15" pos:end="287:18">this</name><operator pos:start="287:19" pos:end="287:19">.</operator><name pos:start="287:20" pos:end="287:25">guards</name><operator pos:start="287:26" pos:end="287:26">.</operator><name pos:start="287:27" pos:end="287:32">charAt</name></name><argument_list pos:start="287:33" pos:end="287:50">(<argument pos:start="287:34" pos:end="287:49"><expr pos:start="287:34" pos:end="287:49"><operator pos:start="287:34" pos:end="287:34">(</operator><name pos:start="287:35" pos:end="287:37">int</name><operator pos:start="287:38" pos:end="287:38">)</operator> <name pos:start="287:40" pos:end="287:49">guardIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="289:7" pos:end="289:32"><expr pos:start="289:7" pos:end="289:31"><name pos:start="289:7" pos:end="289:13">ret_str</name> <operator pos:start="289:15" pos:end="289:15">=</operator> <name pos:start="289:17" pos:end="289:21">guard</name> <operator pos:start="289:23" pos:end="289:23">+</operator> <name pos:start="289:25" pos:end="289:31">ret_str</name></expr>;</expr_stmt>

      <if_stmt pos:start="291:7" pos:end="296:7"><if pos:start="291:7" pos:end="296:7">if <condition pos:start="291:10" pos:end="291:48">(<expr pos:start="291:11" pos:end="291:47"><call pos:start="291:11" pos:end="291:26"><name pos:start="291:11" pos:end="291:24"><name pos:start="291:11" pos:end="291:17">ret_str</name><operator pos:start="291:18" pos:end="291:18">.</operator><name pos:start="291:19" pos:end="291:24">length</name></name><argument_list pos:start="291:25" pos:end="291:26">()</argument_list></call> <operator pos:start="291:28" pos:end="291:28">&lt;</operator> <name pos:start="291:30" pos:end="291:47"><name pos:start="291:30" pos:end="291:33">this</name><operator pos:start="291:34" pos:end="291:34">.</operator><name pos:start="291:35" pos:end="291:47">minHashLength</name></name></expr>)</condition> <block pos:start="291:50" pos:end="296:7">{<block_content pos:start="292:9" pos:end="295:25">
        <expr_stmt pos:start="292:9" pos:end="292:88"><expr pos:start="292:9" pos:end="292:87"><name pos:start="292:9" pos:end="292:18">guardIndex</name> <operator pos:start="292:20" pos:end="292:20">=</operator> <operator pos:start="292:22" pos:end="292:22">(</operator><name pos:start="292:23" pos:end="292:35">numberHashInt</name> <operator pos:start="292:37" pos:end="292:37">+</operator> <operator pos:start="292:39" pos:end="292:39">(</operator><name pos:start="292:40" pos:end="292:42">int</name><operator pos:start="292:43" pos:end="292:43">)</operator> <operator pos:start="292:45" pos:end="292:45">(</operator><call pos:start="292:46" pos:end="292:62"><name pos:start="292:46" pos:end="292:59"><name pos:start="292:46" pos:end="292:52">ret_str</name><operator pos:start="292:53" pos:end="292:53">.</operator><name pos:start="292:54" pos:end="292:59">charAt</name></name><argument_list pos:start="292:60" pos:end="292:62">(<argument pos:start="292:61" pos:end="292:61"><expr pos:start="292:61" pos:end="292:61"><literal type="number" pos:start="292:61" pos:end="292:61">2</literal></expr></argument>)</argument_list></call><operator pos:start="292:63" pos:end="292:63">)</operator><operator pos:start="292:64" pos:end="292:64">)</operator> <operator pos:start="292:66" pos:end="292:66">%</operator> <call pos:start="292:68" pos:end="292:87"><name pos:start="292:68" pos:end="292:85"><name pos:start="292:68" pos:end="292:71">this</name><operator pos:start="292:72" pos:end="292:72">.</operator><name pos:start="292:73" pos:end="292:78">guards</name><operator pos:start="292:79" pos:end="292:79">.</operator><name pos:start="292:80" pos:end="292:85">length</name></name><argument_list pos:start="292:86" pos:end="292:87">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="293:9" pos:end="293:53"><expr pos:start="293:9" pos:end="293:52"><name pos:start="293:9" pos:end="293:13">guard</name> <operator pos:start="293:15" pos:end="293:15">=</operator> <call pos:start="293:17" pos:end="293:52"><name pos:start="293:17" pos:end="293:34"><name pos:start="293:17" pos:end="293:20">this</name><operator pos:start="293:21" pos:end="293:21">.</operator><name pos:start="293:22" pos:end="293:27">guards</name><operator pos:start="293:28" pos:end="293:28">.</operator><name pos:start="293:29" pos:end="293:34">charAt</name></name><argument_list pos:start="293:35" pos:end="293:52">(<argument pos:start="293:36" pos:end="293:51"><expr pos:start="293:36" pos:end="293:51"><operator pos:start="293:36" pos:end="293:36">(</operator><name pos:start="293:37" pos:end="293:39">int</name><operator pos:start="293:40" pos:end="293:40">)</operator> <name pos:start="293:42" pos:end="293:51">guardIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:25"><expr pos:start="295:9" pos:end="295:24"><name pos:start="295:9" pos:end="295:15">ret_str</name> <operator pos:start="295:17" pos:end="295:18">+=</operator> <name pos:start="295:20" pos:end="295:24">guard</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="299:5" pos:end="299:40"><decl pos:start="299:5" pos:end="299:39"><type pos:start="299:5" pos:end="299:7"><name pos:start="299:5" pos:end="299:7">int</name></type> <name pos:start="299:9" pos:end="299:15">halfLen</name> <init pos:start="299:17" pos:end="299:39">= <expr pos:start="299:19" pos:end="299:39"><call pos:start="299:19" pos:end="299:35"><name pos:start="299:19" pos:end="299:33"><name pos:start="299:19" pos:end="299:26">alphabet</name><operator pos:start="299:27" pos:end="299:27">.</operator><name pos:start="299:28" pos:end="299:33">length</name></name><argument_list pos:start="299:34" pos:end="299:35">()</argument_list></call> <operator pos:start="299:37" pos:end="299:37">/</operator> <literal type="number" pos:start="299:39" pos:end="299:39">2</literal></expr></init></decl>;</decl_stmt>
    <while pos:start="300:5" pos:end="308:5">while <condition pos:start="300:11" pos:end="300:49">(<expr pos:start="300:12" pos:end="300:48"><call pos:start="300:12" pos:end="300:27"><name pos:start="300:12" pos:end="300:25"><name pos:start="300:12" pos:end="300:18">ret_str</name><operator pos:start="300:19" pos:end="300:19">.</operator><name pos:start="300:20" pos:end="300:25">length</name></name><argument_list pos:start="300:26" pos:end="300:27">()</argument_list></call> <operator pos:start="300:29" pos:end="300:29">&lt;</operator> <name pos:start="300:31" pos:end="300:48"><name pos:start="300:31" pos:end="300:34">this</name><operator pos:start="300:35" pos:end="300:35">.</operator><name pos:start="300:36" pos:end="300:48">minHashLength</name></name></expr>)</condition> <block pos:start="300:51" pos:end="308:5">{<block_content pos:start="301:7" pos:end="307:7">
      <expr_stmt pos:start="301:7" pos:end="301:63"><expr pos:start="301:7" pos:end="301:62"><name pos:start="301:7" pos:end="301:14">alphabet</name> <operator pos:start="301:16" pos:end="301:16">=</operator> <call pos:start="301:18" pos:end="301:62"><name pos:start="301:18" pos:end="301:42"><name pos:start="301:18" pos:end="301:24">Hashids</name><operator pos:start="301:25" pos:end="301:25">.</operator><name pos:start="301:26" pos:end="301:42">consistentShuffle</name></name><argument_list pos:start="301:43" pos:end="301:62">(<argument pos:start="301:44" pos:end="301:51"><expr pos:start="301:44" pos:end="301:51"><name pos:start="301:44" pos:end="301:51">alphabet</name></expr></argument>, <argument pos:start="301:54" pos:end="301:61"><expr pos:start="301:54" pos:end="301:61"><name pos:start="301:54" pos:end="301:61">alphabet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="302:7" pos:end="302:87"><expr pos:start="302:7" pos:end="302:86"><name pos:start="302:7" pos:end="302:13">ret_str</name> <operator pos:start="302:15" pos:end="302:15">=</operator> <call pos:start="302:17" pos:end="302:43"><name pos:start="302:17" pos:end="302:34"><name pos:start="302:17" pos:end="302:24">alphabet</name><operator pos:start="302:25" pos:end="302:25">.</operator><name pos:start="302:26" pos:end="302:34">substring</name></name><argument_list pos:start="302:35" pos:end="302:43">(<argument pos:start="302:36" pos:end="302:42"><expr pos:start="302:36" pos:end="302:42"><name pos:start="302:36" pos:end="302:42">halfLen</name></expr></argument>)</argument_list></call> <operator pos:start="302:45" pos:end="302:45">+</operator> <name pos:start="302:47" pos:end="302:53">ret_str</name> <operator pos:start="302:55" pos:end="302:55">+</operator> <call pos:start="302:57" pos:end="302:86"><name pos:start="302:57" pos:end="302:74"><name pos:start="302:57" pos:end="302:64">alphabet</name><operator pos:start="302:65" pos:end="302:65">.</operator><name pos:start="302:66" pos:end="302:74">substring</name></name><argument_list pos:start="302:75" pos:end="302:86">(<argument pos:start="302:76" pos:end="302:76"><expr pos:start="302:76" pos:end="302:76"><literal type="number" pos:start="302:76" pos:end="302:76">0</literal></expr></argument>, <argument pos:start="302:79" pos:end="302:85"><expr pos:start="302:79" pos:end="302:85"><name pos:start="302:79" pos:end="302:85">halfLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt pos:start="303:7" pos:end="303:57"><decl pos:start="303:7" pos:end="303:56"><type pos:start="303:7" pos:end="303:9"><name pos:start="303:7" pos:end="303:9">int</name></type> <name pos:start="303:11" pos:end="303:16">excess</name> <init pos:start="303:18" pos:end="303:56">= <expr pos:start="303:20" pos:end="303:56"><call pos:start="303:20" pos:end="303:35"><name pos:start="303:20" pos:end="303:33"><name pos:start="303:20" pos:end="303:26">ret_str</name><operator pos:start="303:27" pos:end="303:27">.</operator><name pos:start="303:28" pos:end="303:33">length</name></name><argument_list pos:start="303:34" pos:end="303:35">()</argument_list></call> <operator pos:start="303:37" pos:end="303:37">-</operator> <name pos:start="303:39" pos:end="303:56"><name pos:start="303:39" pos:end="303:42">this</name><operator pos:start="303:43" pos:end="303:43">.</operator><name pos:start="303:44" pos:end="303:56">minHashLength</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="304:7" pos:end="307:7"><if pos:start="304:7" pos:end="307:7">if <condition pos:start="304:10" pos:end="304:21">(<expr pos:start="304:11" pos:end="304:20"><name pos:start="304:11" pos:end="304:16">excess</name> <operator pos:start="304:18" pos:end="304:18">&gt;</operator> <literal type="number" pos:start="304:20" pos:end="304:20">0</literal></expr>)</condition> <block pos:start="304:23" pos:end="307:7">{<block_content pos:start="305:9" pos:end="306:79">
        <decl_stmt pos:start="305:9" pos:end="305:35"><decl pos:start="305:9" pos:end="305:34"><type pos:start="305:9" pos:end="305:11"><name pos:start="305:9" pos:end="305:11">int</name></type> <name pos:start="305:13" pos:end="305:21">start_pos</name> <init pos:start="305:23" pos:end="305:34">= <expr pos:start="305:25" pos:end="305:34"><name pos:start="305:25" pos:end="305:30">excess</name> <operator pos:start="305:32" pos:end="305:32">/</operator> <literal type="number" pos:start="305:34" pos:end="305:34">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="306:9" pos:end="306:79"><expr pos:start="306:9" pos:end="306:78"><name pos:start="306:9" pos:end="306:15">ret_str</name> <operator pos:start="306:17" pos:end="306:17">=</operator> <call pos:start="306:19" pos:end="306:78"><name pos:start="306:19" pos:end="306:35"><name pos:start="306:19" pos:end="306:25">ret_str</name><operator pos:start="306:26" pos:end="306:26">.</operator><name pos:start="306:27" pos:end="306:35">substring</name></name><argument_list pos:start="306:36" pos:end="306:78">(<argument pos:start="306:37" pos:end="306:45"><expr pos:start="306:37" pos:end="306:45"><name pos:start="306:37" pos:end="306:45">start_pos</name></expr></argument>, <argument pos:start="306:48" pos:end="306:77"><expr pos:start="306:48" pos:end="306:77"><name pos:start="306:48" pos:end="306:56">start_pos</name> <operator pos:start="306:58" pos:end="306:58">+</operator> <name pos:start="306:60" pos:end="306:77"><name pos:start="306:60" pos:end="306:63">this</name><operator pos:start="306:64" pos:end="306:64">.</operator><name pos:start="306:65" pos:end="306:77">minHashLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <return pos:start="310:5" pos:end="310:19">return <expr pos:start="310:12" pos:end="310:18"><name pos:start="310:12" pos:end="310:18">ret_str</name></expr>;</return>
  </block_content>}</block></function>

  <function pos:start="313:3" pos:end="355:3"><type pos:start="313:3" pos:end="313:16"><specifier pos:start="313:3" pos:end="313:9">private</specifier> <name pos:start="313:11" pos:end="313:16"><name pos:start="313:11" pos:end="313:14">long</name><index pos:start="313:15" pos:end="313:16">[]</index></name></type> <name pos:start="313:18" pos:end="313:24">_decode</name><parameter_list pos:start="313:25" pos:end="313:54">(<parameter pos:start="313:26" pos:end="313:36"><decl pos:start="313:26" pos:end="313:36"><type pos:start="313:26" pos:end="313:36"><name pos:start="313:26" pos:end="313:31">String</name></type> <name pos:start="313:33" pos:end="313:36">hash</name></decl></parameter>, <parameter pos:start="313:39" pos:end="313:53"><decl pos:start="313:39" pos:end="313:53"><type pos:start="313:39" pos:end="313:53"><name pos:start="313:39" pos:end="313:44">String</name></type> <name pos:start="313:46" pos:end="313:53">alphabet</name></decl></parameter>)</parameter_list> <block pos:start="313:56" pos:end="355:3">{<block_content pos:start="314:5" pos:end="354:15">
    <decl_stmt pos:start="314:5" pos:end="314:48"><decl pos:start="314:5" pos:end="314:47"><type pos:start="314:5" pos:end="314:19"><name pos:start="314:5" pos:end="314:19"><name pos:start="314:5" pos:end="314:13">ArrayList</name><argument_list type="generic" pos:start="314:14" pos:end="314:19">&lt;<argument pos:start="314:15" pos:end="314:18"><name pos:start="314:15" pos:end="314:18">Long</name></argument>&gt;</argument_list></name></type> <name pos:start="314:21" pos:end="314:23">ret</name> <init pos:start="314:25" pos:end="314:47">= <expr pos:start="314:27" pos:end="314:47"><operator pos:start="314:27" pos:end="314:29">new</operator> <call pos:start="314:31" pos:end="314:47"><name pos:start="314:31" pos:end="314:45"><name pos:start="314:31" pos:end="314:39">ArrayList</name><argument_list type="generic" pos:start="314:40" pos:end="314:45">&lt;<argument pos:start="314:41" pos:end="314:44"><name pos:start="314:41" pos:end="314:44">Long</name></argument>&gt;</argument_list></name><argument_list pos:start="314:46" pos:end="314:47">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="316:5" pos:end="316:14"><decl pos:start="316:5" pos:end="316:13"><type pos:start="316:5" pos:end="316:7"><name pos:start="316:5" pos:end="316:7">int</name></type> <name pos:start="316:9" pos:end="316:9">i</name> <init pos:start="316:11" pos:end="316:13">= <expr pos:start="316:13" pos:end="316:13"><literal type="number" pos:start="316:13" pos:end="316:13">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="317:5" pos:end="317:44"><decl pos:start="317:5" pos:end="317:43"><type pos:start="317:5" pos:end="317:10"><name pos:start="317:5" pos:end="317:10">String</name></type> <name pos:start="317:12" pos:end="317:17">regexp</name> <init pos:start="317:19" pos:end="317:43">= <expr pos:start="317:21" pos:end="317:43"><literal type="string" pos:start="317:21" pos:end="317:23">"["</literal> <operator pos:start="317:25" pos:end="317:25">+</operator> <name pos:start="317:27" pos:end="317:37"><name pos:start="317:27" pos:end="317:30">this</name><operator pos:start="317:31" pos:end="317:31">.</operator><name pos:start="317:32" pos:end="317:37">guards</name></name> <operator pos:start="317:39" pos:end="317:39">+</operator> <literal type="string" pos:start="317:41" pos:end="317:43">"]"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="318:5" pos:end="318:56"><decl pos:start="318:5" pos:end="318:55"><type pos:start="318:5" pos:end="318:10"><name pos:start="318:5" pos:end="318:10">String</name></type> <name pos:start="318:12" pos:end="318:24">hashBreakdown</name> <init pos:start="318:26" pos:end="318:55">= <expr pos:start="318:28" pos:end="318:55"><call pos:start="318:28" pos:end="318:55"><name pos:start="318:28" pos:end="318:42"><name pos:start="318:28" pos:end="318:31">hash</name><operator pos:start="318:32" pos:end="318:32">.</operator><name pos:start="318:33" pos:end="318:42">replaceAll</name></name><argument_list pos:start="318:43" pos:end="318:55">(<argument pos:start="318:44" pos:end="318:49"><expr pos:start="318:44" pos:end="318:49"><name pos:start="318:44" pos:end="318:49">regexp</name></expr></argument>, <argument pos:start="318:52" pos:end="318:54"><expr pos:start="318:52" pos:end="318:54"><literal type="string" pos:start="318:52" pos:end="318:54">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="319:5" pos:end="319:50"><decl pos:start="319:5" pos:end="319:49"><type pos:start="319:5" pos:end="319:12"><name pos:start="319:5" pos:end="319:12"><name pos:start="319:5" pos:end="319:10">String</name><index pos:start="319:11" pos:end="319:12">[]</index></name></type> <name pos:start="319:14" pos:end="319:22">hashArray</name> <init pos:start="319:24" pos:end="319:49">= <expr pos:start="319:26" pos:end="319:49"><call pos:start="319:26" pos:end="319:49"><name pos:start="319:26" pos:end="319:44"><name pos:start="319:26" pos:end="319:38">hashBreakdown</name><operator pos:start="319:39" pos:end="319:39">.</operator><name pos:start="319:40" pos:end="319:44">split</name></name><argument_list pos:start="319:45" pos:end="319:49">(<argument pos:start="319:46" pos:end="319:48"><expr pos:start="319:46" pos:end="319:48"><literal type="string" pos:start="319:46" pos:end="319:48">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="321:5" pos:end="323:5"><if pos:start="321:5" pos:end="323:5">if <condition pos:start="321:8" pos:end="321:55">(<expr pos:start="321:9" pos:end="321:54"><name pos:start="321:9" pos:end="321:24"><name pos:start="321:9" pos:end="321:17">hashArray</name><operator pos:start="321:18" pos:end="321:18">.</operator><name pos:start="321:19" pos:end="321:24">length</name></name> <operator pos:start="321:26" pos:end="321:27">==</operator> <literal type="number" pos:start="321:29" pos:end="321:29">3</literal> <operator pos:start="321:31" pos:end="321:32">||</operator> <name pos:start="321:34" pos:end="321:49"><name pos:start="321:34" pos:end="321:42">hashArray</name><operator pos:start="321:43" pos:end="321:43">.</operator><name pos:start="321:44" pos:end="321:49">length</name></name> <operator pos:start="321:51" pos:end="321:52">==</operator> <literal type="number" pos:start="321:54" pos:end="321:54">2</literal></expr>)</condition> <block pos:start="321:57" pos:end="323:5">{<block_content pos:start="322:7" pos:end="322:12">
      <expr_stmt pos:start="322:7" pos:end="322:12"><expr pos:start="322:7" pos:end="322:11"><name pos:start="322:7" pos:end="322:7">i</name> <operator pos:start="322:9" pos:end="322:9">=</operator> <literal type="number" pos:start="322:11" pos:end="322:11">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="325:5" pos:end="342:5"><if pos:start="325:5" pos:end="342:5">if <condition pos:start="325:8" pos:end="325:29">(<expr pos:start="325:9" pos:end="325:28"><name pos:start="325:9" pos:end="325:24"><name pos:start="325:9" pos:end="325:17">hashArray</name><operator pos:start="325:18" pos:end="325:18">.</operator><name pos:start="325:19" pos:end="325:24">length</name></name> <operator pos:start="325:26" pos:end="325:26">&gt;</operator> <literal type="number" pos:start="325:28" pos:end="325:28">0</literal></expr>)</condition> <block pos:start="325:31" pos:end="342:5">{<block_content pos:start="326:7" pos:end="341:7">
      <expr_stmt pos:start="326:7" pos:end="326:35"><expr pos:start="326:7" pos:end="326:34"><name pos:start="326:7" pos:end="326:19">hashBreakdown</name> <operator pos:start="326:21" pos:end="326:21">=</operator> <name pos:start="326:23" pos:end="326:34"><name pos:start="326:23" pos:end="326:31">hashArray</name><index pos:start="326:32" pos:end="326:34">[<expr pos:start="326:33" pos:end="326:33"><name pos:start="326:33" pos:end="326:33">i</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt pos:start="327:7" pos:end="341:7"><if pos:start="327:7" pos:end="341:7">if <condition pos:start="327:10" pos:end="327:35">(<expr pos:start="327:11" pos:end="327:34"><operator pos:start="327:11" pos:end="327:11">!</operator><call pos:start="327:12" pos:end="327:34"><name pos:start="327:12" pos:end="327:32"><name pos:start="327:12" pos:end="327:24">hashBreakdown</name><operator pos:start="327:25" pos:end="327:25">.</operator><name pos:start="327:26" pos:end="327:32">isEmpty</name></name><argument_list pos:start="327:33" pos:end="327:34">()</argument_list></call></expr>)</condition> <block pos:start="327:37" pos:end="341:7">{<block_content pos:start="328:9" pos:end="340:9">
        <decl_stmt pos:start="328:9" pos:end="328:47"><decl pos:start="328:9" pos:end="328:46"><type pos:start="328:9" pos:end="328:12"><name pos:start="328:9" pos:end="328:12">char</name></type> <name pos:start="328:14" pos:end="328:20">lottery</name> <init pos:start="328:22" pos:end="328:46">= <expr pos:start="328:24" pos:end="328:46"><call pos:start="328:24" pos:end="328:46"><name pos:start="328:24" pos:end="328:43"><name pos:start="328:24" pos:end="328:36">hashBreakdown</name><operator pos:start="328:37" pos:end="328:37">.</operator><name pos:start="328:38" pos:end="328:43">charAt</name></name><argument_list pos:start="328:44" pos:end="328:46">(<argument pos:start="328:45" pos:end="328:45"><expr pos:start="328:45" pos:end="328:45"><literal type="number" pos:start="328:45" pos:end="328:45">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="330:9" pos:end="330:51"><expr pos:start="330:9" pos:end="330:50"><name pos:start="330:9" pos:end="330:21">hashBreakdown</name> <operator pos:start="330:23" pos:end="330:23">=</operator> <call pos:start="330:25" pos:end="330:50"><name pos:start="330:25" pos:end="330:47"><name pos:start="330:25" pos:end="330:37">hashBreakdown</name><operator pos:start="330:38" pos:end="330:38">.</operator><name pos:start="330:39" pos:end="330:47">substring</name></name><argument_list pos:start="330:48" pos:end="330:50">(<argument pos:start="330:49" pos:end="330:49"><expr pos:start="330:49" pos:end="330:49"><literal type="number" pos:start="330:49" pos:end="330:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="331:9" pos:end="331:77"><expr pos:start="331:9" pos:end="331:76"><name pos:start="331:9" pos:end="331:21">hashBreakdown</name> <operator pos:start="331:23" pos:end="331:23">=</operator> <call pos:start="331:25" pos:end="331:76"><name pos:start="331:25" pos:end="331:48"><name pos:start="331:25" pos:end="331:37">hashBreakdown</name><operator pos:start="331:38" pos:end="331:38">.</operator><name pos:start="331:39" pos:end="331:48">replaceAll</name></name><argument_list pos:start="331:49" pos:end="331:76">(<argument pos:start="331:50" pos:end="331:70"><expr pos:start="331:50" pos:end="331:70"><literal type="string" pos:start="331:50" pos:end="331:52">"["</literal> <operator pos:start="331:54" pos:end="331:54">+</operator> <name pos:start="331:56" pos:end="331:64"><name pos:start="331:56" pos:end="331:59">this</name><operator pos:start="331:60" pos:end="331:60">.</operator><name pos:start="331:61" pos:end="331:64">seps</name></name> <operator pos:start="331:66" pos:end="331:66">+</operator> <literal type="string" pos:start="331:68" pos:end="331:70">"]"</literal></expr></argument>, <argument pos:start="331:73" pos:end="331:75"><expr pos:start="331:73" pos:end="331:75"><literal type="string" pos:start="331:73" pos:end="331:75">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="332:9" pos:end="332:45"><expr pos:start="332:9" pos:end="332:44"><name pos:start="332:9" pos:end="332:17">hashArray</name> <operator pos:start="332:19" pos:end="332:19">=</operator> <call pos:start="332:21" pos:end="332:44"><name pos:start="332:21" pos:end="332:39"><name pos:start="332:21" pos:end="332:33">hashBreakdown</name><operator pos:start="332:34" pos:end="332:34">.</operator><name pos:start="332:35" pos:end="332:39">split</name></name><argument_list pos:start="332:40" pos:end="332:44">(<argument pos:start="332:41" pos:end="332:43"><expr pos:start="332:41" pos:end="332:43"><literal type="string" pos:start="332:41" pos:end="332:43">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt pos:start="334:9" pos:end="334:31"><decl pos:start="334:9" pos:end="334:22"><type pos:start="334:9" pos:end="334:14"><name pos:start="334:9" pos:end="334:14">String</name></type> <name pos:start="334:16" pos:end="334:22">subHash</name></decl>, <decl pos:start="334:25" pos:end="334:30"><type ref="prev" pos:start="334:9" pos:end="334:14"/><name pos:start="334:25" pos:end="334:30">buffer</name></decl>;</decl_stmt>
        <for pos:start="335:9" pos:end="340:9">for <control pos:start="335:13" pos:end="335:43">(<init pos:start="335:14" pos:end="335:42"><decl pos:start="335:14" pos:end="335:42"><type pos:start="335:14" pos:end="335:19"><name pos:start="335:14" pos:end="335:19">String</name></type> <name pos:start="335:21" pos:end="335:30">aHashArray</name> <range pos:start="335:32" pos:end="335:42">: <expr pos:start="335:34" pos:end="335:42"><name pos:start="335:34" pos:end="335:42">hashArray</name></expr></range></decl></init>)</control> <block pos:start="335:45" pos:end="340:9">{<block_content pos:start="336:11" pos:end="339:53">
          <expr_stmt pos:start="336:11" pos:end="336:31"><expr pos:start="336:11" pos:end="336:30"><name pos:start="336:11" pos:end="336:17">subHash</name> <operator pos:start="336:19" pos:end="336:19">=</operator> <name pos:start="336:21" pos:end="336:30">aHashArray</name></expr>;</expr_stmt>
          <expr_stmt pos:start="337:11" pos:end="337:50"><expr pos:start="337:11" pos:end="337:49"><name pos:start="337:11" pos:end="337:16">buffer</name> <operator pos:start="337:18" pos:end="337:18">=</operator> <name pos:start="337:20" pos:end="337:26">lottery</name> <operator pos:start="337:28" pos:end="337:28">+</operator> <name pos:start="337:30" pos:end="337:38"><name pos:start="337:30" pos:end="337:33">this</name><operator pos:start="337:34" pos:end="337:34">.</operator><name pos:start="337:35" pos:end="337:38">salt</name></name> <operator pos:start="337:40" pos:end="337:40">+</operator> <name pos:start="337:42" pos:end="337:49">alphabet</name></expr>;</expr_stmt>
          <expr_stmt pos:start="338:11" pos:end="338:97"><expr pos:start="338:11" pos:end="338:96"><name pos:start="338:11" pos:end="338:18">alphabet</name> <operator pos:start="338:20" pos:end="338:20">=</operator> <call pos:start="338:22" pos:end="338:96"><name pos:start="338:22" pos:end="338:46"><name pos:start="338:22" pos:end="338:28">Hashids</name><operator pos:start="338:29" pos:end="338:29">.</operator><name pos:start="338:30" pos:end="338:46">consistentShuffle</name></name><argument_list pos:start="338:47" pos:end="338:96">(<argument pos:start="338:48" pos:end="338:55"><expr pos:start="338:48" pos:end="338:55"><name pos:start="338:48" pos:end="338:55">alphabet</name></expr></argument>, <argument pos:start="338:58" pos:end="338:95"><expr pos:start="338:58" pos:end="338:95"><call pos:start="338:58" pos:end="338:95"><name pos:start="338:58" pos:end="338:73"><name pos:start="338:58" pos:end="338:63">buffer</name><operator pos:start="338:64" pos:end="338:64">.</operator><name pos:start="338:65" pos:end="338:73">substring</name></name><argument_list pos:start="338:74" pos:end="338:95">(<argument pos:start="338:75" pos:end="338:75"><expr pos:start="338:75" pos:end="338:75"><literal type="number" pos:start="338:75" pos:end="338:75">0</literal></expr></argument>, <argument pos:start="338:78" pos:end="338:94"><expr pos:start="338:78" pos:end="338:94"><call pos:start="338:78" pos:end="338:94"><name pos:start="338:78" pos:end="338:92"><name pos:start="338:78" pos:end="338:85">alphabet</name><operator pos:start="338:86" pos:end="338:86">.</operator><name pos:start="338:87" pos:end="338:92">length</name></name><argument_list pos:start="338:93" pos:end="338:94">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt pos:start="339:11" pos:end="339:53"><expr pos:start="339:11" pos:end="339:52"><call pos:start="339:11" pos:end="339:52"><name pos:start="339:11" pos:end="339:17"><name pos:start="339:11" pos:end="339:13">ret</name><operator pos:start="339:14" pos:end="339:14">.</operator><name pos:start="339:15" pos:end="339:17">add</name></name><argument_list pos:start="339:18" pos:end="339:52">(<argument pos:start="339:19" pos:end="339:51"><expr pos:start="339:19" pos:end="339:51"><call pos:start="339:19" pos:end="339:51"><name pos:start="339:19" pos:end="339:32"><name pos:start="339:19" pos:end="339:25">Hashids</name><operator pos:start="339:26" pos:end="339:26">.</operator><name pos:start="339:27" pos:end="339:32">unhash</name></name><argument_list pos:start="339:33" pos:end="339:51">(<argument pos:start="339:34" pos:end="339:40"><expr pos:start="339:34" pos:end="339:40"><name pos:start="339:34" pos:end="339:40">subHash</name></expr></argument>, <argument pos:start="339:43" pos:end="339:50"><expr pos:start="339:43" pos:end="339:50"><name pos:start="339:43" pos:end="339:50">alphabet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="344:5" pos:end="344:42">// transform from List&lt;Long&gt; to long[]</comment>
    <decl_stmt pos:start="345:5" pos:end="345:38"><decl pos:start="345:5" pos:end="345:37"><type pos:start="345:5" pos:end="345:10"><name pos:start="345:5" pos:end="345:10"><name pos:start="345:5" pos:end="345:8">long</name><index pos:start="345:9" pos:end="345:10">[]</index></name></type> <name pos:start="345:12" pos:end="345:14">arr</name> <init pos:start="345:16" pos:end="345:37">= <expr pos:start="345:18" pos:end="345:37"><operator pos:start="345:18" pos:end="345:20">new</operator> <name pos:start="345:22" pos:end="345:37"><name pos:start="345:22" pos:end="345:25">long</name><index pos:start="345:26" pos:end="345:37">[<expr pos:start="345:27" pos:end="345:36"><call pos:start="345:27" pos:end="345:36"><name pos:start="345:27" pos:end="345:34"><name pos:start="345:27" pos:end="345:29">ret</name><operator pos:start="345:30" pos:end="345:30">.</operator><name pos:start="345:31" pos:end="345:34">size</name></name><argument_list pos:start="345:35" pos:end="345:36">()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for pos:start="346:5" pos:end="348:5">for <control pos:start="346:9" pos:end="346:40">(<init pos:start="346:10" pos:end="346:19"><decl pos:start="346:10" pos:end="346:18"><type pos:start="346:10" pos:end="346:12"><name pos:start="346:10" pos:end="346:12">int</name></type> <name pos:start="346:14" pos:end="346:14">k</name> <init pos:start="346:16" pos:end="346:18">= <expr pos:start="346:18" pos:end="346:18"><literal type="number" pos:start="346:18" pos:end="346:18">0</literal></expr></init></decl>;</init> <condition pos:start="346:21" pos:end="346:35"><expr pos:start="346:21" pos:end="346:34"><name pos:start="346:21" pos:end="346:21">k</name> <operator pos:start="346:23" pos:end="346:23">&lt;</operator> <name pos:start="346:25" pos:end="346:34"><name pos:start="346:25" pos:end="346:27">arr</name><operator pos:start="346:28" pos:end="346:28">.</operator><name pos:start="346:29" pos:end="346:34">length</name></name></expr>;</condition> <incr pos:start="346:37" pos:end="346:39"><expr pos:start="346:37" pos:end="346:39"><name pos:start="346:37" pos:end="346:37">k</name><operator pos:start="346:38" pos:end="346:39">++</operator></expr></incr>)</control> <block pos:start="346:42" pos:end="348:5">{<block_content pos:start="347:7" pos:end="347:26">
      <expr_stmt pos:start="347:7" pos:end="347:26"><expr pos:start="347:7" pos:end="347:25"><name pos:start="347:7" pos:end="347:12"><name pos:start="347:7" pos:end="347:9">arr</name><index pos:start="347:10" pos:end="347:12">[<expr pos:start="347:11" pos:end="347:11"><name pos:start="347:11" pos:end="347:11">k</name></expr>]</index></name> <operator pos:start="347:14" pos:end="347:14">=</operator> <call pos:start="347:16" pos:end="347:25"><name pos:start="347:16" pos:end="347:22"><name pos:start="347:16" pos:end="347:18">ret</name><operator pos:start="347:19" pos:end="347:19">.</operator><name pos:start="347:20" pos:end="347:22">get</name></name><argument_list pos:start="347:23" pos:end="347:25">(<argument pos:start="347:24" pos:end="347:24"><expr pos:start="347:24" pos:end="347:24"><name pos:start="347:24" pos:end="347:24">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt pos:start="350:5" pos:end="352:5"><if pos:start="350:5" pos:end="352:5">if <condition pos:start="350:8" pos:end="350:40">(<expr pos:start="350:9" pos:end="350:39"><operator pos:start="350:9" pos:end="350:9">!</operator><call pos:start="350:10" pos:end="350:26"><name pos:start="350:10" pos:end="350:21"><name pos:start="350:10" pos:end="350:13">this</name><operator pos:start="350:14" pos:end="350:14">.</operator><name pos:start="350:15" pos:end="350:21">_encode</name></name><argument_list pos:start="350:22" pos:end="350:26">(<argument pos:start="350:23" pos:end="350:25"><expr pos:start="350:23" pos:end="350:25"><name pos:start="350:23" pos:end="350:25">arr</name></expr></argument>)</argument_list></call><operator pos:start="350:27" pos:end="350:27">.</operator><call pos:start="350:28" pos:end="350:39"><name pos:start="350:28" pos:end="350:33">equals</name><argument_list pos:start="350:34" pos:end="350:39">(<argument pos:start="350:35" pos:end="350:38"><expr pos:start="350:35" pos:end="350:38"><name pos:start="350:35" pos:end="350:38">hash</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="350:42" pos:end="352:5">{<block_content pos:start="351:7" pos:end="351:24">
      <expr_stmt pos:start="351:7" pos:end="351:24"><expr pos:start="351:7" pos:end="351:23"><name pos:start="351:7" pos:end="351:9">arr</name> <operator pos:start="351:11" pos:end="351:11">=</operator> <operator pos:start="351:13" pos:end="351:15">new</operator> <name pos:start="351:17" pos:end="351:23"><name pos:start="351:17" pos:end="351:20">long</name><index pos:start="351:21" pos:end="351:23">[<expr pos:start="351:22" pos:end="351:22"><literal type="number" pos:start="351:22" pos:end="351:22">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="354:5" pos:end="354:15">return <expr pos:start="354:12" pos:end="354:14"><name pos:start="354:12" pos:end="354:14">arr</name></expr>;</return>
  </block_content>}</block></function>

  <function pos:start="357:3" pos:end="374:3"><type pos:start="357:3" pos:end="357:23"><specifier pos:start="357:3" pos:end="357:9">private</specifier> <specifier pos:start="357:11" pos:end="357:16">static</specifier> <name pos:start="357:18" pos:end="357:23">String</name></type> <name pos:start="357:25" pos:end="357:41">consistentShuffle</name><parameter_list pos:start="357:42" pos:end="357:71">(<parameter pos:start="357:43" pos:end="357:57"><decl pos:start="357:43" pos:end="357:57"><type pos:start="357:43" pos:end="357:57"><name pos:start="357:43" pos:end="357:48">String</name></type> <name pos:start="357:50" pos:end="357:57">alphabet</name></decl></parameter>, <parameter pos:start="357:60" pos:end="357:70"><decl pos:start="357:60" pos:end="357:70"><type pos:start="357:60" pos:end="357:70"><name pos:start="357:60" pos:end="357:65">String</name></type> <name pos:start="357:67" pos:end="357:70">salt</name></decl></parameter>)</parameter_list> <block pos:start="357:73" pos:end="374:3">{<block_content pos:start="358:5" pos:end="373:30">
    <if_stmt pos:start="358:5" pos:end="359:22"><if pos:start="358:5" pos:end="359:22">if <condition pos:start="358:8" pos:end="358:27">(<expr pos:start="358:9" pos:end="358:26"><call pos:start="358:9" pos:end="358:21"><name pos:start="358:9" pos:end="358:19"><name pos:start="358:9" pos:end="358:12">salt</name><operator pos:start="358:13" pos:end="358:13">.</operator><name pos:start="358:14" pos:end="358:19">length</name></name><argument_list pos:start="358:20" pos:end="358:21">()</argument_list></call> <operator pos:start="358:23" pos:end="358:24">&lt;=</operator> <literal type="number" pos:start="358:26" pos:end="358:26">0</literal></expr>)</condition><block type="pseudo" pos:start="359:7" pos:end="359:22"><block_content pos:start="359:7" pos:end="359:22">
      <return pos:start="359:7" pos:end="359:22">return <expr pos:start="359:14" pos:end="359:21"><name pos:start="359:14" pos:end="359:21">alphabet</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt pos:start="361:5" pos:end="361:19"><decl pos:start="361:5" pos:end="361:15"><type pos:start="361:5" pos:end="361:7"><name pos:start="361:5" pos:end="361:7">int</name></type> <name pos:start="361:9" pos:end="361:15">asc_val</name></decl>, <decl pos:start="361:18" pos:end="361:18"><type ref="prev" pos:start="361:5" pos:end="361:7"/><name pos:start="361:18" pos:end="361:18">j</name></decl>;</decl_stmt>
    <decl_stmt pos:start="362:5" pos:end="362:43"><decl pos:start="362:5" pos:end="362:42"><type pos:start="362:5" pos:end="362:10"><name pos:start="362:5" pos:end="362:10"><name pos:start="362:5" pos:end="362:8">char</name><index pos:start="362:9" pos:end="362:10">[]</index></name></type> <name pos:start="362:12" pos:end="362:17">tmpArr</name> <init pos:start="362:19" pos:end="362:42">= <expr pos:start="362:21" pos:end="362:42"><call pos:start="362:21" pos:end="362:42"><name pos:start="362:21" pos:end="362:40"><name pos:start="362:21" pos:end="362:28">alphabet</name><operator pos:start="362:29" pos:end="362:29">.</operator><name pos:start="362:30" pos:end="362:40">toCharArray</name></name><argument_list pos:start="362:41" pos:end="362:42">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for pos:start="363:5" pos:end="371:5">for <control pos:start="363:9" pos:end="363:66">(<init pos:start="363:10" pos:end="363:49"><decl pos:start="363:10" pos:end="363:34"><type pos:start="363:10" pos:end="363:12"><name pos:start="363:10" pos:end="363:12">int</name></type> <name pos:start="363:14" pos:end="363:14">i</name> <init pos:start="363:16" pos:end="363:34">= <expr pos:start="363:18" pos:end="363:34"><name pos:start="363:18" pos:end="363:30"><name pos:start="363:18" pos:end="363:23">tmpArr</name><operator pos:start="363:24" pos:end="363:24">.</operator><name pos:start="363:25" pos:end="363:30">length</name></name> <operator pos:start="363:32" pos:end="363:32">-</operator> <literal type="number" pos:start="363:34" pos:end="363:34">1</literal></expr></init></decl>, <decl pos:start="363:37" pos:end="363:41"><type ref="prev" pos:start="363:10" pos:end="363:12"/><name pos:start="363:37" pos:end="363:37">v</name> <init pos:start="363:39" pos:end="363:41">= <expr pos:start="363:41" pos:end="363:41"><literal type="number" pos:start="363:41" pos:end="363:41">0</literal></expr></init></decl>, <decl pos:start="363:44" pos:end="363:48"><type ref="prev" pos:start="363:10" pos:end="363:12"/><name pos:start="363:44" pos:end="363:44">p</name> <init pos:start="363:46" pos:end="363:48">= <expr pos:start="363:48" pos:end="363:48"><literal type="number" pos:start="363:48" pos:end="363:48">0</literal></expr></init></decl>;</init> <condition pos:start="363:51" pos:end="363:56"><expr pos:start="363:51" pos:end="363:55"><name pos:start="363:51" pos:end="363:51">i</name> <operator pos:start="363:53" pos:end="363:53">&gt;</operator> <literal type="number" pos:start="363:55" pos:end="363:55">0</literal></expr>;</condition> <incr pos:start="363:58" pos:end="363:65"><expr pos:start="363:58" pos:end="363:60"><name pos:start="363:58" pos:end="363:58">i</name><operator pos:start="363:59" pos:end="363:60">--</operator></expr><operator pos:start="363:61" pos:end="363:61">,</operator> <expr pos:start="363:63" pos:end="363:65"><name pos:start="363:63" pos:end="363:63">v</name><operator pos:start="363:64" pos:end="363:65">++</operator></expr></incr>)</control> <block pos:start="363:68" pos:end="371:5">{<block_content pos:start="364:7" pos:end="370:22">
      <expr_stmt pos:start="364:7" pos:end="364:25"><expr pos:start="364:7" pos:end="364:24"><name pos:start="364:7" pos:end="364:7">v</name> <operator pos:start="364:9" pos:end="364:10">%=</operator> <call pos:start="364:12" pos:end="364:24"><name pos:start="364:12" pos:end="364:22"><name pos:start="364:12" pos:end="364:15">salt</name><operator pos:start="364:16" pos:end="364:16">.</operator><name pos:start="364:17" pos:end="364:22">length</name></name><argument_list pos:start="364:23" pos:end="364:24">()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="365:7" pos:end="365:37"><expr pos:start="365:7" pos:end="365:36"><name pos:start="365:7" pos:end="365:13">asc_val</name> <operator pos:start="365:15" pos:end="365:15">=</operator> <operator pos:start="365:17" pos:end="365:17">(</operator><name pos:start="365:18" pos:end="365:20">int</name><operator pos:start="365:21" pos:end="365:21">)</operator> <call pos:start="365:23" pos:end="365:36"><name pos:start="365:23" pos:end="365:33"><name pos:start="365:23" pos:end="365:26">salt</name><operator pos:start="365:27" pos:end="365:27">.</operator><name pos:start="365:28" pos:end="365:33">charAt</name></name><argument_list pos:start="365:34" pos:end="365:36">(<argument pos:start="365:35" pos:end="365:35"><expr pos:start="365:35" pos:end="365:35"><name pos:start="365:35" pos:end="365:35">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="366:7" pos:end="366:19"><expr pos:start="366:7" pos:end="366:18"><name pos:start="366:7" pos:end="366:7">p</name> <operator pos:start="366:9" pos:end="366:10">+=</operator> <name pos:start="366:12" pos:end="366:18">asc_val</name></expr>;</expr_stmt>
      <expr_stmt pos:start="367:7" pos:end="367:32"><expr pos:start="367:7" pos:end="367:31"><name pos:start="367:7" pos:end="367:7">j</name> <operator pos:start="367:9" pos:end="367:9">=</operator> <operator pos:start="367:11" pos:end="367:11">(</operator><name pos:start="367:12" pos:end="367:18">asc_val</name> <operator pos:start="367:20" pos:end="367:20">+</operator> <name pos:start="367:22" pos:end="367:22">v</name> <operator pos:start="367:24" pos:end="367:24">+</operator> <name pos:start="367:26" pos:end="367:26">p</name><operator pos:start="367:27" pos:end="367:27">)</operator> <operator pos:start="367:29" pos:end="367:29">%</operator> <name pos:start="367:31" pos:end="367:31">i</name></expr>;</expr_stmt>
      <decl_stmt pos:start="368:7" pos:end="368:27"><decl pos:start="368:7" pos:end="368:26"><type pos:start="368:7" pos:end="368:10"><name pos:start="368:7" pos:end="368:10">char</name></type> <name pos:start="368:12" pos:end="368:14">tmp</name> <init pos:start="368:16" pos:end="368:26">= <expr pos:start="368:18" pos:end="368:26"><name pos:start="368:18" pos:end="368:26"><name pos:start="368:18" pos:end="368:23">tmpArr</name><index pos:start="368:24" pos:end="368:26">[<expr pos:start="368:25" pos:end="368:25"><name pos:start="368:25" pos:end="368:25">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt pos:start="369:7" pos:end="369:28"><expr pos:start="369:7" pos:end="369:27"><name pos:start="369:7" pos:end="369:15"><name pos:start="369:7" pos:end="369:12">tmpArr</name><index pos:start="369:13" pos:end="369:15">[<expr pos:start="369:14" pos:end="369:14"><name pos:start="369:14" pos:end="369:14">j</name></expr>]</index></name> <operator pos:start="369:17" pos:end="369:17">=</operator> <name pos:start="369:19" pos:end="369:27"><name pos:start="369:19" pos:end="369:24">tmpArr</name><index pos:start="369:25" pos:end="369:27">[<expr pos:start="369:26" pos:end="369:26"><name pos:start="369:26" pos:end="369:26">i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt pos:start="370:7" pos:end="370:22"><expr pos:start="370:7" pos:end="370:21"><name pos:start="370:7" pos:end="370:15"><name pos:start="370:7" pos:end="370:12">tmpArr</name><index pos:start="370:13" pos:end="370:15">[<expr pos:start="370:14" pos:end="370:14"><name pos:start="370:14" pos:end="370:14">i</name></expr>]</index></name> <operator pos:start="370:17" pos:end="370:17">=</operator> <name pos:start="370:19" pos:end="370:21">tmp</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return pos:start="373:5" pos:end="373:30">return <expr pos:start="373:12" pos:end="373:29"><operator pos:start="373:12" pos:end="373:14">new</operator> <call pos:start="373:16" pos:end="373:29"><name pos:start="373:16" pos:end="373:21">String</name><argument_list pos:start="373:22" pos:end="373:29">(<argument pos:start="373:23" pos:end="373:28"><expr pos:start="373:23" pos:end="373:28"><name pos:start="373:23" pos:end="373:28">tmpArr</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function pos:start="376:3" pos:end="389:3"><type pos:start="376:3" pos:end="376:23"><specifier pos:start="376:3" pos:end="376:9">private</specifier> <specifier pos:start="376:11" pos:end="376:16">static</specifier> <name pos:start="376:18" pos:end="376:23">String</name></type> <name pos:start="376:25" pos:end="376:28">hash</name><parameter_list pos:start="376:29" pos:end="376:57">(<parameter pos:start="376:30" pos:end="376:39"><decl pos:start="376:30" pos:end="376:39"><type pos:start="376:30" pos:end="376:39"><name pos:start="376:30" pos:end="376:33">long</name></type> <name pos:start="376:35" pos:end="376:39">input</name></decl></parameter>, <parameter pos:start="376:42" pos:end="376:56"><decl pos:start="376:42" pos:end="376:56"><type pos:start="376:42" pos:end="376:56"><name pos:start="376:42" pos:end="376:47">String</name></type> <name pos:start="376:49" pos:end="376:56">alphabet</name></decl></parameter>)</parameter_list> <block pos:start="376:59" pos:end="389:3">{<block_content pos:start="377:5" pos:end="388:16">
    <decl_stmt pos:start="377:5" pos:end="377:21"><decl pos:start="377:5" pos:end="377:20"><type pos:start="377:5" pos:end="377:10"><name pos:start="377:5" pos:end="377:10">String</name></type> <name pos:start="377:12" pos:end="377:15">hash</name> <init pos:start="377:17" pos:end="377:20">= <expr pos:start="377:19" pos:end="377:20"><literal type="string" pos:start="377:19" pos:end="377:20">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="378:5" pos:end="378:40"><decl pos:start="378:5" pos:end="378:39"><type pos:start="378:5" pos:end="378:7"><name pos:start="378:5" pos:end="378:7">int</name></type> <name pos:start="378:9" pos:end="378:19">alphabetLen</name> <init pos:start="378:21" pos:end="378:39">= <expr pos:start="378:23" pos:end="378:39"><call pos:start="378:23" pos:end="378:39"><name pos:start="378:23" pos:end="378:37"><name pos:start="378:23" pos:end="378:30">alphabet</name><operator pos:start="378:31" pos:end="378:31">.</operator><name pos:start="378:32" pos:end="378:37">length</name></name><argument_list pos:start="378:38" pos:end="378:39">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <do pos:start="380:5" pos:end="386:24">do <block pos:start="380:8" pos:end="386:5">{<block_content pos:start="381:7" pos:end="385:27">
      <decl_stmt pos:start="381:7" pos:end="381:46"><decl pos:start="381:7" pos:end="381:45"><type pos:start="381:7" pos:end="381:9"><name pos:start="381:7" pos:end="381:9">int</name></type> <name pos:start="381:11" pos:end="381:15">index</name> <init pos:start="381:17" pos:end="381:45">= <expr pos:start="381:19" pos:end="381:45"><operator pos:start="381:19" pos:end="381:19">(</operator><name pos:start="381:20" pos:end="381:22">int</name><operator pos:start="381:23" pos:end="381:23">)</operator> <operator pos:start="381:25" pos:end="381:25">(</operator><name pos:start="381:26" pos:end="381:30">input</name> <operator pos:start="381:32" pos:end="381:32">%</operator> <name pos:start="381:34" pos:end="381:44">alphabetLen</name><operator pos:start="381:45" pos:end="381:45">)</operator></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="382:7" pos:end="384:7"><if pos:start="382:7" pos:end="384:7">if <condition pos:start="382:10" pos:end="382:50">(<expr pos:start="382:11" pos:end="382:49"><name pos:start="382:11" pos:end="382:15">index</name> <operator pos:start="382:17" pos:end="382:18">&gt;=</operator> <literal type="number" pos:start="382:20" pos:end="382:20">0</literal> <operator pos:start="382:22" pos:end="382:23">&amp;&amp;</operator> <name pos:start="382:25" pos:end="382:29">index</name> <operator pos:start="382:31" pos:end="382:31">&lt;</operator> <call pos:start="382:33" pos:end="382:49"><name pos:start="382:33" pos:end="382:47"><name pos:start="382:33" pos:end="382:40">alphabet</name><operator pos:start="382:41" pos:end="382:41">.</operator><name pos:start="382:42" pos:end="382:47">length</name></name><argument_list pos:start="382:48" pos:end="382:49">()</argument_list></call></expr>)</condition> <block pos:start="382:52" pos:end="384:7">{<block_content pos:start="383:9" pos:end="383:45">
        <expr_stmt pos:start="383:9" pos:end="383:45"><expr pos:start="383:9" pos:end="383:44"><name pos:start="383:9" pos:end="383:12">hash</name> <operator pos:start="383:14" pos:end="383:14">=</operator> <call pos:start="383:16" pos:end="383:37"><name pos:start="383:16" pos:end="383:30"><name pos:start="383:16" pos:end="383:23">alphabet</name><operator pos:start="383:24" pos:end="383:24">.</operator><name pos:start="383:25" pos:end="383:30">charAt</name></name><argument_list pos:start="383:31" pos:end="383:37">(<argument pos:start="383:32" pos:end="383:36"><expr pos:start="383:32" pos:end="383:36"><name pos:start="383:32" pos:end="383:36">index</name></expr></argument>)</argument_list></call> <operator pos:start="383:39" pos:end="383:39">+</operator> <name pos:start="383:41" pos:end="383:44">hash</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt pos:start="385:7" pos:end="385:27"><expr pos:start="385:7" pos:end="385:26"><name pos:start="385:7" pos:end="385:11">input</name> <operator pos:start="385:13" pos:end="385:14">/=</operator> <name pos:start="385:16" pos:end="385:26">alphabetLen</name></expr>;</expr_stmt>
    </block_content>}</block> while <condition pos:start="386:13" pos:end="386:23">(<expr pos:start="386:14" pos:end="386:22"><name pos:start="386:14" pos:end="386:18">input</name> <operator pos:start="386:20" pos:end="386:20">&gt;</operator> <literal type="number" pos:start="386:22" pos:end="386:22">0</literal></expr>)</condition>;</do>

    <return pos:start="388:5" pos:end="388:16">return <expr pos:start="388:12" pos:end="388:15"><name pos:start="388:12" pos:end="388:15">hash</name></expr>;</return>
  </block_content>}</block></function>

  <function pos:start="391:3" pos:end="400:3"><type pos:start="391:3" pos:end="391:21"><specifier pos:start="391:3" pos:end="391:9">private</specifier> <specifier pos:start="391:11" pos:end="391:16">static</specifier> <name pos:start="391:18" pos:end="391:21">Long</name></type> <name pos:start="391:23" pos:end="391:28">unhash</name><parameter_list pos:start="391:29" pos:end="391:59">(<parameter pos:start="391:30" pos:end="391:41"><decl pos:start="391:30" pos:end="391:41"><type pos:start="391:30" pos:end="391:41"><name pos:start="391:30" pos:end="391:35">String</name></type> <name pos:start="391:37" pos:end="391:41">input</name></decl></parameter>, <parameter pos:start="391:44" pos:end="391:58"><decl pos:start="391:44" pos:end="391:58"><type pos:start="391:44" pos:end="391:58"><name pos:start="391:44" pos:end="391:49">String</name></type> <name pos:start="391:51" pos:end="391:58">alphabet</name></decl></parameter>)</parameter_list> <block pos:start="391:61" pos:end="400:3">{<block_content pos:start="392:5" pos:end="399:18">
    <decl_stmt pos:start="392:5" pos:end="392:25"><decl pos:start="392:5" pos:end="392:19"><type pos:start="392:5" pos:end="392:8"><name pos:start="392:5" pos:end="392:8">long</name></type> <name pos:start="392:10" pos:end="392:15">number</name> <init pos:start="392:17" pos:end="392:19">= <expr pos:start="392:19" pos:end="392:19"><literal type="number" pos:start="392:19" pos:end="392:19">0</literal></expr></init></decl>, <decl pos:start="392:22" pos:end="392:24"><type ref="prev" pos:start="392:5" pos:end="392:8"/><name pos:start="392:22" pos:end="392:24">pos</name></decl>;</decl_stmt>

    <for pos:start="394:5" pos:end="397:5">for <control pos:start="394:9" pos:end="394:44">(<init pos:start="394:10" pos:end="394:19"><decl pos:start="394:10" pos:end="394:18"><type pos:start="394:10" pos:end="394:12"><name pos:start="394:10" pos:end="394:12">int</name></type> <name pos:start="394:14" pos:end="394:14">i</name> <init pos:start="394:16" pos:end="394:18">= <expr pos:start="394:18" pos:end="394:18"><literal type="number" pos:start="394:18" pos:end="394:18">0</literal></expr></init></decl>;</init> <condition pos:start="394:21" pos:end="394:39"><expr pos:start="394:21" pos:end="394:38"><name pos:start="394:21" pos:end="394:21">i</name> <operator pos:start="394:23" pos:end="394:23">&lt;</operator> <call pos:start="394:25" pos:end="394:38"><name pos:start="394:25" pos:end="394:36"><name pos:start="394:25" pos:end="394:29">input</name><operator pos:start="394:30" pos:end="394:30">.</operator><name pos:start="394:31" pos:end="394:36">length</name></name><argument_list pos:start="394:37" pos:end="394:38">()</argument_list></call></expr>;</condition> <incr pos:start="394:41" pos:end="394:43"><expr pos:start="394:41" pos:end="394:43"><name pos:start="394:41" pos:end="394:41">i</name><operator pos:start="394:42" pos:end="394:43">++</operator></expr></incr>)</control> <block pos:start="394:46" pos:end="397:5">{<block_content pos:start="395:7" pos:end="396:48">
      <expr_stmt pos:start="395:7" pos:end="395:46"><expr pos:start="395:7" pos:end="395:45"><name pos:start="395:7" pos:end="395:9">pos</name> <operator pos:start="395:11" pos:end="395:11">=</operator> <call pos:start="395:13" pos:end="395:45"><name pos:start="395:13" pos:end="395:28"><name pos:start="395:13" pos:end="395:20">alphabet</name><operator pos:start="395:21" pos:end="395:21">.</operator><name pos:start="395:22" pos:end="395:28">indexOf</name></name><argument_list pos:start="395:29" pos:end="395:45">(<argument pos:start="395:30" pos:end="395:44"><expr pos:start="395:30" pos:end="395:44"><call pos:start="395:30" pos:end="395:44"><name pos:start="395:30" pos:end="395:41"><name pos:start="395:30" pos:end="395:34">input</name><operator pos:start="395:35" pos:end="395:35">.</operator><name pos:start="395:36" pos:end="395:41">charAt</name></name><argument_list pos:start="395:42" pos:end="395:44">(<argument pos:start="395:43" pos:end="395:43"><expr pos:start="395:43" pos:end="395:43"><name pos:start="395:43" pos:end="395:43">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="396:7" pos:end="396:48"><expr pos:start="396:7" pos:end="396:47"><name pos:start="396:7" pos:end="396:12">number</name> <operator pos:start="396:14" pos:end="396:14">=</operator> <name pos:start="396:16" pos:end="396:21">number</name> <operator pos:start="396:23" pos:end="396:23">*</operator> <call pos:start="396:25" pos:end="396:41"><name pos:start="396:25" pos:end="396:39"><name pos:start="396:25" pos:end="396:32">alphabet</name><operator pos:start="396:33" pos:end="396:33">.</operator><name pos:start="396:34" pos:end="396:39">length</name></name><argument_list pos:start="396:40" pos:end="396:41">()</argument_list></call> <operator pos:start="396:43" pos:end="396:43">+</operator> <name pos:start="396:45" pos:end="396:47">pos</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return pos:start="399:5" pos:end="399:18">return <expr pos:start="399:12" pos:end="399:17"><name pos:start="399:12" pos:end="399:17">number</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="402:3" pos:end="406:5">/**
   * Get Hashid algorithm version.
   * 
   * @return Hashids algorithm version implemented.
   */</comment>
  <function pos:start="407:3" pos:end="409:3"><type pos:start="407:3" pos:end="407:15"><specifier pos:start="407:3" pos:end="407:8">public</specifier> <name pos:start="407:10" pos:end="407:15">String</name></type> <name pos:start="407:17" pos:end="407:26">getVersion</name><parameter_list pos:start="407:27" pos:end="407:28">()</parameter_list> <block pos:start="407:30" pos:end="409:3">{<block_content pos:start="408:5" pos:end="408:19">
    <return pos:start="408:5" pos:end="408:19">return <expr pos:start="408:12" pos:end="408:18"><literal type="string" pos:start="408:12" pos:end="408:18">"1.0.0"</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
