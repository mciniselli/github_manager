INSERT INTO method (id_repo, id_file, id_method, code, abstract_code, abstract_representation, repo_name, repo_url,repo_commit, file_name, num_methods, start_method, end_method, num_tokens, num_lines) VALUES ( 4, 0, 0, '@Test\n    public void test_large_number() {\n    long num_to_hash = 9007199254740992L;\n    Hashids a = new Hashids("this is my salt");\n    String res = a.encode(num_to_hash);\n    long[] b = a.decode(res);\n    Assert.assertEquals(num_to_hash, b[0]);\n    }', 'public void METHOD_1 ( ) { long VAR_1 = INT_1 ; TYPE_1 a = new TYPE_1 ( STRING_1 ) ; String res = a . METHOD_2 ( VAR_1 ) ; long [ ] b = a . METHOD_3 ( res ) ; TYPE_2 . METHOD_4 ( VAR_1 , b [ 0 ] ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_1: test_large_number\', \'METHOD_2: encode\', \'METHOD_4: assertEquals\', \'METHOD_3: decode\', \'VAR_1: num_to_hash\', \'INT_1: 9007199254740992L\', \'STRING_1: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '10:3', '17:3', 55, 7 ), ( 4, 0, 1, '@Test(expected = IllegalArgumentException.class)\n    public void test_large_number_not_supported() throws Exception {\n    long num_to_hash = 9007199254740993L;\n    Hashids a = new Hashids("this is my salt");\n    a.encode(num_to_hash);\n    }', 'public void METHOD_1 ( ) throws Exception { long VAR_1 = INT_1 ; TYPE_1 a = new TYPE_1 ( STRING_1 ) ; a . METHOD_2 ( VAR_1 ) ; }', '[\'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_1: test_large_number_not_supported\', \'VAR_1: num_to_hash\', \'INT_1: 9007199254740993L\', \'STRING_1: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '19:3', '24:3', 38, 5 ), ( 4, 0, 2, '@Test\n    public void test_wrong_decoding() {\n    Hashids a = new Hashids("this is my pepper");\n    long[] b = a.decode("NkK9");\n    Assert.assertEquals(b.length, 0);\n    }', 'public void METHOD_1 ( ) { TYPE_1 a = new TYPE_1 ( STRING_1 ) ; long [ ] b = a . METHOD_2 ( STRING_2 ) ; TYPE_2 . METHOD_3 ( b . length , 0 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_1: test_wrong_decoding\', \'METHOD_3: assertEquals\', \'METHOD_2: decode\', \'STRING_1: "this is my pepper"\', \'STRING_2: "NkK9"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '26:3', '31:3', 39, 5 ), ( 4, 0, 3, '@Test\n    public void test_one_number() {\n    String expected = "NkK9", res;\n    long num_to_hash = 12345L;\n    long[] res2;\n    Hashids a = new Hashids("this is my salt");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(res, expected);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2.length, 1);\n    Assert.assertEquals(res2[0], num_to_hash);\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long VAR_2 = INT_1 ; long [ ] VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( res , VAR_1 ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 . length , 1 ) ; TYPE_2 . METHOD_3 ( VAR_3 [ 0 ] , VAR_2 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_1: test_one_number\', \'METHOD_3: assertEquals\', \'METHOD_4: decode\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 12345L\', \'STRING_1: "NkK9"\', \'STRING_2: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '33:3', '44:3', 83, 11 ), ( 4, 0, 4, '@Test\n    public void test_serveral_numbers() {\n    String expected = "aBMswoO2UB3Sj", res;\n    long[] num_to_hash = { 683L, 94108L, 123L, 5L }, res2;\n    Hashids a = new Hashids("this is my salt");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(res, expected);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2.length, num_to_hash.length);\n    Assert.assertTrue(Arrays.equals(res2, num_to_hash));\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long [ ] VAR_2 = { INT_1 , INT_2 , INT_3 , INT_4 } , VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( res , VAR_1 ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 . length , VAR_2 . length ) ; TYPE_2 . METHOD_5 ( TYPE_3 . equals ( VAR_3 , VAR_2 ) ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'TYPE_3: Arrays\', \'METHOD_2: encode\', \'METHOD_5: assertTrue\', \'METHOD_3: assertEquals\', \'METHOD_4: decode\', \'METHOD_1: test_serveral_numbers\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 683L\', \'INT_2: 94108L\', \'INT_4: 5L\', \'INT_3: 123L\', \'STRING_1: "aBMswoO2UB3Sj"\', \'STRING_2: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '46:3', '56:3', 94, 10 ), ( 4, 0, 5, '@Test\n    public void test_specifying_custom_hash_alphabet() {\n    String expected = "b332db5", res;\n    long num_to_hash = 1234567L;\n    long[] res2;\n    Hashids a = new Hashids("this is my salt", 0, "0123456789abcdef");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(expected, res);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2[0], num_to_hash);\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long VAR_2 = INT_1 ; long [ ] VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 , 0 , STRING_3 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_1 , res ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 [ 0 ] , VAR_2 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_3: assertEquals\', \'METHOD_4: decode\', \'METHOD_1: test_specifying_custom_hash_alphabet\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 1234567L\', \'STRING_1: "b332db5"\', \'STRING_2: "this is my salt"\', \'STRING_3: "0123456789abcdef"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '58:3', '68:3', 76, 10 ), ( 4, 0, 6, '@Test\n    public void test_specifying_custom_hash_length() {\n    String expected = "gB0NV05e", res;\n    long num_to_hash = 1L;\n    long[] res2;\n    Hashids a = new Hashids("this is my salt", 8);\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(res, expected);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2.length, 1);\n    Assert.assertEquals(res2[0], num_to_hash);\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long VAR_2 = INT_1 ; long [ ] VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 , 8 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( res , VAR_1 ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 . length , 1 ) ; TYPE_2 . METHOD_3 ( VAR_3 [ 0 ] , VAR_2 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_1: test_specifying_custom_hash_length\', \'METHOD_3: assertEquals\', \'METHOD_4: decode\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 1L\', \'STRING_1: "gB0NV05e"\', \'STRING_2: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '70:3', '81:3', 85, 11 ), ( 4, 0, 7, '@Test\n    public void test_randomness() {\n    String expected = "1Wc8cwcE", res;\n    long[] num_to_hash = { 5L, 5L, 5L, 5L }, res2;\n    Hashids a = new Hashids("this is my salt");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(res, expected);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2.length, num_to_hash.length);\n    Assert.assertTrue(Arrays.equals(res2, num_to_hash));\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long [ ] VAR_2 = { INT_1 , INT_1 , INT_1 , INT_1 } , VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( res , VAR_1 ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 . length , VAR_2 . length ) ; TYPE_2 . METHOD_5 ( TYPE_3 . equals ( VAR_3 , VAR_2 ) ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'TYPE_3: Arrays\', \'METHOD_2: encode\', \'METHOD_1: test_randomness\', \'METHOD_5: assertTrue\', \'METHOD_3: assertEquals\', \'METHOD_4: decode\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 5L\', \'STRING_2: "this is my salt"\', \'STRING_1: "1Wc8cwcE"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '83:3', '93:3', 94, 10 ), ( 4, 0, 9, '@Test\n    public void test_randomness_for_incrementing() {\n    Hashids a;\n    a = new Hashids("this is my salt");\n    Assert.assertEquals(a.encode(1L), "NV");\n    Assert.assertEquals(a.encode(2L), "6m");\n    Assert.assertEquals(a.encode(3L), "yD");\n    Assert.assertEquals(a.encode(4L), "2l");\n    Assert.assertEquals(a.encode(5L), "rD");\n    }', 'public void METHOD_1 ( ) { TYPE_1 a ; a = new TYPE_1 ( STRING_1 ) ; TYPE_2 . METHOD_2 ( a . METHOD_3 ( INT_1 ) , STRING_2 ) ; TYPE_2 . METHOD_2 ( a . METHOD_3 ( INT_2 ) , STRING_3 ) ; TYPE_2 . METHOD_2 ( a . METHOD_3 ( INT_3 ) , STRING_4 ) ; TYPE_2 . METHOD_2 ( a . METHOD_3 ( INT_4 ) , STRING_5 ) ; TYPE_2 . METHOD_2 ( a . METHOD_3 ( INT_5 ) , STRING_6 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_3: encode\', \'METHOD_2: assertEquals\', \'METHOD_1: test_randomness_for_incrementing\', \'INT_5: 5L\', \'INT_4: 4L\', \'INT_3: 3L\', \'INT_2: 2L\', \'INT_1: 1L\', \'STRING_4: "yD"\', \'STRING_1: "this is my salt"\', \'STRING_5: "2l"\', \'STRING_2: "NV"\', \'STRING_3: "6m"\', \'STRING_6: "rD"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '107:3', '116:3', 89, 9 ), ( 4, 0, 11, '@Test\n    public void test_issue10() {\n    String expected = "3kK3nNOe", res;\n    long num_to_hash = 75527867232l;\n    long[] res2;\n    Hashids a = new Hashids("this is my salt");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(res, expected);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2.length, 1);\n    Assert.assertEquals(res2[0], num_to_hash);\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long VAR_2 = INT_1 ; long [ ] VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( res , VAR_1 ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 . length , 1 ) ; TYPE_2 . METHOD_3 ( VAR_3 [ 0 ] , VAR_2 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_3: assertEquals\', \'METHOD_1: test_issue10\', \'METHOD_4: decode\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 75527867232l\', \'STRING_1: "3kK3nNOe"\', \'STRING_2: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '124:3', '135:3', 83, 11 ), ( 4, 0, 12, '@Test\n    public void test_issue23() {\n    String expected = "9Q7MJ3LVGW", res;\n    long num_to_hash = 1145L;\n    long[] res2;\n    Hashids a = new Hashids("MyCamelCaseSalt", 10, "ABCDEFGHIJKLMNPQRSTUVWXYZ123456789");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(expected, res);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2[0], num_to_hash);\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long VAR_2 = INT_1 ; long [ ] VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 , INT_2 , STRING_3 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_1 , res ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 [ 0 ] , VAR_2 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_3: assertEquals\', \'METHOD_4: decode\', \'METHOD_1: test_issue23\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 1145L\', \'INT_2: 10\', \'STRING_3: "ABCDEFGHIJKLMNPQRSTUVWXYZ123456789"\', \'STRING_1: "9Q7MJ3LVGW"\', \'STRING_2: "MyCamelCaseSalt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '137:3', '147:3', 76, 10 ), ( 4, 0, 13, '@Test\n    public void test_issue30() {\n    String expected = "", res;\n    long num_to_hash = -1L;\n    Hashids a = new Hashids("this is my salt");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(expected, res);\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long VAR_2 = - INT_1 ; TYPE_1 a = new TYPE_1 ( STRING_2 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_1 , res ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_1: test_issue30\', \'METHOD_3: assertEquals\', \'VAR_1: expected\', \'VAR_2: num_to_hash\', \'INT_1: 1L\', \'STRING_1: ""\', \'STRING_2: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '149:3', '156:3', 48, 7 ), ( 4, 0, 14, '@Test\n    public void test_issue31() {\n    final long[] numbers = new long[500000];\n    long current = Hashids.MAX_NUMBER;\n    for (int i = 0; i < numbers.length; i++) {\n    numbers[i] = current--;\n    }\n    Hashids a = new Hashids("this is my salt");\n    Assert.assertNotEquals("", a.encode(numbers));\n    }', 'public void METHOD_1 ( ) { final long [ ] VAR_1 = new long [ INT_1 ] ; long current = VAR_2 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { VAR_1 [ i ] = current -- ; } TYPE_1 a = new TYPE_1 ( STRING_1 ) ; TYPE_2 . METHOD_2 ( STRING_2 , a . METHOD_3 ( VAR_1 ) ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_3: encode\', \'METHOD_1: test_issue31\', \'METHOD_2: assertNotEquals\', \'VAR_1: numbers\', \'VAR_2: Hashids.MAX_NUMBER\', \'INT_1: 500000\', \'STRING_2: ""\', \'STRING_1: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '158:3', '167:3', 75, 8 ), ( 4, 0, 15, '@Test\n    public void test_issue32() throws Exception {\n    long num_to_hash = -1;\n    Hashids a = new Hashids("this is my salt");\n    Assert.assertEquals("", a.encode(num_to_hash));\n    }', 'public void METHOD_1 ( ) throws Exception { long VAR_1 = - 1 ; TYPE_1 a = new TYPE_1 ( STRING_1 ) ; TYPE_2 . METHOD_2 ( STRING_2 , a . METHOD_3 ( VAR_1 ) ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_3: encode\', \'METHOD_2: assertEquals\', \'METHOD_1: test_issue32\', \'VAR_1: num_to_hash\', \'STRING_2: ""\', \'STRING_1: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '169:3', '174:3', 39, 5 ), ( 4, 1, 4, 'public String encode(long... numbers) {\n    if (numbers.length == 0) {\n    return "";\n    }\n    for (long number : numbers) {\n    if (number < 0) {\n    return "";\n    }\n    if (number > MAX_NUMBER) {\n    throw new IllegalArgumentException("number can not be greater than " + MAX_NUMBER + "L");\n    }\n    }\n    return this._encode(numbers);\n    }', 'public String METHOD_1 ( long ... VAR_1 ) { if ( VAR_1 . length == 0 ) { return STRING_1 ; } for ( long VAR_2 : VAR_1 ) { if ( VAR_2 < 0 ) { return STRING_1 ; } if ( VAR_2 > VAR_3 ) { throw new IllegalArgumentException ( STRING_2 + VAR_3 + STRING_3 ) ; } } return this . METHOD_2 ( VAR_1 ) ; }', '[\'METHOD_1: encode\', \'METHOD_2: _encode\', \'VAR_2: number\', \'VAR_1: numbers\', \'VAR_3: MAX_NUMBER\', \'STRING_1: ""\', \'STRING_3: "L"\', \'STRING_2: "number can not be greater than "\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/main/java/org/hashids/Hashids.java', 19, '168:3', '182:3', 70, 9 ), ( 4, 1, 7, 'public String decodeHex(String hash) {\n    StringBuilder result = new StringBuilder();\n    long[] numbers = this.decode(hash);\n    for (long number : numbers) {\n    result.append(Long.toHexString(number).substring(1));\n    }\n    return result.toString();\n    }', 'public String METHOD_1 ( String VAR_1 ) { StringBuilder result = new StringBuilder ( ) ; long [ ] VAR_2 = this . METHOD_2 ( VAR_1 ) ; for ( long VAR_3 : VAR_2 ) { result . append ( Long . METHOD_3 ( VAR_3 ) . substring ( 1 ) ) ; } return result . toString ( ) ; }', '[\'METHOD_3: toHexString\', \'METHOD_1: decodeHex\', \'METHOD_2: decode\', \'VAR_3: number\', \'VAR_2: numbers\', \'VAR_1: hash\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/main/java/org/hashids/Hashids.java', 19, '227:3', '236:3', 59, 6 ), ( 4, 1, 8, 'public static int checkedCast(long value) {\n    int result = (int) value;\n    if (result != value) {\n    // don\'t use checkArgument here, to avoid boxing\n    throw new IllegalArgumentException("Out of range: " + value);\n    }\n    return result;\n    }', 'public static int METHOD_1 ( long value ) { int result = ( int ) value ; if ( result != value ) { throw new IllegalArgumentException ( STRING_1 + value ) ; } return result ; }', '[\'METHOD_1: checkedCast\', \'STRING_1: "Out of range: "\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/main/java/org/hashids/Hashids.java', 19, '238:3', '245:3', 39, 5 ), ( 4, 1, 12, 'private static String hash(long input, String alphabet) {\n    String hash = "";\n    int alphabetLen = alphabet.length();\n    do {\n    int index = (int) (input % alphabetLen);\n    if (index >= 0 && index < alphabet.length()) {\n    hash = alphabet.charAt(index) + hash;\n    }\n    input /= alphabetLen;\n    } while (input > 0);\n    return hash;\n    }', 'private static String METHOD_1 ( long input , String VAR_1 ) { String VAR_2 = STRING_1 ; int VAR_3 = VAR_1 . length ( ) ; do { int index = ( int ) ( input % VAR_3 ) ; if ( index >= 0 && index < VAR_1 . length ( ) ) { VAR_2 = VAR_1 . METHOD_2 ( index ) + VAR_2 ; } input /= VAR_3 ; } while ( input > 0 ) ; return VAR_2 ; }', '[\'METHOD_1: hash\', \'METHOD_2: charAt\', \'VAR_3: alphabetLen\', \'VAR_1: alphabet\', \'VAR_2: hash\', \'STRING_1: ""\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/main/java/org/hashids/Hashids.java', 19, '376:3', '389:3', 81, 10 ), ( 4, 1, 13, 'private static Long unhash(String input, String alphabet) {\n    long number = 0, pos;\n    for (int i = 0; i < input.length(); i++) {\n    pos = alphabet.indexOf(input.charAt(i));\n    number = number * alphabet.length() + pos;\n    }\n    return number;\n    }', 'private static Long METHOD_1 ( String input , String VAR_1 ) { long VAR_2 = 0 , pos ; for ( int i = 0 ; i < input . length ( ) ; i ++ ) { pos = VAR_1 . METHOD_2 ( input . METHOD_3 ( i ) ) ; VAR_2 = VAR_2 * VAR_1 . length ( ) + pos ; } return VAR_2 ; }', '[\'METHOD_1: unhash\', \'METHOD_2: indexOf\', \'METHOD_3: charAt\', \'VAR_2: number\', \'VAR_1: alphabet\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/main/java/org/hashids/Hashids.java', 19, '391:3', '400:3', 67, 6 ), ( 4, 0, 0, '@Test\n    public void test_large_number() {\n    long num_to_hash = 9007199254740992L;\n    Hashids a = new Hashids("this is my salt");\n    String res = a.encode(num_to_hash);\n    long[] b = a.decode(res);\n    Assert.assertEquals(num_to_hash, b[0]);\n    }', 'public void METHOD_1 ( ) { long VAR_1 = INT_1 ; TYPE_1 a = new TYPE_1 ( STRING_1 ) ; String res = a . METHOD_2 ( VAR_1 ) ; long [ ] b = a . METHOD_3 ( res ) ; TYPE_2 . METHOD_4 ( VAR_1 , b [ 0 ] ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_1: test_large_number\', \'METHOD_2: encode\', \'METHOD_4: assertEquals\', \'METHOD_3: decode\', \'VAR_1: num_to_hash\', \'INT_1: 9007199254740992L\', \'STRING_1: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '10:3', '17:3', 55, 7 ), ( 4, 0, 1, '@Test(expected = IllegalArgumentException.class)\n    public void test_large_number_not_supported() throws Exception {\n    long num_to_hash = 9007199254740993L;\n    Hashids a = new Hashids("this is my salt");\n    a.encode(num_to_hash);\n    }', 'public void METHOD_1 ( ) throws Exception { long VAR_1 = INT_1 ; TYPE_1 a = new TYPE_1 ( STRING_1 ) ; a . METHOD_2 ( VAR_1 ) ; }', '[\'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_1: test_large_number_not_supported\', \'VAR_1: num_to_hash\', \'INT_1: 9007199254740993L\', \'STRING_1: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '19:3', '24:3', 38, 5 ), ( 4, 0, 2, '@Test\n    public void test_wrong_decoding() {\n    Hashids a = new Hashids("this is my pepper");\n    long[] b = a.decode("NkK9");\n    Assert.assertEquals(b.length, 0);\n    }', 'public void METHOD_1 ( ) { TYPE_1 a = new TYPE_1 ( STRING_1 ) ; long [ ] b = a . METHOD_2 ( STRING_2 ) ; TYPE_2 . METHOD_3 ( b . length , 0 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_1: test_wrong_decoding\', \'METHOD_3: assertEquals\', \'METHOD_2: decode\', \'STRING_1: "this is my pepper"\', \'STRING_2: "NkK9"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '26:3', '31:3', 39, 5 ), ( 4, 0, 3, '@Test\n    public void test_one_number() {\n    String expected = "NkK9", res;\n    long num_to_hash = 12345L;\n    long[] res2;\n    Hashids a = new Hashids("this is my salt");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(res, expected);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2.length, 1);\n    Assert.assertEquals(res2[0], num_to_hash);\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long VAR_2 = INT_1 ; long [ ] VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( res , VAR_1 ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 . length , 1 ) ; TYPE_2 . METHOD_3 ( VAR_3 [ 0 ] , VAR_2 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_1: test_one_number\', \'METHOD_3: assertEquals\', \'METHOD_4: decode\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 12345L\', \'STRING_1: "NkK9"\', \'STRING_2: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '33:3', '44:3', 83, 11 ), ( 4, 0, 4, '@Test\n    public void test_serveral_numbers() {\n    String expected = "aBMswoO2UB3Sj", res;\n    long[] num_to_hash = { 683L, 94108L, 123L, 5L }, res2;\n    Hashids a = new Hashids("this is my salt");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(res, expected);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2.length, num_to_hash.length);\n    Assert.assertTrue(Arrays.equals(res2, num_to_hash));\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long [ ] VAR_2 = { INT_1 , INT_2 , INT_3 , INT_4 } , VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( res , VAR_1 ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 . length , VAR_2 . length ) ; TYPE_2 . METHOD_5 ( TYPE_3 . equals ( VAR_3 , VAR_2 ) ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'TYPE_3: Arrays\', \'METHOD_2: encode\', \'METHOD_5: assertTrue\', \'METHOD_3: assertEquals\', \'METHOD_4: decode\', \'METHOD_1: test_serveral_numbers\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 683L\', \'INT_2: 94108L\', \'INT_4: 5L\', \'INT_3: 123L\', \'STRING_1: "aBMswoO2UB3Sj"\', \'STRING_2: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '46:3', '56:3', 94, 10 ), ( 4, 0, 5, '@Test\n    public void test_specifying_custom_hash_alphabet() {\n    String expected = "b332db5", res;\n    long num_to_hash = 1234567L;\n    long[] res2;\n    Hashids a = new Hashids("this is my salt", 0, "0123456789abcdef");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(expected, res);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2[0], num_to_hash);\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long VAR_2 = INT_1 ; long [ ] VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 , 0 , STRING_3 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_1 , res ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 [ 0 ] , VAR_2 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_3: assertEquals\', \'METHOD_4: decode\', \'METHOD_1: test_specifying_custom_hash_alphabet\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 1234567L\', \'STRING_1: "b332db5"\', \'STRING_2: "this is my salt"\', \'STRING_3: "0123456789abcdef"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '58:3', '68:3', 76, 10 ), ( 4, 0, 6, '@Test\n    public void test_specifying_custom_hash_length() {\n    String expected = "gB0NV05e", res;\n    long num_to_hash = 1L;\n    long[] res2;\n    Hashids a = new Hashids("this is my salt", 8);\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(res, expected);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2.length, 1);\n    Assert.assertEquals(res2[0], num_to_hash);\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long VAR_2 = INT_1 ; long [ ] VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 , 8 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( res , VAR_1 ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 . length , 1 ) ; TYPE_2 . METHOD_3 ( VAR_3 [ 0 ] , VAR_2 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_1: test_specifying_custom_hash_length\', \'METHOD_3: assertEquals\', \'METHOD_4: decode\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 1L\', \'STRING_1: "gB0NV05e"\', \'STRING_2: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '70:3', '81:3', 85, 11 ), ( 4, 0, 7, '@Test\n    public void test_randomness() {\n    String expected = "1Wc8cwcE", res;\n    long[] num_to_hash = { 5L, 5L, 5L, 5L }, res2;\n    Hashids a = new Hashids("this is my salt");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(res, expected);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2.length, num_to_hash.length);\n    Assert.assertTrue(Arrays.equals(res2, num_to_hash));\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long [ ] VAR_2 = { INT_1 , INT_1 , INT_1 , INT_1 } , VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( res , VAR_1 ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 . length , VAR_2 . length ) ; TYPE_2 . METHOD_5 ( TYPE_3 . equals ( VAR_3 , VAR_2 ) ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'TYPE_3: Arrays\', \'METHOD_2: encode\', \'METHOD_1: test_randomness\', \'METHOD_5: assertTrue\', \'METHOD_3: assertEquals\', \'METHOD_4: decode\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 5L\', \'STRING_2: "this is my salt"\', \'STRING_1: "1Wc8cwcE"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '83:3', '93:3', 94, 10 ), ( 4, 0, 9, '@Test\n    public void test_randomness_for_incrementing() {\n    Hashids a;\n    a = new Hashids("this is my salt");\n    Assert.assertEquals(a.encode(1L), "NV");\n    Assert.assertEquals(a.encode(2L), "6m");\n    Assert.assertEquals(a.encode(3L), "yD");\n    Assert.assertEquals(a.encode(4L), "2l");\n    Assert.assertEquals(a.encode(5L), "rD");\n    }', 'public void METHOD_1 ( ) { TYPE_1 a ; a = new TYPE_1 ( STRING_1 ) ; TYPE_2 . METHOD_2 ( a . METHOD_3 ( INT_1 ) , STRING_2 ) ; TYPE_2 . METHOD_2 ( a . METHOD_3 ( INT_2 ) , STRING_3 ) ; TYPE_2 . METHOD_2 ( a . METHOD_3 ( INT_3 ) , STRING_4 ) ; TYPE_2 . METHOD_2 ( a . METHOD_3 ( INT_4 ) , STRING_5 ) ; TYPE_2 . METHOD_2 ( a . METHOD_3 ( INT_5 ) , STRING_6 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_3: encode\', \'METHOD_2: assertEquals\', \'METHOD_1: test_randomness_for_incrementing\', \'INT_5: 5L\', \'INT_4: 4L\', \'INT_3: 3L\', \'INT_2: 2L\', \'INT_1: 1L\', \'STRING_4: "yD"\', \'STRING_1: "this is my salt"\', \'STRING_5: "2l"\', \'STRING_2: "NV"\', \'STRING_3: "6m"\', \'STRING_6: "rD"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '107:3', '116:3', 89, 9 ), ( 4, 0, 11, '@Test\n    public void test_issue10() {\n    String expected = "3kK3nNOe", res;\n    long num_to_hash = 75527867232l;\n    long[] res2;\n    Hashids a = new Hashids("this is my salt");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(res, expected);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2.length, 1);\n    Assert.assertEquals(res2[0], num_to_hash);\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long VAR_2 = INT_1 ; long [ ] VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( res , VAR_1 ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 . length , 1 ) ; TYPE_2 . METHOD_3 ( VAR_3 [ 0 ] , VAR_2 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_3: assertEquals\', \'METHOD_1: test_issue10\', \'METHOD_4: decode\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 75527867232l\', \'STRING_1: "3kK3nNOe"\', \'STRING_2: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '124:3', '135:3', 83, 11 ), ( 4, 0, 12, '@Test\n    public void test_issue23() {\n    String expected = "9Q7MJ3LVGW", res;\n    long num_to_hash = 1145L;\n    long[] res2;\n    Hashids a = new Hashids("MyCamelCaseSalt", 10, "ABCDEFGHIJKLMNPQRSTUVWXYZ123456789");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(expected, res);\n    res2 = a.decode(expected);\n    Assert.assertEquals(res2[0], num_to_hash);\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long VAR_2 = INT_1 ; long [ ] VAR_3 ; TYPE_1 a = new TYPE_1 ( STRING_2 , INT_2 , STRING_3 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_1 , res ) ; VAR_3 = a . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 [ 0 ] , VAR_2 ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_3: assertEquals\', \'METHOD_4: decode\', \'METHOD_1: test_issue23\', \'VAR_1: expected\', \'VAR_3: res2\', \'VAR_2: num_to_hash\', \'INT_1: 1145L\', \'INT_2: 10\', \'STRING_3: "ABCDEFGHIJKLMNPQRSTUVWXYZ123456789"\', \'STRING_1: "9Q7MJ3LVGW"\', \'STRING_2: "MyCamelCaseSalt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '137:3', '147:3', 76, 10 ), ( 4, 0, 13, '@Test\n    public void test_issue30() {\n    String expected = "", res;\n    long num_to_hash = -1L;\n    Hashids a = new Hashids("this is my salt");\n    res = a.encode(num_to_hash);\n    Assert.assertEquals(expected, res);\n    }', 'public void METHOD_1 ( ) { String VAR_1 = STRING_1 , res ; long VAR_2 = - INT_1 ; TYPE_1 a = new TYPE_1 ( STRING_2 ) ; res = a . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_1 , res ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_2: encode\', \'METHOD_1: test_issue30\', \'METHOD_3: assertEquals\', \'VAR_1: expected\', \'VAR_2: num_to_hash\', \'INT_1: 1L\', \'STRING_1: ""\', \'STRING_2: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '149:3', '156:3', 48, 7 ), ( 4, 0, 14, '@Test\n    public void test_issue31() {\n    final long[] numbers = new long[500000];\n    long current = Hashids.MAX_NUMBER;\n    for (int i = 0; i < numbers.length; i++) {\n    numbers[i] = current--;\n    }\n    Hashids a = new Hashids("this is my salt");\n    Assert.assertNotEquals("", a.encode(numbers));\n    }', 'public void METHOD_1 ( ) { final long [ ] VAR_1 = new long [ INT_1 ] ; long current = VAR_2 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { VAR_1 [ i ] = current -- ; } TYPE_1 a = new TYPE_1 ( STRING_1 ) ; TYPE_2 . METHOD_2 ( STRING_2 , a . METHOD_3 ( VAR_1 ) ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_3: encode\', \'METHOD_1: test_issue31\', \'METHOD_2: assertNotEquals\', \'VAR_1: numbers\', \'VAR_2: Hashids.MAX_NUMBER\', \'INT_1: 500000\', \'STRING_2: ""\', \'STRING_1: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '158:3', '167:3', 75, 8 ), ( 4, 0, 15, '@Test\n    public void test_issue32() throws Exception {\n    long num_to_hash = -1;\n    Hashids a = new Hashids("this is my salt");\n    Assert.assertEquals("", a.encode(num_to_hash));\n    }', 'public void METHOD_1 ( ) throws Exception { long VAR_1 = - 1 ; TYPE_1 a = new TYPE_1 ( STRING_1 ) ; TYPE_2 . METHOD_2 ( STRING_2 , a . METHOD_3 ( VAR_1 ) ) ; }', '[\'TYPE_2: Assert\', \'TYPE_1: Hashids\', \'METHOD_3: encode\', \'METHOD_2: assertEquals\', \'METHOD_1: test_issue32\', \'VAR_1: num_to_hash\', \'STRING_2: ""\', \'STRING_1: "this is my salt"\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/test/java/org/hashids/HashidsTest.java', 16, '169:3', '174:3', 39, 5 ), ( 4, 1, 4, 'public String encode(long... numbers) {\n    if (numbers.length == 0) {\n    return "";\n    }\n    for (long number : numbers) {\n    if (number < 0) {\n    return "";\n    }\n    if (number > MAX_NUMBER) {\n    throw new IllegalArgumentException("number can not be greater than " + MAX_NUMBER + "L");\n    }\n    }\n    return this._encode(numbers);\n    }', 'public String METHOD_1 ( long ... VAR_1 ) { if ( VAR_1 . length == 0 ) { return STRING_1 ; } for ( long VAR_2 : VAR_1 ) { if ( VAR_2 < 0 ) { return STRING_1 ; } if ( VAR_2 > VAR_3 ) { throw new IllegalArgumentException ( STRING_2 + VAR_3 + STRING_3 ) ; } } return this . METHOD_2 ( VAR_1 ) ; }', '[\'METHOD_1: encode\', \'METHOD_2: _encode\', \'VAR_2: number\', \'VAR_1: numbers\', \'VAR_3: MAX_NUMBER\', \'STRING_1: ""\', \'STRING_3: "L"\', \'STRING_2: "number can not be greater than "\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/main/java/org/hashids/Hashids.java', 19, '168:3', '182:3', 70, 9 ), ( 4, 1, 7, 'public String decodeHex(String hash) {\n    StringBuilder result = new StringBuilder();\n    long[] numbers = this.decode(hash);\n    for (long number : numbers) {\n    result.append(Long.toHexString(number).substring(1));\n    }\n    return result.toString();\n    }', 'public String METHOD_1 ( String VAR_1 ) { StringBuilder result = new StringBuilder ( ) ; long [ ] VAR_2 = this . METHOD_2 ( VAR_1 ) ; for ( long VAR_3 : VAR_2 ) { result . append ( Long . METHOD_3 ( VAR_3 ) . substring ( 1 ) ) ; } return result . toString ( ) ; }', '[\'METHOD_3: toHexString\', \'METHOD_1: decodeHex\', \'METHOD_2: decode\', \'VAR_3: number\', \'VAR_2: numbers\', \'VAR_1: hash\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/main/java/org/hashids/Hashids.java', 19, '227:3', '236:3', 59, 6 ), ( 4, 1, 8, 'public static int checkedCast(long value) {\n    int result = (int) value;\n    if (result != value) {\n    // don\'t use checkArgument here, to avoid boxing\n    throw new IllegalArgumentException("Out of range: " + value);\n    }\n    return result;\n    }', 'public static int METHOD_1 ( long value ) { int result = ( int ) value ; if ( result != value ) { throw new IllegalArgumentException ( STRING_1 + value ) ; } return result ; }', '[\'METHOD_1: checkedCast\', \'STRING_1: "Out of range: "\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/main/java/org/hashids/Hashids.java', 19, '238:3', '245:3', 39, 5 ), ( 4, 1, 12, 'private static String hash(long input, String alphabet) {\n    String hash = "";\n    int alphabetLen = alphabet.length();\n    do {\n    int index = (int) (input % alphabetLen);\n    if (index >= 0 && index < alphabet.length()) {\n    hash = alphabet.charAt(index) + hash;\n    }\n    input /= alphabetLen;\n    } while (input > 0);\n    return hash;\n    }', 'private static String METHOD_1 ( long input , String VAR_1 ) { String VAR_2 = STRING_1 ; int VAR_3 = VAR_1 . length ( ) ; do { int index = ( int ) ( input % VAR_3 ) ; if ( index >= 0 && index < VAR_1 . length ( ) ) { VAR_2 = VAR_1 . METHOD_2 ( index ) + VAR_2 ; } input /= VAR_3 ; } while ( input > 0 ) ; return VAR_2 ; }', '[\'METHOD_1: hash\', \'METHOD_2: charAt\', \'VAR_3: alphabetLen\', \'VAR_1: alphabet\', \'VAR_2: hash\', \'STRING_1: ""\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/main/java/org/hashids/Hashids.java', 19, '376:3', '389:3', 81, 10 ), ( 4, 1, 13, 'private static Long unhash(String input, String alphabet) {\n    long number = 0, pos;\n    for (int i = 0; i < input.length(); i++) {\n    pos = alphabet.indexOf(input.charAt(i));\n    number = number * alphabet.length() + pos;\n    }\n    return number;\n    }', 'private static Long METHOD_1 ( String input , String VAR_1 ) { long VAR_2 = 0 , pos ; for ( int i = 0 ; i < input . length ( ) ; i ++ ) { pos = VAR_1 . METHOD_2 ( input . METHOD_3 ( i ) ) ; VAR_2 = VAR_2 * VAR_1 . length ( ) + pos ; } return VAR_2 ; }', '[\'METHOD_1: unhash\', \'METHOD_2: indexOf\', \'METHOD_3: charAt\', \'VAR_2: number\', \'VAR_1: alphabet\']', '10cella/hashids-java', 'https://github.com/10cella/hashids-java', '162a263c8007652472bf1821a26d33190730f8a5', '/Users/matteo.ciniselli/Desktop/Matteo/Github_mciniselli/github_manager/cloning_folder/hashids-java/src/main/java/org/hashids/Hashids.java', 19, '391:3', '400:3', 67, 6 ) ;

